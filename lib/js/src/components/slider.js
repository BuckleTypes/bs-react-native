// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var $$Array               = require("bs-platform/lib/js/array.js");
var ReasonReact           = require("reason-react/lib/js/src/reasonReact.js");
var Js_undefined          = require("bs-platform/lib/js/js_undefined.js");
var ReactNative           = require("react-native");
var Props$BsReactNative   = require("../private/props.js");
var UtilsRN$BsReactNative = require("../private/utilsRN.js");

function convertImageSource(src) {
  switch (src.tag | 0) {
    case 0 : 
    case 1 : 
        return src[0];
    case 2 : 
        return $$Array.of_list(src[0]);
    
  }
}

function make(disabled, maximumTrackTintColor, maximumValue, minimumTrackTintColor, minimumValue, onSlidingComplete, onValueChange, step, value, thumbTintColor, maximumTrackImage, minimumTrackImage, thumbImage, trackImage, accessibilityLabel, accessible, hitSlop, onAccessibilityTap, onLayout, onMagicTap, responderHandlers, pointerEvents, removeClippedSubviews, style, testID, accessibilityComponentType, accessibilityLiveRegion, collapsable, importantForAccessibility, needsOffscreenAlphaCompositing, renderToHardwareTextureAndroid, accessibilityTraits, accessibilityViewIsModal, shouldRasterizeIOS) {
  var partial_arg = Props$BsReactNative.extendView(accessibilityLabel, accessible, hitSlop, onAccessibilityTap, onLayout, onMagicTap, responderHandlers, pointerEvents, removeClippedSubviews, style, testID, accessibilityComponentType, accessibilityLiveRegion, collapsable, importantForAccessibility, needsOffscreenAlphaCompositing, renderToHardwareTextureAndroid, accessibilityTraits, accessibilityViewIsModal, shouldRasterizeIOS, {
        disabled: Js_undefined.from_opt(UtilsRN$BsReactNative.optBoolToOptJsBoolean(disabled)),
        maximumTrackTintColor: Js_undefined.from_opt(maximumTrackTintColor),
        maximumValue: Js_undefined.from_opt(maximumValue),
        minimumTrackTintColor: Js_undefined.from_opt(minimumTrackTintColor),
        minimumValue: Js_undefined.from_opt(minimumValue),
        onSlidingComplete: Js_undefined.from_opt(onSlidingComplete),
        onValueChange: Js_undefined.from_opt(onValueChange),
        step: Js_undefined.from_opt(step),
        value: Js_undefined.from_opt(value),
        thumbTintColor: Js_undefined.from_opt(thumbTintColor),
        maximumTrackImage: Js_undefined.from_opt(UtilsRN$BsReactNative.option_map(convertImageSource, maximumTrackImage)),
        minimumTrackImage: Js_undefined.from_opt(UtilsRN$BsReactNative.option_map(convertImageSource, minimumTrackImage)),
        thumbImage: Js_undefined.from_opt(UtilsRN$BsReactNative.option_map(convertImageSource, thumbImage)),
        trackImage: Js_undefined.from_opt(UtilsRN$BsReactNative.option_map(convertImageSource, trackImage))
      });
  var partial_arg$1 = ReactNative.Slider;
  return (function (param) {
      return ReasonReact.wrapJsForReason(partial_arg$1, partial_arg, param);
    });
}

exports.make = make;
/* ReasonReact Not a pure module */
