// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var ReactNative = require("react-native");
var ViewProps$BsReactNative = require("./ViewProps.js");

function make(disabled, trackColorTrue, trackColorFalse, iosBackgroundColor, onTintColor, onValueChange, thumbTintColor, thumbColor, tintColor, value, accessibilityLabel, accessible, hitSlop, onAccessibilityTap, onLayout, onMagicTap, responderHandlers, pointerEvents, removeClippedSubviews, style, testID, accessibilityComponentType, accessibilityLiveRegion, collapsable, importantForAccessibility, needsOffscreenAlphaCompositing, renderToHardwareTextureAndroid, accessibilityTraits, accessibilityRole, accessibilityStates, accessibilityHint, accessibilityIgnoresInvertColors, accessibilityViewIsModal, shouldRasterizeIOS) {
  var d = { };
  var partial_arg = ViewProps$BsReactNative.extend(accessibilityLabel, accessible, hitSlop, onAccessibilityTap, onLayout, onMagicTap, responderHandlers, pointerEvents, removeClippedSubviews, style, testID, accessibilityComponentType, accessibilityLiveRegion, collapsable, importantForAccessibility, needsOffscreenAlphaCompositing, renderToHardwareTextureAndroid, accessibilityTraits, accessibilityRole, accessibilityStates, accessibilityHint, accessibilityIgnoresInvertColors, accessibilityViewIsModal, shouldRasterizeIOS, {
        value: value,
        disabled: disabled,
        onValueChange: onValueChange,
        trackColor: (d["true"] = Belt_Option.mapWithDefault(trackColorTrue, null, (function (prim) {
                  return prim;
                })), d["false"] = Belt_Option.mapWithDefault(trackColorFalse, null, (function (prim) {
                  return prim;
                })), d),
        ios_backgroundColor: iosBackgroundColor,
        onTintColor: onTintColor,
        thumbTintColor: thumbTintColor,
        thumbColor: thumbColor,
        tintColor: tintColor
      });
  var partial_arg$1 = ReactNative.Switch;
  return (function (param) {
      return ReasonReact.wrapJsForReason(partial_arg$1, partial_arg, param);
    });
}

exports.make = make;
/* ReasonReact Not a pure module */
