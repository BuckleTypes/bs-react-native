// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var $$Array               = require("bs-platform/lib/js/array.js");
var Js_boolean            = require("bs-platform/lib/js/js_boolean.js");
var ReasonReact           = require("reason-react/lib/js/src/reasonReact.js");
var Js_undefined          = require("bs-platform/lib/js/js_undefined.js");
var ReactNative           = require("react-native");
var Props$BsReactNative   = require("../private/props.js");
var UtilsRN$BsReactNative = require("../private/utilsRN.js");

function CreateComponent(Impl) {
  var scrollTo = function (ref, x, y, animated) {
    ref.scrollTo({
          x: x,
          y: y,
          animated: Js_boolean.to_js_boolean(animated)
        });
    return /* () */0;
  };
  var scrollToEnd = function (ref, animated) {
    ref.scrollToEnd({
          animated: Js_boolean.to_js_boolean(animated)
        });
    return /* () */0;
  };
  var make = function (accessibilityLabel, accessible, hitSlop, onAccessibilityTap, onLayout, onMagicTap, responderHandlers, pointerEvents, removeClippedSubviews, style, testID, accessibilityComponentType, accessibilityLiveRegion, collapsable, importantForAccessibility, needsOffscreenAlphaCompositing, renderToHardwareTextureAndroid, accessibilityTraits, accessibilityViewIsModal, shouldRasterizeIOS, contentContainerStyle, horizontal, keyboardDismissMode, keyboardShouldPersistTaps, onContentSizeChange, onScroll, pagingEnabled, refreshControl, scrollEnabled, showsHorizontalScrollIndicator, showsVerticalScrollIndicator, stickyHeaderIndices, overScrollMode, scrollPerfTag, alwaysBounceHorizontal, alwaysBounceVertical, automaticallyAdjustContentInsets, bounces, canCancelContentTouches, centerContent, contentInset, contentOffset, decelerationRate, directionalLockEnabled, indicatorStyle, maximumZoomScale, mimimumZoomScale, onScrollAnimationEnd, scrollEventThrottle, scrollIndicatorInsets, scrollsToTop, snapToAlignment, zoomScale) {
    var partial_arg = Props$BsReactNative.extendView(accessibilityLabel, accessible, hitSlop, onAccessibilityTap, onLayout, onMagicTap, responderHandlers, pointerEvents, removeClippedSubviews, style, testID, accessibilityComponentType, accessibilityLiveRegion, collapsable, importantForAccessibility, needsOffscreenAlphaCompositing, renderToHardwareTextureAndroid, accessibilityTraits, accessibilityViewIsModal, shouldRasterizeIOS, {
          contentContainerStyle: Js_undefined.from_opt(contentContainerStyle),
          horizontal: Js_undefined.from_opt(UtilsRN$BsReactNative.optBoolToOptJsBoolean(horizontal)),
          keyboardDismissMode: Js_undefined.from_opt(UtilsRN$BsReactNative.option_map((function (x) {
                      if (x !== -453364557) {
                        if (x >= 1012481506) {
                          return "interactive";
                        } else {
                          return "none";
                        }
                      } else {
                        return "on-drag";
                      }
                    }), keyboardDismissMode)),
          keyboardShouldPersistTaps: Js_undefined.from_opt(UtilsRN$BsReactNative.option_map((function (x) {
                      if (x !== -958984497) {
                        if (x >= 422592140) {
                          return "never";
                        } else {
                          return "handled";
                        }
                      } else {
                        return "always";
                      }
                    }), keyboardShouldPersistTaps)),
          onContentSizeChange: Js_undefined.from_opt(onContentSizeChange),
          onScroll: Js_undefined.from_opt(onScroll),
          pagingEnabled: Js_undefined.from_opt(UtilsRN$BsReactNative.optBoolToOptJsBoolean(pagingEnabled)),
          refreshControl: Js_undefined.from_opt(refreshControl),
          scrollEnabled: Js_undefined.from_opt(UtilsRN$BsReactNative.optBoolToOptJsBoolean(scrollEnabled)),
          showsHorizontalScrollIndicator: Js_undefined.from_opt(UtilsRN$BsReactNative.optBoolToOptJsBoolean(showsHorizontalScrollIndicator)),
          showsVerticalScrollIndicator: Js_undefined.from_opt(UtilsRN$BsReactNative.optBoolToOptJsBoolean(showsVerticalScrollIndicator)),
          stickyHeaderIndices: Js_undefined.from_opt(UtilsRN$BsReactNative.option_map($$Array.of_list, stickyHeaderIndices)),
          overScrollMode: Js_undefined.from_opt(UtilsRN$BsReactNative.option_map((function (x) {
                      if (x !== -958984497) {
                        if (x >= 422592140) {
                          return "never";
                        } else {
                          return "auto";
                        }
                      } else {
                        return "always";
                      }
                    }), overScrollMode)),
          scrollPerfTag: Js_undefined.from_opt(scrollPerfTag),
          alwaysBounceHorizontal: Js_undefined.from_opt(UtilsRN$BsReactNative.optBoolToOptJsBoolean(alwaysBounceHorizontal)),
          alwaysBounceVertical: Js_undefined.from_opt(UtilsRN$BsReactNative.optBoolToOptJsBoolean(alwaysBounceVertical)),
          automaticallyAdjustContentInsets: Js_undefined.from_opt(UtilsRN$BsReactNative.optBoolToOptJsBoolean(automaticallyAdjustContentInsets)),
          bounces: Js_undefined.from_opt(UtilsRN$BsReactNative.optBoolToOptJsBoolean(bounces)),
          canCancelContentTouches: Js_undefined.from_opt(UtilsRN$BsReactNative.optBoolToOptJsBoolean(canCancelContentTouches)),
          centerContent: Js_undefined.from_opt(UtilsRN$BsReactNative.optBoolToOptJsBoolean(centerContent)),
          contentInset: Js_undefined.from_opt(contentInset),
          contentOffset: Js_undefined.from_opt(UtilsRN$BsReactNative.option_map((function (param) {
                      return {
                              x: param[/* x */0],
                              y: param[/* y */1]
                            };
                    }), contentOffset)),
          decelerationRate: Js_undefined.from_opt(UtilsRN$BsReactNative.option_map((function (x) {
                      if (x >= 812216871) {
                        return "normal";
                      } else {
                        return "fast";
                      }
                    }), decelerationRate)),
          directionalLockEnabled: Js_undefined.from_opt(UtilsRN$BsReactNative.optBoolToOptJsBoolean(directionalLockEnabled)),
          indicatorStyle: Js_undefined.from_opt(UtilsRN$BsReactNative.option_map((function (x) {
                      if (x !== 465819841) {
                        if (x >= 888264127) {
                          return "black";
                        } else {
                          return "white";
                        }
                      } else {
                        return "default";
                      }
                    }), indicatorStyle)),
          maximumZoomScale: Js_undefined.from_opt(maximumZoomScale),
          mimimumZoomScale: Js_undefined.from_opt(mimimumZoomScale),
          onScrollAnimationEnd: Js_undefined.from_opt(onScrollAnimationEnd),
          scrollEventThrottle: Js_undefined.from_opt(scrollEventThrottle),
          scrollIndicatorInsets: Js_undefined.from_opt(scrollIndicatorInsets),
          scrollsToTop: Js_undefined.from_opt(UtilsRN$BsReactNative.optBoolToOptJsBoolean(scrollsToTop)),
          snapToAlignment: Js_undefined.from_opt(UtilsRN$BsReactNative.option_map((function (x) {
                      if (x !== 67859554) {
                        if (x >= 98248149) {
                          return "center";
                        } else {
                          return "end";
                        }
                      } else {
                        return "start";
                      }
                    }), snapToAlignment)),
          zoomScale: Js_undefined.from_opt(zoomScale)
        });
    var partial_arg$1 = Impl[/* view */0];
    return (function (param) {
        return ReasonReact.wrapJsForReason(partial_arg$1, partial_arg, param);
      });
  };
  return /* module */[
          /* scrollTo */scrollTo,
          /* scrollToEnd */scrollToEnd,
          /* make */make
        ];
}

var Impl = /* module */[/* ScrollView */ReactNative.ScrollView];

function scrollTo(ref, x, y, animated) {
  ref.scrollTo({
        x: x,
        y: y,
        animated: Js_boolean.to_js_boolean(animated)
      });
  return /* () */0;
}

function scrollToEnd(ref, animated) {
  ref.scrollToEnd({
        animated: Js_boolean.to_js_boolean(animated)
      });
  return /* () */0;
}

function make(accessibilityLabel, accessible, hitSlop, onAccessibilityTap, onLayout, onMagicTap, responderHandlers, pointerEvents, removeClippedSubviews, style, testID, accessibilityComponentType, accessibilityLiveRegion, collapsable, importantForAccessibility, needsOffscreenAlphaCompositing, renderToHardwareTextureAndroid, accessibilityTraits, accessibilityViewIsModal, shouldRasterizeIOS, contentContainerStyle, horizontal, keyboardDismissMode, keyboardShouldPersistTaps, onContentSizeChange, onScroll, pagingEnabled, refreshControl, scrollEnabled, showsHorizontalScrollIndicator, showsVerticalScrollIndicator, stickyHeaderIndices, overScrollMode, scrollPerfTag, alwaysBounceHorizontal, alwaysBounceVertical, automaticallyAdjustContentInsets, bounces, canCancelContentTouches, centerContent, contentInset, contentOffset, decelerationRate, directionalLockEnabled, indicatorStyle, maximumZoomScale, mimimumZoomScale, onScrollAnimationEnd, scrollEventThrottle, scrollIndicatorInsets, scrollsToTop, snapToAlignment, zoomScale) {
  var partial_arg = Props$BsReactNative.extendView(accessibilityLabel, accessible, hitSlop, onAccessibilityTap, onLayout, onMagicTap, responderHandlers, pointerEvents, removeClippedSubviews, style, testID, accessibilityComponentType, accessibilityLiveRegion, collapsable, importantForAccessibility, needsOffscreenAlphaCompositing, renderToHardwareTextureAndroid, accessibilityTraits, accessibilityViewIsModal, shouldRasterizeIOS, {
        contentContainerStyle: Js_undefined.from_opt(contentContainerStyle),
        horizontal: Js_undefined.from_opt(UtilsRN$BsReactNative.optBoolToOptJsBoolean(horizontal)),
        keyboardDismissMode: Js_undefined.from_opt(UtilsRN$BsReactNative.option_map((function (x) {
                    if (x !== -453364557) {
                      if (x >= 1012481506) {
                        return "interactive";
                      } else {
                        return "none";
                      }
                    } else {
                      return "on-drag";
                    }
                  }), keyboardDismissMode)),
        keyboardShouldPersistTaps: Js_undefined.from_opt(UtilsRN$BsReactNative.option_map((function (x) {
                    if (x !== -958984497) {
                      if (x >= 422592140) {
                        return "never";
                      } else {
                        return "handled";
                      }
                    } else {
                      return "always";
                    }
                  }), keyboardShouldPersistTaps)),
        onContentSizeChange: Js_undefined.from_opt(onContentSizeChange),
        onScroll: Js_undefined.from_opt(onScroll),
        pagingEnabled: Js_undefined.from_opt(UtilsRN$BsReactNative.optBoolToOptJsBoolean(pagingEnabled)),
        refreshControl: Js_undefined.from_opt(refreshControl),
        scrollEnabled: Js_undefined.from_opt(UtilsRN$BsReactNative.optBoolToOptJsBoolean(scrollEnabled)),
        showsHorizontalScrollIndicator: Js_undefined.from_opt(UtilsRN$BsReactNative.optBoolToOptJsBoolean(showsHorizontalScrollIndicator)),
        showsVerticalScrollIndicator: Js_undefined.from_opt(UtilsRN$BsReactNative.optBoolToOptJsBoolean(showsVerticalScrollIndicator)),
        stickyHeaderIndices: Js_undefined.from_opt(UtilsRN$BsReactNative.option_map($$Array.of_list, stickyHeaderIndices)),
        overScrollMode: Js_undefined.from_opt(UtilsRN$BsReactNative.option_map((function (x) {
                    if (x !== -958984497) {
                      if (x >= 422592140) {
                        return "never";
                      } else {
                        return "auto";
                      }
                    } else {
                      return "always";
                    }
                  }), overScrollMode)),
        scrollPerfTag: Js_undefined.from_opt(scrollPerfTag),
        alwaysBounceHorizontal: Js_undefined.from_opt(UtilsRN$BsReactNative.optBoolToOptJsBoolean(alwaysBounceHorizontal)),
        alwaysBounceVertical: Js_undefined.from_opt(UtilsRN$BsReactNative.optBoolToOptJsBoolean(alwaysBounceVertical)),
        automaticallyAdjustContentInsets: Js_undefined.from_opt(UtilsRN$BsReactNative.optBoolToOptJsBoolean(automaticallyAdjustContentInsets)),
        bounces: Js_undefined.from_opt(UtilsRN$BsReactNative.optBoolToOptJsBoolean(bounces)),
        canCancelContentTouches: Js_undefined.from_opt(UtilsRN$BsReactNative.optBoolToOptJsBoolean(canCancelContentTouches)),
        centerContent: Js_undefined.from_opt(UtilsRN$BsReactNative.optBoolToOptJsBoolean(centerContent)),
        contentInset: Js_undefined.from_opt(contentInset),
        contentOffset: Js_undefined.from_opt(UtilsRN$BsReactNative.option_map((function (param) {
                    return {
                            x: param[/* x */0],
                            y: param[/* y */1]
                          };
                  }), contentOffset)),
        decelerationRate: Js_undefined.from_opt(UtilsRN$BsReactNative.option_map((function (x) {
                    if (x >= 812216871) {
                      return "normal";
                    } else {
                      return "fast";
                    }
                  }), decelerationRate)),
        directionalLockEnabled: Js_undefined.from_opt(UtilsRN$BsReactNative.optBoolToOptJsBoolean(directionalLockEnabled)),
        indicatorStyle: Js_undefined.from_opt(UtilsRN$BsReactNative.option_map((function (x) {
                    if (x !== 465819841) {
                      if (x >= 888264127) {
                        return "black";
                      } else {
                        return "white";
                      }
                    } else {
                      return "default";
                    }
                  }), indicatorStyle)),
        maximumZoomScale: Js_undefined.from_opt(maximumZoomScale),
        mimimumZoomScale: Js_undefined.from_opt(mimimumZoomScale),
        onScrollAnimationEnd: Js_undefined.from_opt(onScrollAnimationEnd),
        scrollEventThrottle: Js_undefined.from_opt(scrollEventThrottle),
        scrollIndicatorInsets: Js_undefined.from_opt(scrollIndicatorInsets),
        scrollsToTop: Js_undefined.from_opt(UtilsRN$BsReactNative.optBoolToOptJsBoolean(scrollsToTop)),
        snapToAlignment: Js_undefined.from_opt(UtilsRN$BsReactNative.option_map((function (x) {
                    if (x !== 67859554) {
                      if (x >= 98248149) {
                        return "center";
                      } else {
                        return "end";
                      }
                    } else {
                      return "start";
                    }
                  }), snapToAlignment)),
        zoomScale: Js_undefined.from_opt(zoomScale)
      });
  var partial_arg$1 = Impl[/* view */0];
  return (function (param) {
      return ReasonReact.wrapJsForReason(partial_arg$1, partial_arg, param);
    });
}

exports.CreateComponent = CreateComponent;
exports.scrollTo        = scrollTo;
exports.scrollToEnd     = scrollToEnd;
exports.make            = make;
/* Impl Not a pure module */
