// Generated by BUCKLESCRIPT VERSION 4.0.3, PLEASE EDIT WITH CARE
'use strict';

var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var Js_undefined = require("bs-platform/lib/js/js_undefined.js");
var Props$Rebolt = require("../private/props.js");
var ReactNative = require("react-native");
var UtilsRN$Rebolt = require("../private/utilsRN.js");

function make(renderNavigationView, onDrawerClose, onDrawerOpen, onDrawerSlide, onDrawerStateChanged, drawerWidth, drawerPosition, keyboardDismissMode, drawerLockMode, drawerBackgroundColor, statusBarBackgroundColor, accessibilityLabel, accessible, hitSlop, onAccessibilityTap, onLayout, onMagicTap, responderHandlers, pointerEvents, removeClippedSubviews, style, testID, accessibilityComponentType, accessibilityLiveRegion, collapsable, importantForAccessibility, needsOffscreenAlphaCompositing, renderToHardwareTextureAndroid, accessibilityTraits, accessibilityViewIsModal, shouldRasterizeIOS) {
  var partial_arg = Props$Rebolt.extendView(accessibilityLabel, accessible, hitSlop, onAccessibilityTap, onLayout, onMagicTap, responderHandlers, pointerEvents, removeClippedSubviews, style, testID, accessibilityComponentType, accessibilityLiveRegion, collapsable, importantForAccessibility, needsOffscreenAlphaCompositing, renderToHardwareTextureAndroid, accessibilityTraits, accessibilityViewIsModal, shouldRasterizeIOS, {
        renderNavigationView: renderNavigationView,
        onDrawerClose: Js_undefined.fromOption(onDrawerClose),
        onDrawerOpen: Js_undefined.fromOption(onDrawerOpen),
        onDrawerSlide: Js_undefined.fromOption(onDrawerSlide),
        onDrawerStateChanged: Js_undefined.fromOption(onDrawerStateChanged),
        drawerWidth: Js_undefined.fromOption(drawerWidth),
        drawerPosition: Js_undefined.fromOption(UtilsRN$Rebolt.option_map((function (param) {
                    if (param >= -379319332) {
                      return Js_undefined.fromOption(Js_primitive.undefined_to_opt(ReactNative.DrawerLayoutAndroid.positions["Right"]));
                    } else {
                      return Js_undefined.fromOption(Js_primitive.undefined_to_opt(ReactNative.DrawerLayoutAndroid.positions["Left"]));
                    }
                  }), drawerPosition)),
        keyboardDismissMode: Js_undefined.fromOption(UtilsRN$Rebolt.option_map((function (param) {
                    if (param >= -453364557) {
                      return "on-drag";
                    } else {
                      return "none";
                    }
                  }), keyboardDismissMode)),
        drawerLockMode: Js_undefined.fromOption(UtilsRN$Rebolt.option_map((function (param) {
                    if (param !== -603048925) {
                      if (param >= 924157526) {
                        return "locked-closed";
                      } else {
                        return "locked-open";
                      }
                    } else {
                      return "unlocked";
                    }
                  }), drawerLockMode)),
        drawerBackgroundColor: Js_undefined.fromOption(drawerBackgroundColor),
        statusBarBackgroundColor: Js_undefined.fromOption(statusBarBackgroundColor)
      });
  var partial_arg$1 = ReactNative.DrawerLayoutAndroid;
  return (function (param) {
      return ReasonReact.wrapJsForReason(partial_arg$1, partial_arg, param);
    });
}

function openDrawer(prim) {
  prim.openDrawer();
  return /* () */0;
}

function closeDrawer(prim) {
  prim.closeDrawer();
  return /* () */0;
}

exports.openDrawer = openDrawer;
exports.closeDrawer = closeDrawer;
exports.make = make;
/* ReasonReact Not a pure module */
