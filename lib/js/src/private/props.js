// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Types$BsReactNative = require("../types.js");

function serialize(handlers) {
  if (handlers !== undefined) {
    var handlers$1 = handlers;
    return {
            onMoveShouldSetResponder: Belt_Option.map(handlers$1[/* onMoveShouldSetResponder */0], (function (g, x) {
                    return Curry._1(g, x);
                  })),
            onMoveShouldSetResponderCapture: Belt_Option.map(handlers$1[/* onMoveShouldSetResponderCapture */1], (function (g, x) {
                    return Curry._1(g, x);
                  })),
            onResponderGrant: handlers$1[/* onResponderGrant */2],
            onResponderMove: handlers$1[/* onResponderMove */3],
            onResponderReject: handlers$1[/* onResponderReject */4],
            onResponderRelease: handlers$1[/* onResponderRelease */5],
            onResponderTerminate: handlers$1[/* onResponderTerminate */6],
            onResponderTerminationRequest: handlers$1[/* onResponderTerminationRequest */7],
            onStartShouldSetResponder: Belt_Option.map(handlers$1[/* onStartShouldSetResponder */8], (function (g, x) {
                    return Curry._1(g, x);
                  })),
            onStartShouldSetResponderCapture: Belt_Option.map(handlers$1[/* onStartShouldSetResponderCapture */9], (function (g, x) {
                    return Curry._1(g, x);
                  }))
          };
  } else {
    return { };
  }
}

function extendView(accessibilityLabel, accessible, hitSlop, onAccessibilityTap, onLayout, onMagicTap, responderHandlers, pointerEvents, removeClippedSubviews, style, testID, accessibilityComponentType, accessibilityLiveRegion, collapsable, importantForAccessibility, needsOffscreenAlphaCompositing, renderToHardwareTextureAndroid, accessibilityTraits, accessibilityViewIsModal, shouldRasterizeIOS, moreProps) {
  return Object.assign({
              accessibilityLabel: accessibilityLabel,
              accessible: accessible,
              hitSlop: hitSlop,
              onAccessibilityTap: onAccessibilityTap,
              onLayout: onLayout,
              onMagicTap: onMagicTap,
              removeClippedSubviews: removeClippedSubviews,
              pointerEvents: Belt_Option.map(pointerEvents, Types$BsReactNative.pointerEventsToJs),
              style: style,
              testID: testID,
              accessibilityComponentType: Belt_Option.map(accessibilityComponentType, Types$BsReactNative.accessibilityComponentTypeToJs),
              accessibilityLiveRegion: Belt_Option.map(accessibilityLiveRegion, Types$BsReactNative.accessibilityLiveRegionToJs),
              collapsable: collapsable,
              importantForAccessibility: Belt_Option.map(importantForAccessibility, Types$BsReactNative.importantForAccessibilityToJs),
              needsOffscreenAlphaCompositing: needsOffscreenAlphaCompositing,
              renderToHardwareTextureAndroid: renderToHardwareTextureAndroid,
              accessibilityTraits: Belt_Option.map(accessibilityTraits, (function (x) {
                      return $$Array.of_list(List.map(Types$BsReactNative.accessibilityTraitToJs, x));
                    })),
              accessibilityViewIsModal: accessibilityViewIsModal,
              shouldRasterizeIOS: shouldRasterizeIOS
            }, moreProps, serialize(responderHandlers));
}

exports.extendView = extendView;
/* No side effect */
