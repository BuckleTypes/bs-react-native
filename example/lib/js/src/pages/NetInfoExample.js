// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var Text$BsReactNative = require("bs-react-native/lib/js/src/components/text.js");
var View$BsReactNative = require("bs-react-native/lib/js/src/components/view.js");
var Style$BsReactNative = require("bs-react-native/lib/js/src/style.js");
var NetInfo$BsReactNative = require("bs-react-native/lib/js/src/netInfo.js");
var TouchableOpacity$BsReactNative = require("bs-react-native/lib/js/src/components/touchableOpacity.js");

var component = ReasonReact.reducerComponent("NetInfoIsConnectedExample");

function make() {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (param) {
              var match = param[/* state */1][/* isConnected */0];
              return ReasonReact.element(undefined, undefined, View$BsReactNative.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(/* array */[ReasonReact.element(undefined, undefined, View$BsReactNative.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, Js_primitive.some(Style$BsReactNative.style(/* :: */[
                                                  Style$BsReactNative.padding(/* Pt */Block.__(0, [10])),
                                                  /* [] */0
                                                ])), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(/* array */[ReasonReact.element(undefined, undefined, Text$BsReactNative.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */[match ? "Connected" : "Not connected"]))]))]));
            }),
          /* initialState */(function () {
              return /* record */[/* isConnected */false];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, _) {
              return /* Update */Block.__(0, [/* record */[/* isConnected */action[0]]]);
            }),
          /* subscriptions */(function (self) {
              return /* :: */[
                      /* Sub */[
                        (function () {
                            var handleConnectionChange = function (isConnected) {
                              return Curry._1(self[/* send */3], /* UpdateIsConnected */[isConnected]);
                            };
                            NetInfo$BsReactNative.IsConnected[/* addEventListener */0](handleConnectionChange);
                            return handleConnectionChange;
                          }),
                        (function (listener) {
                            return NetInfo$BsReactNative.IsConnected[/* removeEventListener */1](listener);
                          })
                      ],
                      /* [] */0
                    ];
            }),
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

var NetInfoIsConnectedExample = /* module */[
  /* component */component,
  /* make */make
];

var component$1 = ReasonReact.reducerComponent("NetInfoConnectionTypeExample");

function checkConnectionType(_, param) {
  var send = param[/* send */3];
  NetInfo$BsReactNative.getConnectionInfo(/* () */0).then((function (info) {
          Curry._1(send, /* UpdateConnectionType */[info.type]);
          return Promise.resolve(/* () */0);
        }));
  return /* () */0;
}

function make$1() {
  return /* record */[
          /* debugName */component$1[/* debugName */0],
          /* reactClassInternal */component$1[/* reactClassInternal */1],
          /* handedOffState */component$1[/* handedOffState */2],
          /* willReceiveProps */component$1[/* willReceiveProps */3],
          /* didMount */component$1[/* didMount */4],
          /* didUpdate */component$1[/* didUpdate */5],
          /* willUnmount */component$1[/* willUnmount */6],
          /* willUpdate */component$1[/* willUpdate */7],
          /* shouldUpdate */component$1[/* shouldUpdate */8],
          /* render */(function (param) {
              var match = param[/* state */1][/* connectionType */0];
              var tmp;
              switch (match) {
                case 0 : 
                    tmp = "none";
                    break;
                case 1 : 
                    tmp = "wifi";
                    break;
                case 2 : 
                    tmp = "cellular";
                    break;
                case 3 : 
                    tmp = "unknown";
                    break;
                case 4 : 
                case 5 : 
                case 6 : 
                    tmp = "something else";
                    break;
                
              }
              return ReasonReact.element(undefined, undefined, View$BsReactNative.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(/* array */[ReasonReact.element(undefined, undefined, View$BsReactNative.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, Js_primitive.some(Style$BsReactNative.style(/* :: */[
                                                  Style$BsReactNative.padding(/* Pt */Block.__(0, [10])),
                                                  /* [] */0
                                                ])), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(/* array */[
                                        ReasonReact.element(undefined, undefined, TouchableOpacity$BsReactNative.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, Curry._1(param[/* handle */0], checkConnectionType), undefined, undefined, undefined, undefined, undefined, undefined, undefined)(/* array */[ReasonReact.element(undefined, undefined, Text$BsReactNative.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */["Check connection type"]))])),
                                        ReasonReact.element(undefined, undefined, View$BsReactNative.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(/* array */[ReasonReact.element(undefined, undefined, Text$BsReactNative.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */[tmp]))]))
                                      ]))]));
            }),
          /* initialState */(function () {
              return /* record */[/* connectionType : Unknown */3];
            }),
          /* retainedProps */component$1[/* retainedProps */11],
          /* reducer */(function (action, _) {
              var connectionType = NetInfo$BsReactNative.connectionType(action[0]);
              return /* Update */Block.__(0, [/* record */[/* connectionType */connectionType]]);
            }),
          /* subscriptions */component$1[/* subscriptions */13],
          /* jsElementWrapped */component$1[/* jsElementWrapped */14]
        ];
}

var NetInfoConnectionTypeExample = /* module */[
  /* component */component$1,
  /* checkConnectionType */checkConnectionType,
  /* make */make$1
];

var examples = /* array */[
  /* record */[
    /* title */"NetInfo.IsConnected.addEventListener()",
    /* description */undefined,
    /* render */(function () {
        return ReasonReact.element(undefined, undefined, make(/* array */[]));
      })
  ],
  /* record */[
    /* title */"NetInfo.getConnectionInfo()",
    /* description */undefined,
    /* render */(function () {
        return ReasonReact.element(undefined, undefined, make$1(/* array */[]));
      })
  ]
];

var title = "<NetInfo>";

var exampleType = /* Multiple */0;

var description = "NetInfo";

var displayName = "NetInfoExample";

exports.NetInfoIsConnectedExample = NetInfoIsConnectedExample;
exports.NetInfoConnectionTypeExample = NetInfoConnectionTypeExample;
exports.title = title;
exports.exampleType = exampleType;
exports.description = description;
exports.displayName = displayName;
exports.examples = examples;
/* component Not a pure module */
