// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var Text$BsReactNative = require("bs-react-native/lib/js/src/components/text.js");
var View$BsReactNative = require("bs-react-native/lib/js/src/components/view.js");
var Style$BsReactNative = require("bs-react-native/lib/js/src/style.js");
var Geolocation$BsReactNative = require("bs-react-native/lib/js/src/geolocation.js");
var TouchableOpacity$BsReactNative = require("bs-react-native/lib/js/src/components/touchableOpacity.js");

function getCurrentPosition(_, param) {
  var send = param[/* send */3];
  return Geolocation$BsReactNative.getCurrentPosition(undefined, undefined, undefined, (function (position) {
                return Curry._1(send, /* UpdateCoords */[/* record */[
                              /* latitude */position.coords.latitude,
                              /* longitude */position.coords.longitude
                            ]]);
              }), (function (error) {
                console.log(error);
                return /* () */0;
              }));
}

var component = ReasonReact.reducerComponent("GeolocationGetCurrentPositionExample");

function make() {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (param) {
              var state = param[/* state */1];
              return ReasonReact.element(undefined, undefined, View$BsReactNative.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(/* array */[ReasonReact.element(undefined, undefined, View$BsReactNative.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, Js_primitive.some(Style$BsReactNative.style(/* :: */[
                                                  Style$BsReactNative.padding(/* Pt */Block.__(0, [10])),
                                                  /* [] */0
                                                ])), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(/* array */[
                                        ReasonReact.element(undefined, undefined, TouchableOpacity$BsReactNative.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, Curry._1(param[/* handle */0], getCurrentPosition), undefined, undefined, undefined, undefined, undefined, undefined, undefined)(/* array */[ReasonReact.element(undefined, undefined, Text$BsReactNative.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */["Get current position"]))])),
                                        ReasonReact.element(undefined, undefined, Text$BsReactNative.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */["latitude:" + Pervasives.string_of_float(state[/* coords */0][/* latitude */0])])),
                                        ReasonReact.element(undefined, undefined, Text$BsReactNative.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */["longitude:" + Pervasives.string_of_float(state[/* coords */0][/* longitude */1])]))
                                      ]))]));
            }),
          /* initialState */(function () {
              return /* record */[/* coords : record */[
                        /* latitude */0.0,
                        /* longitude */0.0
                      ]];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, _) {
              return /* Update */Block.__(0, [/* record */[/* coords */action[0]]]);
            }),
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

var GeolocationGetCurrentPositionExample = /* module */[
  /* getCurrentPosition */getCurrentPosition,
  /* component */component,
  /* make */make
];

var component$1 = ReasonReact.reducerComponent("GeolocationWatchPositionExample");

function make$1() {
  return /* record */[
          /* debugName */component$1[/* debugName */0],
          /* reactClassInternal */component$1[/* reactClassInternal */1],
          /* handedOffState */component$1[/* handedOffState */2],
          /* willReceiveProps */component$1[/* willReceiveProps */3],
          /* didMount */component$1[/* didMount */4],
          /* didUpdate */component$1[/* didUpdate */5],
          /* willUnmount */component$1[/* willUnmount */6],
          /* willUpdate */component$1[/* willUpdate */7],
          /* shouldUpdate */component$1[/* shouldUpdate */8],
          /* render */(function (param) {
              var state = param[/* state */1];
              return ReasonReact.element(undefined, undefined, View$BsReactNative.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(/* array */[ReasonReact.element(undefined, undefined, View$BsReactNative.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, Js_primitive.some(Style$BsReactNative.style(/* :: */[
                                                  Style$BsReactNative.padding(/* Pt */Block.__(0, [10])),
                                                  /* [] */0
                                                ])), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(/* array */[
                                        ReasonReact.element(undefined, undefined, Text$BsReactNative.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */["latitude:" + Pervasives.string_of_float(state[/* coords */0][/* latitude */0])])),
                                        ReasonReact.element(undefined, undefined, Text$BsReactNative.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */["longitude:" + Pervasives.string_of_float(state[/* coords */0][/* longitude */1])]))
                                      ]))]));
            }),
          /* initialState */(function () {
              return /* record */[/* coords : record */[
                        /* latitude */0.0,
                        /* longitude */0.0
                      ]];
            }),
          /* retainedProps */component$1[/* retainedProps */11],
          /* reducer */(function (action, _) {
              return /* Update */Block.__(0, [/* record */[/* coords */action[0]]]);
            }),
          /* subscriptions */(function (param) {
              var send = param[/* send */3];
              return /* :: */[
                      /* Sub */[
                        (function () {
                            return Geolocation$BsReactNative.watchPosition(undefined, undefined, undefined, undefined, undefined, (function (position) {
                                          return Curry._1(send, /* UpdateCoords */[/* record */[
                                                        /* latitude */position.coords.latitude,
                                                        /* longitude */position.coords.longitude
                                                      ]]);
                                        }), (function (error) {
                                          console.log(error);
                                          return /* () */0;
                                        }));
                          }),
                        Geolocation$BsReactNative.clearWatch
                      ],
                      /* [] */0
                    ];
            }),
          /* jsElementWrapped */component$1[/* jsElementWrapped */14]
        ];
}

var GeolocationWatchPositionExample = /* module */[
  /* component */component$1,
  /* make */make$1
];

var examples = /* array */[
  /* record */[
    /* title */"Geolocation.getCurrentPosition(success, error, options)",
    /* description */undefined,
    /* render */(function () {
        return ReasonReact.element(undefined, undefined, make(/* array */[]));
      })
  ],
  /* record */[
    /* title */"Geolocation.watchPosition(success, error, options)",
    /* description */undefined,
    /* render */(function () {
        return ReasonReact.element(undefined, undefined, make$1(/* array */[]));
      })
  ]
];

var title = "<GeolocationExample>";

var exampleType = /* Multiple */0;

var description = "GeolocationExample";

var displayName = "GeolocationExample";

exports.GeolocationGetCurrentPositionExample = GeolocationGetCurrentPositionExample;
exports.GeolocationWatchPositionExample = GeolocationWatchPositionExample;
exports.title = title;
exports.exampleType = exampleType;
exports.description = description;
exports.displayName = displayName;
exports.examples = examples;
/* component Not a pure module */
