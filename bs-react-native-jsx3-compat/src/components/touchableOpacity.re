[@bs.send]
external setOpacityTo: (ReasonReact.reactRef, float, int) => unit =
  "setOpacityTo";

[@react.component]
let make =
    (
      ~accessible=?,
      ~accessibilityLabel=?,
      ~accessibilityComponentType=?,
      ~accessibilityTraits=?,
      ~accessibilityRole=?,
      ~accessibilityStates=?,
      ~accessibilityHint=?,
      ~accessibilityIgnoresInvertColors=?,
      ~delayLongPress=?,
      ~delayPressIn=?,
      ~delayPressOut=?,
      ~disabled=?,
      ~hitSlop=?,
      ~style=?,
      ~onLayout=?,
      ~onLongPress=?,
      ~onPress=?,
      ~onPressIn=?,
      ~onPressOut=?,
      ~pressRetentionOffset=?,
      ~activeOpacity=?,
      ~focusedOpacity=?,
      ~testID=?,
      ~tvParallaxProperties=?,
      ~children=?,
    ) =>
  <ReactNative.TouchableOpacity
    ?activeOpacity
    ?focusedOpacity
    ?tvParallaxProperties
    ?accessible
    ?accessibilityLabel
    ?delayLongPress
    ?delayPressIn
    ?delayPressOut
    ?disabled
    hitSlop=?{Types.toEdgeInsets(hitSlop)}
    ?onLayout
    ?onLongPress
    ?onPress
    ?onPressIn
    ?onPressOut
    pressRetentionOffset=?{Types.toEdgeInsets(pressRetentionOffset)}
    ?style
    ?accessibilityComponentType
    accessibilityTraits=?{
      accessibilityTraits->Belt.Option.map(Belt.List.toArray)
    }
    ?accessibilityRole
    accessibilityStates=?{
      accessibilityStates->Belt.Option.map(Belt.List.toArray)
    }
    ?accessibilityHint
    ?accessibilityIgnoresInvertColors
    ?testID>
    {children->Belt.Option.getWithDefault(React.null)}
  </ReactNative.TouchableOpacity>;
