[{"href": "./index.html", "title": "Home", "contents": "You are nearly done, the last configuration before we get to the fun stuff. In your package.json add to the &quot;scripts&quot; section two scripts:", "rendered": "You are nearly done, the last configuration before we get to the fun stuff. In your <code>package.json</code> add to the <code>&quot;scripts&quot;</code> section two scripts:", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "{\n    \"name\": \"my-awesome-app\",\n    \"reason\": {\n        \"react-jsx\": 2\n    },\n    \"bsc-flags\": [\"-bs-super-errors\"],\n    \"bs-dependencies\": [\"bs-react-native\", \"reason-react\"],\n    \"sources\": [{\n        \"dir\": \"re\"\n    }],\n    \"refmt\": 3\n}", "rendered": "<pre><code>{\n    \"name\": \"my-awesome-app\",\n    \"reason\": {\n        \"react-jsx\": 2\n    },\n    \"bsc-flags\": [\"-bs-super-errors\"],\n    \"bs-dependencies\": [\"bs-react-native\", \"reason-react\"],\n    \"sources\": [{\n        \"dir\": \"re\"\n    }],\n    \"refmt\": 3\n}</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "Create a bsconfig.json with the following content file in your project root", "rendered": "Create a <code>bsconfig.json</code> with the following content file in your project root", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "Create a re folder (there will be your Reason code)", "rendered": "Create a <code>re</code> folder (there will be your Reason code)", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "# substitute yarn with npm if you prefer\nyarn add bs-platform reason-react bs-react-native", "rendered": "<pre><code># substitute yarn with npm if you prefer\nyarn add bs-platform reason-react bs-react-native</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "Install Bucklescript (the Reason -&gt; JS compiler), Reason-React and bs-react-native:", "rendered": "Install <a href=\"https://github.com/bloomberg/bucklescript\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">Bucklescript</a> (the Reason -&gt; JS compiler), <a href=\"https://github.com/reasonml/reason-react\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">Reason-React</a> and <code>bs-react-native</code>:", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "Great you are all set up! Check the source of bs-react-native to find out more about the implemented APIs and Components. If you get stuck just ask on our Discord Server! Happy Hacking!", "rendered": "Great you are all set up! Check the source of <code>bs-react-native</code> to find out more about the implemented APIs and Components. If you get stuck just ask on our <a href=\"https://discord.gg/reasonml\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">Discord Server</a>! Happy Hacking!", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "Now go to a new tab and start your app with react-native run-ios or react-native run-android.", "rendered": "Now go to a new tab and start your app with <code>react-native run-ios</code> or <code>react-native run-android</code>.", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "/* bsconfig.json */\n{\n  /* ... */\n  \"package-specs\": [\n    {\n      \"module\": \"commonjs\"\n    }\n  ]\n}", "rendered": "<pre><code>/* bsconfig.json */\n{\n  /* ... */\n  \"package-specs\": [\n    {\n      \"module\": \"commonjs\"\n    }\n  ]\n}</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "Currently BuckleScript can generate import * as ReactNative from &#39;react-native&#39;, which breaks\ncreate-react-native-app. To get around this you can force BuckleScript to generate CommonJS\nmodules instead of ES Modules using:", "rendered": "Currently BuckleScript can generate <code>import * as ReactNative from &#39;react-native&#39;</code>, which breaks\ncreate-react-native-app. To get around this you can force BuckleScript to generate CommonJS\nmodules instead of ES Modules using:", "breadcrumb": "Home"},
{"href": "./index.html#Native-module-cannot-be-null-with-create-react-native-app", "title": "Native module cannot be null with create-react-native-app", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html#Troubleshooting", "title": "Troubleshooting", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "open BsReactNative;\n\ntype state = {animatedValue: Animated.Value.t};\nlet component = ReasonReact.reducerComponent(\"Example\");\n\nlet make = (_) => {\n  ...component,\n  initialState: () => {animatedValue: Animated.Value.create((-100.))},\n  reducer: (state, _) => {\n    /* Start animation in method */\n    UpdateWithSideEffects(state, (_) => Animated.CompositeAnimation.start(\n      Animated.Timing.animate(\n        ~value=state.animatedValue,\n        ~toValue=`raw(0.),\n        ()\n      ),\n      ()\n    ));\n  },\n  render: ({state}) =>\n    /* Styles with an animated value */\n    <Animated.View\n      style=Style.(style([flexDirection(Column), backgroundColor(String(\"#6698FF\")), top(Animated(state.animatedValue))]))\n    />\n}", "rendered": "<pre><code>open BsReactNative;\n\ntype state = {animatedValue: Animated.Value.t};\nlet component = ReasonReact.reducerComponent(\"Example\");\n\nlet make = (_) => {\n  ...component,\n  initialState: () => {animatedValue: Animated.Value.create((-100.))},\n  reducer: (state, _) => {\n    /* Start animation in method */\n    UpdateWithSideEffects(state, (_) => Animated.CompositeAnimation.start(\n      Animated.Timing.animate(\n        ~value=state.animatedValue,\n        ~toValue=`raw(0.),\n        ()\n      ),\n      ()\n    ));\n  },\n  render: ({state}) =>\n    /* Styles with an animated value */\n    <Animated.View\n      style=Style.(style([flexDirection(Column), backgroundColor(String(\"#6698FF\")), top(Animated(state.animatedValue))]))\n    />\n}</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html#Animations", "title": "Animations", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "open BsReactNative;\nopen Style;\n\nlet styles =\n  StyleSheet.create(\n    ({\"wrapper\": style([flexDirection(Column), backgroundColor(String(\"#6698FF\")), marginTop(Pt(5.))])})\n  );", "rendered": "<pre><code>open BsReactNative;\nopen Style;\n\nlet styles =\n  StyleSheet.create(\n    ({\"wrapper\": style([flexDirection(Column), backgroundColor(String(\"#6698FF\")), marginTop(Pt(5.))])})\n  );</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html#StyleSheet", "title": "StyleSheet", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "open BsReactNative;\nopen Style;\n\nlet render = () => \n  <View style=(\n      style([\n        flexDirection(Column),\n        backgroundColor(String(\"#6698FF\")),\n        marginTop(Pt(5.))\n      ])\n    )\n  />;", "rendered": "<pre><code>open BsReactNative;\nopen Style;\n\nlet render = () => \n  <View style=(\n      style([\n        flexDirection(Column),\n        backgroundColor(String(\"#6698FF\")),\n        marginTop(Pt(5.))\n      ])\n    )\n  />;</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html#Inline-styles", "title": "Inline styles", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "Since we have a proper type system we can make styles typesafe! Therefore styles are a little bit different declared than in JavaScript:", "rendered": "Since we have a proper type system we can make styles <strong>typesafe</strong>! Therefore styles are a little bit different declared than in JavaScript:", "breadcrumb": "Home"},
{"href": "./index.html#Style", "title": "Style", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "There are some components and APIs missing. You can find an overview of the implemented components and APIs here. Contributions of Components and APIs are very welcome! The bindings are targeted to React Native 0.46+.", "rendered": "There are some components and APIs missing. You can find an overview of the implemented components and APIs <a href=\"STATUS.md\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">here</a>. Contributions of Components and APIs are very welcome! The bindings are targeted to React Native <strong>0.46+</strong>.", "breadcrumb": "Home"},
{"href": "./index.html#Disclaimer", "title": "Disclaimer", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "Yes! Check out the Seattle JS Conf App for a real world App written with Reason.", "rendered": "Yes! Check out the <a href=\"https://github.com/FormidableLabs/seattlejsconf-app\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">Seattle JS Conf App</a> for a real world App written with Reason.", "breadcrumb": "Home"},
{"href": "./index.html#Can-I-really-build-my-React-Native-app-with-Reason-", "title": "Can I really build my React Native app with Reason?", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "Here are some more things which will be probably useful for you:", "rendered": "Here are some more things which will be probably useful for you:", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "import { app } from \"./lib/js/re/app.js\";\n\nexport default app;", "rendered": "<pre><code>import { app } from \"./lib/js/re/app.js\";\n\nexport default app;</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "If you are using react-native-scripts, then you will need to modify App.js to be like this", "rendered": "If you are using <code>react-native-scripts</code>, then you will need to modify <code>App.js</code> to be like this", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "Note: Make sure that the first argument to AppRegistry.registerComponent is your correct project name.", "rendered": "<strong>Note:</strong> Make sure that the first argument to <code>AppRegistry.registerComponent</code> is <strong>your</strong> correct project name.", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "import { app } from \"./lib/js/re/app.js\";\nimport React from \"react\";\nimport {\n  AppRegistry\n} from 'react-native';\n\nAppRegistry.registerComponent('MyAwesomeProject', () => app);", "rendered": "<pre><code>import { app } from \"./lib/js/re/app.js\";\nimport React from \"react\";\nimport {\n  AppRegistry\n} from 'react-native';\n\nAppRegistry.registerComponent('MyAwesomeProject', () => app);</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "and start the watcher with yarn run watch if you haven&#39;t done it yet.", "rendered": "and start the watcher with <code>yarn run watch</code> if you haven&#39;t done it yet.", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "open BsReactNative;\n\nlet app = () =>\n  <View style=Style.(style([flex(1.), justifyContent(Center), alignItems(Center)]))>\n    <BsReactNative.Text value=\"Reason is awesome!\" />\n  </View>;", "rendered": "<pre><code>open BsReactNative;\n\nlet app = () =>\n  <View style=Style.(style([flex(1.), justifyContent(Center), alignItems(Center)]))>\n    <BsReactNative.Text value=\"Reason is awesome!\" />\n  </View>;</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "\"scripts\": {\n  ...\n  \"build\": \"bsb -make-world -clean-world\",\n  \"watch\": \"bsb -make-world -clean-world -w\"\n}", "rendered": "<pre><code>\"scripts\": {\n  ...\n  \"build\": \"bsb -make-world -clean-world\",\n  \"watch\": \"bsb -make-world -clean-world -w\"\n}</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "Great that you want to use Reason with React Native! To get everything running are just a couple of steps.\nLet&#39;s assume that you already have a React Native project. Otherwise follow the React Native instructions until you have your app running.", "rendered": "Great that you want to use Reason with React Native! To get everything running are just a couple of steps.\nLet&#39;s assume that you already have a React Native project. Otherwise follow the React Native <a href=\"http://facebook.github.io/react-native/docs/getting-started.html\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">instructions</a> until you have your app running.", "breadcrumb": "Home"},
{"href": "./index.html#Getting-started", "title": "Getting started", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "Build Status", "rendered": "<a href=\"https://travis-ci.org/reasonml-community/bs-react-native\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\"><img src='https://travis-ci.org/reasonml-community/bs-react-native.svg?branch=master' alt='Build Status' /></a>", "breadcrumb": "Home"},
{"href": "./index.html#BuckleScript-bindings-for-React-Native", "title": "BuckleScript bindings for React Native", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./api/UtilsRN.html#value-dictFromArray", "title": "dictFromArray", "contents": "dictFromArray array Js Dict key Js Dict t ", "rendered": "<h4 class='item'>let dictFromArray: array((Js.Dict.key, 'a)) => Js.Dict.t('a)</h4>", "breadcrumb": "UtilsRN"},
{"href": "./api/UtilsRN.html#value-dictFromList", "title": "dictFromList", "contents": "dictFromList list Js Dict key Js Dict t ", "rendered": "<h4 class='item'>let dictFromList: list((Js.Dict.key, 'a)) => Js.Dict.t('a)</h4>", "breadcrumb": "UtilsRN"},
{"href": "./api/UtilsRN.html#value-dictValues", "title": "dictValues", "contents": "dictValues Js Dict t ", "rendered": "<h4 class='item'>let dictValues: Js.Dict.t('a) => 'a</h4>", "breadcrumb": "UtilsRN"},
{"href": "./api/UtilsRN.html#value-dictEntries", "title": "dictEntries", "contents": "dictEntries Js Dict t ", "rendered": "<h4 class='item'>let dictEntries: Js.Dict.t('a) => 'a</h4>", "breadcrumb": "UtilsRN"},
{"href": "./api/UtilsRN.html#value-<<", "title": "<<", "contents": "<<     ", "rendered": "<h4 class='item'>let <<: ('a => 'a, 'a => 'a, 'a) => 'a</h4>", "breadcrumb": "UtilsRN"},
{"href": "./api/UtilsRN.html#value-objAssign2", "title": "objAssign2", "contents": "objAssign2 Js t Js t Js t Js t   ", "rendered": "<h4 class='item'>let objAssign2: (\n  Js.t(&lt; .. &gt;),\n  Js.t(&lt; .. &gt;),\n  Js.t(&lt; .. &gt;)\n) => Js.t(&lt; .. &gt;)</h4>", "breadcrumb": "UtilsRN"},
{"href": "./api/UtilsRN.html#value-optBoolToOptJsBoolean", "title": "optBoolToOptJsBoolean", "contents": "optBoolToOptJsBoolean option option ", "rendered": "<h4 class='item'>let optBoolToOptJsBoolean: option('a) => option('a)</h4>", "breadcrumb": "UtilsRN"},
{"href": "./api/UtilsRN.html#value-option_map", "title": "option_map", "contents": "option_map  option option  ", "rendered": "<h4 class='item'>let option_map: ('a => 'a, option('a)) => option('a)</h4>", "breadcrumb": "UtilsRN"},
{"href": "./api/UtilsRN.html", "title": "UtilsRN", "contents": "@rest", "rendered": "@rest", "breadcrumb": "UtilsRN"},
{"href": "./api/UtilsRN.html", "title": "UtilsRN", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "UtilsRN"},
{"href": "./api/UtilsRN.html#UtilsRN", "title": "UtilsRN", "contents": "", "rendered": "", "breadcrumb": "UtilsRN"},
{"href": "./api/ResponderUtils.html#value-responderHandlers", "title": "responderHandlers", "contents": "responderHandlers option BsReactNative RNEvent NativeEvent t bool  option BsReactNative RNEvent NativeEvent t bool  option BsReactNative RNEvent NativeEvent t unit  option BsReactNative RNEvent NativeEvent t unit  option BsReactNative RNEvent NativeEvent t unit  option BsReactNative RNEvent NativeEvent t unit  option BsReactNative RNEvent NativeEvent t unit  option BsReactNative RNEvent NativeEvent t unit  option BsReactNative RNEvent NativeEvent t bool  option BsReactNative RNEvent NativeEvent t bool  unit BsReactNative Types touchResponderHandlers onMoveShouldSetResponder onMoveShouldSetResponderCapture onResponderGrant onResponderMove onResponderReject onResponderRelease onResponderTerminate onResponderTerminationRequest onStartShouldSetResponder onStartShouldSetResponderCapture ", "rendered": "<h4 class='item'>let responderHandlers: (\n  ~?onMoveShouldSetResponder: option(\n    BsReactNative.RNEvent.NativeEvent.t => bool\n  ),\n  ~?onMoveShouldSetResponderCapture: option(\n    BsReactNative.RNEvent.NativeEvent.t => bool\n  ),\n  ~?onResponderGrant: option(\n    BsReactNative.RNEvent.NativeEvent.t => unit\n  ),\n  ~?onResponderMove: option(\n    BsReactNative.RNEvent.NativeEvent.t => unit\n  ),\n  ~?onResponderReject: option(\n    BsReactNative.RNEvent.NativeEvent.t => unit\n  ),\n  ~?onResponderRelease: option(\n    BsReactNative.RNEvent.NativeEvent.t => unit\n  ),\n  ~?onResponderTerminate: option(\n    BsReactNative.RNEvent.NativeEvent.t => unit\n  ),\n  ~?onResponderTerminationRequest: option(\n    BsReactNative.RNEvent.NativeEvent.t => unit\n  ),\n  ~?onStartShouldSetResponder: option(\n    BsReactNative.RNEvent.NativeEvent.t => bool\n  ),\n  ~?onStartShouldSetResponderCapture: option(\n    BsReactNative.RNEvent.NativeEvent.t => bool\n  ),\n  unit\n) => BsReactNative.Types.touchResponderHandlers</h4>", "breadcrumb": "ResponderUtils"},
{"href": "./api/ResponderUtils.html", "title": "ResponderUtils", "contents": "@rest", "rendered": "@rest", "breadcrumb": "ResponderUtils"},
{"href": "./api/ResponderUtils.html", "title": "ResponderUtils", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ResponderUtils"},
{"href": "./api/ResponderUtils.html#ResponderUtils", "title": "ResponderUtils", "contents": "", "rendered": "", "breadcrumb": "ResponderUtils"},
{"href": "./api/Props.html#value-extendView", "title": "extendView", "contents": "extendView option option option option option option option BsReactNative Types touchResponderHandlers option option option option option option option option option option option list option option Js t Js t accessibilityLabel accessible hitSlop onAccessibilityTap onLayout onMagicTap responderHandlers pointerEvents removeClippedSubviews style testID accessibilityComponentType accessibilityLiveRegion collapsable importantForAccessibility needsOffscreenAlphaCompositing renderToHardwareTextureAndroid accessibilityTraits accessibilityViewIsModal shouldRasterizeIOS ", "rendered": "<h4 class='item'>let extendView: (\n  ~?accessibilityLabel: option('a),\n  ~?accessible: option('a),\n  ~?hitSlop: option('a),\n  ~?onAccessibilityTap: option('a),\n  ~?onLayout: option('a),\n  ~?onMagicTap: option('a),\n  ~?responderHandlers: option(\n    BsReactNative.Types.touchResponderHandlers\n  ),\n  ~?pointerEvents: option(\n    [&lt; `auto | `boxNone | `boxOnly | `none ]\n  ),\n  ~?removeClippedSubviews: option('a),\n  ~?style: option('a),\n  ~?testID: option('a),\n  ~?accessibilityComponentType: option(\n    [&lt; `button | `none | `radiobutton_checked | `radiobutton_unchecked ]\n  ),\n  ~?accessibilityLiveRegion: option(\n    [&lt; `assertive | `none | `polite ]\n  ),\n  ~?collapsable: option('a),\n  ~?importantForAccessibility: option(\n    [&lt; `auto | `no | `noHideDescendants | `yes ]\n  ),\n  ~?needsOffscreenAlphaCompositing: option('a),\n  ~?renderToHardwareTextureAndroid: option('a),\n  ~?accessibilityTraits: option(\n    list(\n      [&lt; `adjustable\n | `allowsDirectInteraction\n | `button\n | `disabled\n | `frequentUpdates\n | `header\n | `image\n | `key\n | `link\n | `none\n | `pageTurn\n | `plays\n | `search\n | `selected\n | `startsMedia\n | `summary\n | `text ]\n    )\n  ),\n  ~?accessibilityViewIsModal: option('a),\n  ~?shouldRasterizeIOS: option('a),\n  Js.t(&lt; .. &gt;)\n) => Js.t(&lt; .. &gt;)</h4>", "breadcrumb": "Props"},
{"href": "./api/Props.html#value-serialize", "title": "serialize", "contents": "serialize option BsReactNative Types touchResponderHandlers Js t ", "rendered": "<h4 class='item'>let serialize: option(\n  BsReactNative.Types.touchResponderHandlers\n) => Js.t(\n  &lt; onMoveShouldSetResponder : (BsReactNative.RNEvent.NativeEvent.t -&gt; bool)\n                             Js.Undefined.t;\n  onMoveShouldSetResponderCapture : (BsReactNative.RNEvent.NativeEvent.t -&gt;\n                                     bool)\n                                    Js.Undefined.t;\n  onResponderGrant : (BsReactNative.RNEvent.NativeEvent.t -&gt; unit)\n                     Js.Undefined.t;\n  onResponderMove : (BsReactNative.RNEvent.NativeEvent.t -&gt; unit)\n                    Js.Undefined.t;\n  onResponderReject : (BsReactNative.RNEvent.NativeEvent.t -&gt; unit)\n                      Js.Undefined.t;\n  onResponderRelease : (BsReactNative.RNEvent.NativeEvent.t -&gt; unit)\n                       Js.Undefined.t;\n  onResponderTerminate : (BsReactNative.RNEvent.NativeEvent.t -&gt; unit)\n                         Js.Undefined.t;\n  onResponderTerminationRequest : (BsReactNative.RNEvent.NativeEvent.t -&gt;\n                                   unit)\n                                  Js.Undefined.t;\n  onStartShouldSetResponder : (BsReactNative.RNEvent.NativeEvent.t -&gt; bool)\n                              Js.Undefined.t;\n  onStartShouldSetResponderCapture : (BsReactNative.RNEvent.NativeEvent.t -&gt;\n                                      bool)\n                                     Js.Undefined.t &gt;\n)</h4>", "breadcrumb": "Props"},
{"href": "./api/Props.html", "title": "Props", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Props"},
{"href": "./api/Props.html", "title": "Props", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Props"},
{"href": "./api/Props.html#Props", "title": "Props", "contents": "", "rendered": "", "breadcrumb": "Props"},
{"href": "./api/Encode.html#value-pct", "title": "pct", "contents": "pct float Js Json t ", "rendered": "<h4 class='item'>let pct: float => Js.Json.t</h4>", "breadcrumb": "Encode"},
{"href": "./api/Encode.html#value-interpolatedValue", "title": "interpolatedValue", "contents": "interpolatedValue BsReactNative AnimatedRe Interpolation t Js Json t ", "rendered": "<h4 class='item'>let interpolatedValue: BsReactNative.AnimatedRe.Interpolation.t => Js.Json.t</h4>", "breadcrumb": "Encode"},
{"href": "./api/Encode.html#value-animatedValue", "title": "animatedValue", "contents": "animatedValue BsReactNative AnimatedRe Value t Js Json t ", "rendered": "<h4 class='item'>let animatedValue: BsReactNative.AnimatedRe.Value.t => Js.Json.t</h4>", "breadcrumb": "Encode"},
{"href": "./api/Encode.html#value-array", "title": "array", "contents": "array array Js Json t Js Json t ", "rendered": "<h4 class='item'>let array: array(Js.Json.t) => Js.Json.t</h4>", "breadcrumb": "Encode"},
{"href": "./api/Encode.html#value-object_", "title": "object_", "contents": " object_ dict makes a JSON objet of the dict", "rendered": " [object_ dict] makes a JSON objet of the [Js.Dict.t] [dict]", "breadcrumb": "Encode"},
{"href": "./api/Encode.html#value-object_", "title": "object_", "contents": "object_ Js_dict t Js Json t Js Json t ", "rendered": "<h4 class='item'>let object_: Js_dict.t(Js.Json.t) => Js.Json.t</h4>", "breadcrumb": "Encode"},
{"href": "./api/Encode.html#value-boolean", "title": "boolean", "contents": " boolean b makes a JSON boolean of the b", "rendered": " [boolean b] makes a JSON boolean of the [bool] [b]", "breadcrumb": "Encode"},
{"href": "./api/Encode.html#value-boolean", "title": "boolean", "contents": "boolean bool Js Json t ", "rendered": "<h4 class='item'>let boolean: bool => Js.Json.t</h4>", "breadcrumb": "Encode"},
{"href": "./api/Encode.html#value-int", "title": "int", "contents": " int n makes a JSON number of the n", "rendered": " [int n] makes a JSON number of the [int] [n]", "breadcrumb": "Encode"},
{"href": "./api/Encode.html#value-int", "title": "int", "contents": "int int Js Json t ", "rendered": "<h4 class='item'>let int: int => Js.Json.t</h4>", "breadcrumb": "Encode"},
{"href": "./api/Encode.html#value-float", "title": "float", "contents": " float n makes a JSON number of the n", "rendered": " [float n] makes a JSON number of the [float] [n]", "breadcrumb": "Encode"},
{"href": "./api/Encode.html#value-float", "title": "float", "contents": "float float Js Json t ", "rendered": "<h4 class='item'>let float: float => Js.Json.t</h4>", "breadcrumb": "Encode"},
{"href": "./api/Encode.html#value-string", "title": "string", "contents": " string s makes a JSON string of the s", "rendered": " [string s] makes a JSON string of the [string] [s]", "breadcrumb": "Encode"},
{"href": "./api/Encode.html#value-string", "title": "string", "contents": "string string Js Json t ", "rendered": "<h4 class='item'>let string: string => Js.Json.t</h4>", "breadcrumb": "Encode"},
{"href": "./api/Encode.html", "title": "Encode", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Encode"},
{"href": "./api/Encode.html", "title": "Encode", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Encode"},
{"href": "./api/Encode.html#Encode", "title": "Encode", "contents": "", "rendered": "", "breadcrumb": "Encode"},
{"href": "./api/WebView.html#value-make", "title": "make", "contents": "make option source option BsReactNative Style t option unit ReasonReact reactElement  option unit ReasonReact reactElement  option Js t unit  option Js t unit  option Js t unit  option Js t unit  option bool option contentInsets option ReasonReact reactElement option bool option BsReactNative Types insets option unit unit  option BsReactNative RNEvent NativeLayoutEvent t unit  option unit unit  option BsReactNative Types touchResponderHandlers option option bool option string option option option bool option option bool option bool option list option bool option bool option string unit  option string option bool option BsReactNative RNEvent NativeEvent t unit  option Js t unit  option bool option bool option bool option bool option list option bool option string option bool option bool option list option list option iOSLoadRequestEvent bool  option bool array ReasonReact reactElement ReasonReact component ReasonReact stateless ReasonReact noRetainedProps unit source style renderError renderLoading onError onLoad onLoadEnd onLoadStart automaticallyAdjustContentInsets contentInsets accessibilityLabel accessible hitSlop onAccessibilityTap onLayout onMagicTap responderHandlers pointerEvents removeClippedSubviews testID accessibilityComponentType accessibilityLiveRegion collapsable importantForAccessibility needsOffscreenAlphaCompositing renderToHardwareTextureAndroid accessibilityTraits accessibilityViewIsModal shouldRasterizeIOS injectJavaScript injectedJavaScript mediaPlaybackRequiresUserAction onMessage onNavigationStateChange scalesPageToFit startInLoadingState domStorageEnabled javaScriptEnabled mixedContentMode thirdPartyCookiesEnabled userAgent allowsInlineMediaPlayback bounces dataDetectorTypes decelerationRate onShouldStartLoadWithRequest scrollEnabled ", "rendered": "<h4 class='item'>let make: (\n  ~?source: option(<a href=\"./api/WebView.html#type-source\">source</a>),\n  ~?style: option(BsReactNative.Style.t),\n  ~?renderError: option(unit => ReasonReact.reactElement),\n  ~?renderLoading: option(unit => ReasonReact.reactElement),\n  ~?onError: option(\n    Js.t(\n      &lt; canGoBack : bool option; canGoForward : bool option; loading : bool option;\n  title : string option; url : string option &gt;\n    ) => unit\n  ),\n  ~?onLoad: option(\n    Js.t(\n      &lt; canGoBack : bool option; canGoForward : bool option; loading : bool option;\n  title : string option; url : string option &gt;\n    ) => unit\n  ),\n  ~?onLoadEnd: option(\n    Js.t(\n      &lt; canGoBack : bool option; canGoForward : bool option; loading : bool option;\n  title : string option; url : string option &gt;\n    ) => unit\n  ),\n  ~?onLoadStart: option(\n    Js.t(\n      &lt; canGoBack : bool option; canGoForward : bool option; loading : bool option;\n  title : string option; url : string option &gt;\n    ) => unit\n  ),\n  ~?automaticallyAdjustContentInsets: option(bool),\n  ~?contentInsets: option(<a href=\"./api/WebView.html#type-contentInsets\">contentInsets</a>),\n  ~?accessibilityLabel: option(ReasonReact.reactElement),\n  ~?accessible: option(bool),\n  ~?hitSlop: option(BsReactNative.Types.insets),\n  ~?onAccessibilityTap: option(unit => unit),\n  ~?onLayout: option(\n    BsReactNative.RNEvent.NativeLayoutEvent.t => unit\n  ),\n  ~?onMagicTap: option(unit => unit),\n  ~?responderHandlers: option(\n    BsReactNative.Types.touchResponderHandlers\n  ),\n  ~?pointerEvents: option(\n    [ `none | `boxOnly | `auto | `boxNone ]\n  ),\n  ~?removeClippedSubviews: option(bool),\n  ~?testID: option(string),\n  ~?accessibilityComponentType: option(\n    [ `button | `none | `radiobutton_checked | `radiobutton_unchecked ]\n  ),\n  ~?accessibilityLiveRegion: option(\n    [ `none | `polite | `assertive ]\n  ),\n  ~?collapsable: option(bool),\n  ~?importantForAccessibility: option(\n    [ `no | `yes | `noHideDescendants | `auto ]\n  ),\n  ~?needsOffscreenAlphaCompositing: option(bool),\n  ~?renderToHardwareTextureAndroid: option(bool),\n  ~?accessibilityTraits: option(\n    list(\n      [ `frequentUpdates\n| `adjustable\n| `image\n| `button\n| `header\n| `none\n| `plays\n| `text\n| `startsMedia\n| `disabled\n| `link\n| `pageTurn\n| `selected\n| `allowsDirectInteraction\n| `summary\n| `search\n| `key ]\n    )\n  ),\n  ~?accessibilityViewIsModal: option(bool),\n  ~?shouldRasterizeIOS: option(bool),\n  ~?injectJavaScript: option(string => unit),\n  ~?injectedJavaScript: option(string),\n  ~?mediaPlaybackRequiresUserAction: option(bool),\n  ~?onMessage: option(\n    BsReactNative.RNEvent.NativeEvent.t => unit\n  ),\n  ~?onNavigationStateChange: option(\n    Js.t(\n      &lt; canGoBack : bool option; canGoForward : bool option; loading : bool option;\n  title : string option; url : string option &gt;\n    ) => unit\n  ),\n  ~?scalesPageToFit: option(bool),\n  ~?startInLoadingState: option(bool),\n  ~?domStorageEnabled: option(bool),\n  ~?javaScriptEnabled: option(bool),\n  ~?mixedContentMode: option(\n    list([ `compatibility | `never | `always ])\n  ),\n  ~?thirdPartyCookiesEnabled: option(bool),\n  ~?userAgent: option(string),\n  ~?allowsInlineMediaPlayback: option(bool),\n  ~?bounces: option(bool),\n  ~?dataDetectorTypes: option(\n    list(\n      [ `none | `all | `link | `calendarEvent | `address | `phoneNumber ]\n    )\n  ),\n  ~?decelerationRate: option(\n    list([ `value of float | `normal | `fast ])\n  ),\n  ~?onShouldStartLoadWithRequest: option(\n    <a href=\"./api/WebView.html#type-iOSLoadRequestEvent\">iOSLoadRequestEvent</a> => bool\n  ),\n  ~?scrollEnabled: option(bool),\n  array(ReasonReact.reactElement)\n) => ReasonReact.component(\n  ReasonReact.stateless,\n  ReasonReact.noRetainedProps,\n  unit\n)</h4>", "breadcrumb": "WebView"},
{"href": "./api/WebView.html#value-stopLoading", "title": "stopLoading", "contents": "stopLoading ReasonReact reactRef unit ", "rendered": "<h4 class='item'>let stopLoading: ReasonReact.reactRef => unit</h4>", "breadcrumb": "WebView"},
{"href": "./api/WebView.html#value-reload", "title": "reload", "contents": "reload ReasonReact reactRef unit ", "rendered": "<h4 class='item'>let reload: ReasonReact.reactRef => unit</h4>", "breadcrumb": "WebView"},
{"href": "./api/WebView.html#value-goBack", "title": "goBack", "contents": "goBack ReasonReact reactRef unit ", "rendered": "<h4 class='item'>let goBack: ReasonReact.reactRef => unit</h4>", "breadcrumb": "WebView"},
{"href": "./api/WebView.html#value-goForward", "title": "goForward", "contents": "goForward ReasonReact reactRef unit ", "rendered": "<h4 class='item'>let goForward: ReasonReact.reactRef => unit</h4>", "breadcrumb": "WebView"},
{"href": "./api/WebView.html#value-contentInsets", "title": "contentInsets", "contents": "contentInsets option int option int option int option int unit contentInsets top left bottom right ", "rendered": "<h4 class='item'>let contentInsets: (\n  ~?top: option(int),\n  ~?left: option(int),\n  ~?bottom: option(int),\n  ~?right: option(int),\n  unit\n) => <a href=\"./api/WebView.html#type-contentInsets\">contentInsets</a></h4>", "breadcrumb": "WebView"},
{"href": "./api/WebView.html#type-contentInsets", "title": "contentInsets", "contents": "contentInsets ", "rendered": "<h4 class='item'>type contentInsets</h4>", "breadcrumb": "WebView"},
{"href": "./api/WebView.html#type-iOSLoadRequestEvent", "title": "iOSLoadRequestEvent", "contents": "iOSLoadRequestEvent Js t", "rendered": "<h4 class='item'>type iOSLoadRequestEvent = Js.t(\n  &lt; canGoBack : bool; canGoForward : bool; loading : bool;\n  lockIdentifier : int; navigationType : string; target : int;\n  title : string; url : string &gt;\n)</h4>", "breadcrumb": "WebView"},
{"href": "./api/WebView.html#value-source", "title": "source", "contents": "source option string option string option Js t option string unit source uri method headers body ", "rendered": "<h4 class='item'>let source: (\n  ~?uri: option(string),\n  ~?method: option(string),\n  ~?headers: option(Js.t('a)),\n  ~?body: option(string),\n  unit\n) => <a href=\"./api/WebView.html#type-source\">source</a></h4>", "breadcrumb": "WebView"},
{"href": "./api/WebView.html#value-sourceHtml", "title": "sourceHtml", "contents": "sourceHtml option string option string unit source html baseUrl ", "rendered": "<h4 class='item'>let sourceHtml: (\n  ~?html: option(string),\n  ~?baseUrl: option(string),\n  unit\n) => <a href=\"./api/WebView.html#type-source\">source</a></h4>", "breadcrumb": "WebView"},
{"href": "./api/WebView.html#value-sourceUri", "title": "sourceUri", "contents": "sourceUri option string option string option Js t option string unit source uri method headers body ", "rendered": "<h4 class='item'>let sourceUri: (\n  ~?uri: option(string),\n  ~?method: option(string),\n  ~?headers: option(Js.t('a)),\n  ~?body: option(string),\n  unit\n) => <a href=\"./api/WebView.html#type-source\">source</a></h4>", "breadcrumb": "WebView"},
{"href": "./api/WebView.html#type-source", "title": "source", "contents": "source ", "rendered": "<h4 class='item'>type source</h4>", "breadcrumb": "WebView"},
{"href": "./api/WebView.html", "title": "WebView", "contents": "@rest", "rendered": "@rest", "breadcrumb": "WebView"},
{"href": "./api/WebView.html", "title": "WebView", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "WebView"},
{"href": "./api/WebView.html#WebView", "title": "WebView", "contents": "", "rendered": "", "breadcrumb": "WebView"},
{"href": "./api/View.html#value-make", "title": "make", "contents": "make option string option bool option BsReactNative Types insets option unit unit  option BsReactNative RNEvent NativeLayoutEvent t unit  option unit unit  option BsReactNative Types touchResponderHandlers option option bool option BsReactNative Style t option string option option option bool option option bool option bool option list option bool option bool array ReasonReact reactElement ReasonReact component ReasonReact stateless ReasonReact noRetainedProps unit accessibilityLabel accessible hitSlop onAccessibilityTap onLayout onMagicTap responderHandlers pointerEvents removeClippedSubviews style testID accessibilityComponentType accessibilityLiveRegion collapsable importantForAccessibility needsOffscreenAlphaCompositing renderToHardwareTextureAndroid accessibilityTraits accessibilityViewIsModal shouldRasterizeIOS ", "rendered": "<h4 class='item'>let make: (\n  ~?accessibilityLabel: option(string),\n  ~?accessible: option(bool),\n  ~?hitSlop: option(BsReactNative.Types.insets),\n  ~?onAccessibilityTap: option(unit => unit),\n  ~?onLayout: option(\n    BsReactNative.RNEvent.NativeLayoutEvent.t => unit\n  ),\n  ~?onMagicTap: option(unit => unit),\n  ~?responderHandlers: option(\n    BsReactNative.Types.touchResponderHandlers\n  ),\n  ~?pointerEvents: option(\n    [ `none | `boxOnly | `auto | `boxNone ]\n  ),\n  ~?removeClippedSubviews: option(bool),\n  ~?style: option(BsReactNative.Style.t),\n  ~?testID: option(string),\n  ~?accessibilityComponentType: option(\n    [ `button | `none | `radiobutton_checked | `radiobutton_unchecked ]\n  ),\n  ~?accessibilityLiveRegion: option(\n    [ `none | `polite | `assertive ]\n  ),\n  ~?collapsable: option(bool),\n  ~?importantForAccessibility: option(\n    [ `no | `yes | `noHideDescendants | `auto ]\n  ),\n  ~?needsOffscreenAlphaCompositing: option(bool),\n  ~?renderToHardwareTextureAndroid: option(bool),\n  ~?accessibilityTraits: option(\n    list(\n      [ `frequentUpdates\n| `adjustable\n| `image\n| `button\n| `none\n| `header\n| `plays\n| `text\n| `startsMedia\n| `link\n| `disabled\n| `pageTurn\n| `selected\n| `summary\n| `search\n| `allowsDirectInteraction\n| `key ]\n    )\n  ),\n  ~?accessibilityViewIsModal: option(bool),\n  ~?shouldRasterizeIOS: option(bool),\n  array(ReasonReact.reactElement)\n) => ReasonReact.component(\n  ReasonReact.stateless,\n  ReasonReact.noRetainedProps,\n  unit\n)</h4>", "breadcrumb": "View"},
{"href": "./api/View.html", "title": "View", "contents": "@rest", "rendered": "@rest", "breadcrumb": "View"},
{"href": "./api/View.html", "title": "View", "contents": "@rest", "rendered": "@rest", "breadcrumb": "View"},
{"href": "./api/View.html", "title": "View", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "View"},
{"href": "./api/View.html#View", "title": "View", "contents": "", "rendered": "", "breadcrumb": "View"},
{"href": "./api/TouchableWithoutFeedback.html#value-make", "title": "make", "contents": "make option bool option string option option list option int option int option int option bool option BsReactNative Types insets option BsReactNative RNEvent NativeLayoutEvent t unit  option unit unit  option unit unit  option unit unit  option unit unit  option BsReactNative Types insets option BsReactNative Style t array ReasonReact reactElement ReasonReact component ReasonReact stateless ReasonReact noRetainedProps unit accessible accessibilityLabel accessibilityComponentType accessibilityTraits delayLongPress delayPressIn delayPressOut disabled hitSlop onLayout onLongPress onPress onPressIn onPressOut pressRetentionOffset style ", "rendered": "<h4 class='item'>let make: (\n  ~?accessible: option(bool),\n  ~?accessibilityLabel: option(string),\n  ~?accessibilityComponentType: option(\n    [ `button | `none | `radiobutton_checked | `radiobutton_unchecked ]\n  ),\n  ~?accessibilityTraits: option(\n    list(\n      [ `frequentUpdates\n| `adjustable\n| `image\n| `button\n| `header\n| `none\n| `plays\n| `text\n| `startsMedia\n| `disabled\n| `link\n| `pageTurn\n| `selected\n| `allowsDirectInteraction\n| `summary\n| `search\n| `key ]\n    )\n  ),\n  ~?delayLongPress: option(int),\n  ~?delayPressIn: option(int),\n  ~?delayPressOut: option(int),\n  ~?disabled: option(bool),\n  ~?hitSlop: option(BsReactNative.Types.insets),\n  ~?onLayout: option(\n    BsReactNative.RNEvent.NativeLayoutEvent.t => unit\n  ),\n  ~?onLongPress: option(unit => unit),\n  ~?onPress: option(unit => unit),\n  ~?onPressIn: option(unit => unit),\n  ~?onPressOut: option(unit => unit),\n  ~?pressRetentionOffset: option(\n    BsReactNative.Types.insets\n  ),\n  ~?style: option(BsReactNative.Style.t),\n  array(ReasonReact.reactElement)\n) => ReasonReact.component(\n  ReasonReact.stateless,\n  ReasonReact.noRetainedProps,\n  unit\n)</h4>", "breadcrumb": "TouchableWithoutFeedback"},
{"href": "./api/TouchableWithoutFeedback.html", "title": "TouchableWithoutFeedback", "contents": "@rest", "rendered": "@rest", "breadcrumb": "TouchableWithoutFeedback"},
{"href": "./api/TouchableWithoutFeedback.html", "title": "TouchableWithoutFeedback", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "TouchableWithoutFeedback"},
{"href": "./api/TouchableWithoutFeedback.html#TouchableWithoutFeedback", "title": "TouchableWithoutFeedback", "contents": "", "rendered": "", "breadcrumb": "TouchableWithoutFeedback"},
{"href": "./api/TouchableOpacity.html#value-make", "title": "make", "contents": "make option bool option string option option list option int option int option int option bool option BsReactNative Types insets option BsReactNative Style t option BsReactNative RNEvent NativeLayoutEvent t unit  option unit unit  option unit unit  option unit unit  option unit unit  option BsReactNative Types insets option float option float option Js t array ReasonReact reactElement ReasonReact component ReasonReact stateless ReasonReact noRetainedProps unit accessible accessibilityLabel accessibilityComponentType accessibilityTraits delayLongPress delayPressIn delayPressOut disabled hitSlop style onLayout onPress onLongPress onPressIn onPressOut pressRetentionOffset activeOpacity focusedOpacity tvParallaxProperties ", "rendered": "<h4 class='item'>let make: (\n  ~?accessible: option(bool),\n  ~?accessibilityLabel: option(string),\n  ~?accessibilityComponentType: option(\n    [ `button | `none | `radiobutton_checked | `radiobutton_unchecked ]\n  ),\n  ~?accessibilityTraits: option(\n    list(\n      [ `frequentUpdates\n| `adjustable\n| `image\n| `button\n| `header\n| `none\n| `plays\n| `text\n| `startsMedia\n| `disabled\n| `link\n| `pageTurn\n| `selected\n| `allowsDirectInteraction\n| `summary\n| `search\n| `key ]\n    )\n  ),\n  ~?delayLongPress: option(int),\n  ~?delayPressIn: option(int),\n  ~?delayPressOut: option(int),\n  ~?disabled: option(bool),\n  ~?hitSlop: option(BsReactNative.Types.insets),\n  ~?style: option(BsReactNative.Style.t),\n  ~?onLayout: option(\n    BsReactNative.RNEvent.NativeLayoutEvent.t => unit\n  ),\n  ~?onPress: option(unit => unit),\n  ~?onLongPress: option(unit => unit),\n  ~?onPressIn: option(unit => unit),\n  ~?onPressOut: option(unit => unit),\n  ~?pressRetentionOffset: option(\n    BsReactNative.Types.insets\n  ),\n  ~?activeOpacity: option(float),\n  ~?focusedOpacity: option(float),\n  ~?tvParallaxProperties: option(Js.t(&lt;  &gt;)),\n  array(ReasonReact.reactElement)\n) => ReasonReact.component(\n  ReasonReact.stateless,\n  ReasonReact.noRetainedProps,\n  unit\n)</h4>", "breadcrumb": "TouchableOpacity"},
{"href": "./api/TouchableOpacity.html#value-setOpacityTo", "title": "setOpacityTo", "contents": "setOpacityTo ReasonReact reactRef float int unit   ", "rendered": "<h4 class='item'>let setOpacityTo: (ReasonReact.reactRef, float, int) => unit</h4>", "breadcrumb": "TouchableOpacity"},
{"href": "./api/TouchableOpacity.html", "title": "TouchableOpacity", "contents": "@rest", "rendered": "@rest", "breadcrumb": "TouchableOpacity"},
{"href": "./api/TouchableOpacity.html", "title": "TouchableOpacity", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "TouchableOpacity"},
{"href": "./api/TouchableOpacity.html#TouchableOpacity", "title": "TouchableOpacity", "contents": "", "rendered": "", "breadcrumb": "TouchableOpacity"},
{"href": "./api/TouchableHighlight.html#value-make", "title": "make", "contents": "make option bool option string option option list option int option int option int option bool option BsReactNative Types insets option BsReactNative RNEvent NativeLayoutEvent t unit  option unit unit  option unit unit  option unit unit  option BsReactNative Types insets option float option unit unit  option unit unit  option BsReactNative Style t option string option bool option Js t array ReasonReact reactElement ReasonReact component ReasonReact stateless ReasonReact noRetainedProps unit accessible accessibilityLabel accessibilityComponentType accessibilityTraits delayLongPress delayPressIn delayPressOut disabled hitSlop onLayout onPress onPressIn onPressOut pressRetentionOffset activeOpacity onHideUnderlay onShowUnderlay style underlayColor hasTVPreferredFocus tvParallaxProperties ", "rendered": "<h4 class='item'>let make: (\n  ~?accessible: option(bool),\n  ~?accessibilityLabel: option(string),\n  ~?accessibilityComponentType: option(\n    [ `button | `none | `radiobutton_checked | `radiobutton_unchecked ]\n  ),\n  ~?accessibilityTraits: option(\n    list(\n      [ `frequentUpdates\n| `adjustable\n| `image\n| `button\n| `header\n| `none\n| `plays\n| `text\n| `startsMedia\n| `disabled\n| `link\n| `pageTurn\n| `selected\n| `allowsDirectInteraction\n| `summary\n| `search\n| `key ]\n    )\n  ),\n  ~?delayLongPress: option(int),\n  ~?delayPressIn: option(int),\n  ~?delayPressOut: option(int),\n  ~?disabled: option(bool),\n  ~?hitSlop: option(BsReactNative.Types.insets),\n  ~?onLayout: option(\n    BsReactNative.RNEvent.NativeLayoutEvent.t => unit\n  ),\n  ~?onPress: option(unit => unit),\n  ~?onPressIn: option(unit => unit),\n  ~?onPressOut: option(unit => unit),\n  ~?pressRetentionOffset: option(\n    BsReactNative.Types.insets\n  ),\n  ~?activeOpacity: option(float),\n  ~?onHideUnderlay: option(unit => unit),\n  ~?onShowUnderlay: option(unit => unit),\n  ~?style: option(BsReactNative.Style.t),\n  ~?underlayColor: option(string),\n  ~?hasTVPreferredFocus: option(bool),\n  ~?tvParallaxProperties: option(Js.t(&lt;  &gt;)),\n  array(ReasonReact.reactElement)\n) => ReasonReact.component(\n  ReasonReact.stateless,\n  ReasonReact.noRetainedProps,\n  unit\n)</h4>", "breadcrumb": "TouchableHighlight"},
{"href": "./api/TouchableHighlight.html", "title": "TouchableHighlight", "contents": "@rest", "rendered": "@rest", "breadcrumb": "TouchableHighlight"},
{"href": "./api/TouchableHighlight.html", "title": "TouchableHighlight", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "TouchableHighlight"},
{"href": "./api/TouchableHighlight.html#TouchableHighlight", "title": "TouchableHighlight", "contents": "", "rendered": "", "breadcrumb": "TouchableHighlight"},
{"href": "./api/TextInput.html#value-make", "title": "make", "contents": "make option ReasonReact reactElement option bool option Js t option unit unit  option BsReactNative RNEvent NativeLayoutEvent t unit  option unit unit  option BsReactNative Types touchResponderHandlers option option bool option BsReactNative Style t option string option option option bool option option bool option bool option list option bool option bool option option bool option bool option bool option bool option string option bool option option int option bool option unit unit  option unit unit  option string unit  option Js t unit  option unit unit  option unit unit  option Js t unit  option Js t unit  option unit unit  option string option string option option bool option bool option Js t option string option string option bool option string option int option int option string option option string option option bool option array option bool option option Js t unit  option option bool array ReasonReact reactElement ReasonReact component ReasonReact stateless ReasonReact noRetainedProps unit accessibilityLabel accessible hitSlop onAccessibilityTap onLayout onMagicTap responderHandlers pointerEvents removeClippedSubviews style testID accessibilityComponentType accessibilityLiveRegion collapsable importantForAccessibility needsOffscreenAlphaCompositing renderToHardwareTextureAndroid accessibilityTraits accessibilityViewIsModal shouldRasterizeIOS autoCapitalize autoCorrect autoFocus blurOnSubmit caretHidden defaultValue editable keyboardType maxLength multiline onBlur onChange onChangeText onContentSizeChange onEndEditing onFocus onScroll onSelectionChange onSubmitEditing placeholder placeholderTextColor returnKeyType secureTextEntry selectTextOnFocus selection selectionColor value disableFullscreenUI inlineImageLeft inlineImagePadding numberOfLines returnKeyLabel textBreakStrategy underlineColorAndroid clearButtonMode clearTextOnFocus dataDetectorTypes enablesReturnKeyAutomatically keyboardAppearance onKeyPress selectionState spellCheck ", "rendered": "<h4 class='item'>let make: (\n  ~?accessibilityLabel: option(ReasonReact.reactElement),\n  ~?accessible: option(bool),\n  ~?hitSlop: option(\n    Js.t(\n      &lt; bottom : int; left : int; right : int; top : int &gt;\n    )\n  ),\n  ~?onAccessibilityTap: option(unit => unit),\n  ~?onLayout: option(\n    BsReactNative.RNEvent.NativeLayoutEvent.t => unit\n  ),\n  ~?onMagicTap: option(unit => unit),\n  ~?responderHandlers: option(\n    BsReactNative.Types.touchResponderHandlers\n  ),\n  ~?pointerEvents: option(\n    [ `none | `boxOnly | `auto | `boxNone ]\n  ),\n  ~?removeClippedSubviews: option(bool),\n  ~?style: option(BsReactNative.Style.t),\n  ~?testID: option(string),\n  ~?accessibilityComponentType: option(\n    [ `button | `none | `radiobutton_checked | `radiobutton_unchecked ]\n  ),\n  ~?accessibilityLiveRegion: option(\n    [ `none | `polite | `assertive ]\n  ),\n  ~?collapsable: option(bool),\n  ~?importantForAccessibility: option(\n    [ `no | `yes | `noHideDescendants | `auto ]\n  ),\n  ~?needsOffscreenAlphaCompositing: option(bool),\n  ~?renderToHardwareTextureAndroid: option(bool),\n  ~?accessibilityTraits: option(\n    list(\n      [ `frequentUpdates\n| `adjustable\n| `image\n| `button\n| `header\n| `none\n| `plays\n| `text\n| `startsMedia\n| `disabled\n| `link\n| `pageTurn\n| `selected\n| `allowsDirectInteraction\n| `summary\n| `search\n| `key ]\n    )\n  ),\n  ~?accessibilityViewIsModal: option(bool),\n  ~?shouldRasterizeIOS: option(bool),\n  ~?autoCapitalize: option(\n    [&lt; `sentences | `none | `words | `characters ]\n  ),\n  ~?autoCorrect: option(bool),\n  ~?autoFocus: option(bool),\n  ~?blurOnSubmit: option(bool),\n  ~?caretHidden: option(bool),\n  ~?defaultValue: option(string),\n  ~?editable: option(bool),\n  ~?keyboardType: option(\n    [ `numeric\n| `asciiCapable\n| `namePhonePad\n| `emailAddress\n| `default\n| `webSearch\n| `numbersAndPunctuation\n| `decimalPad\n| `twitter\n| `url\n| `phonePad\n| `numberPad ]\n  ),\n  ~?maxLength: option(int),\n  ~?multiline: option(bool),\n  ~?onBlur: option(unit => unit),\n  ~?onChange: option(unit => unit),\n  ~?onChangeText: option(string => unit),\n  ~?onContentSizeChange: option(\n    Js.t(\n      &lt; nativeEvent : &lt; contentSize : &lt; height : float; width : float &gt; Js.t &gt; Js.t &gt;\n    ) => unit\n  ),\n  ~?onEndEditing: option(unit => unit),\n  ~?onFocus: option(unit => unit),\n  ~?onScroll: option(\n    Js.t(\n      &lt; nativeEvent : &lt; contentOffset : &lt; x : float; y : float &gt; Js.t &gt; Js.t &gt;\n    ) => unit\n  ),\n  ~?onSelectionChange: option(\n    Js.t(\n      &lt; nativeEvent : &lt; selection : &lt; _end : int; start : int &gt; Js.t &gt; Js.t &gt;\n    ) => unit\n  ),\n  ~?onSubmitEditing: option(unit => unit),\n  ~?placeholder: option(string),\n  ~?placeholderTextColor: option(string),\n  ~?returnKeyType: option(\n    [ `go\n| `previous\n| `none\n| `done_\n| `send\n| `default\n| `emergencyCall\n| `next\n| `route\n| `search\n| `google\n| `yahoo\n| `join ]\n  ),\n  ~?secureTextEntry: option(bool),\n  ~?selectTextOnFocus: option(bool),\n  ~?selection: option(\n    Js.t(&lt; _end : int; start : int &gt;)\n  ),\n  ~?selectionColor: option(string),\n  ~?value: option(string),\n  ~?disableFullscreenUI: option(bool),\n  ~?inlineImageLeft: option(string),\n  ~?inlineImagePadding: option(int),\n  ~?numberOfLines: option(int),\n  ~?returnKeyLabel: option(string),\n  ~?textBreakStrategy: option(\n    [ `highQuality | `balanced | `simple ]\n  ),\n  ~?underlineColorAndroid: option(string),\n  ~?clearButtonMode: option(\n    [ `whileEditing | `never | `always | `unlessEditing ]\n  ),\n  ~?clearTextOnFocus: option(bool),\n  ~?dataDetectorTypes: option(\n    array(\n      [ `none | `all | `link | `calendarEvent | `phoneNumber ]\n    )\n  ),\n  ~?enablesReturnKeyAutomatically: option(bool),\n  ~?keyboardAppearance: option(\n    [ `default | `light | `dark ]\n  ),\n  ~?onKeyPress: option(\n    Js.t(\n      &lt; nativeEvent : &lt; key : string &gt; Js.t &gt;\n    ) => unit\n  ),\n  ~?selectionState: option('documentSelectionState),\n  ~?spellCheck: option(bool),\n  array(ReasonReact.reactElement)\n) => ReasonReact.component(\n  ReasonReact.stateless,\n  ReasonReact.noRetainedProps,\n  unit\n)</h4>", "breadcrumb": "TextInput"},
{"href": "./api/TextInput.html#value-clear", "title": "clear", "contents": "clear ReasonReact reactRef unit ", "rendered": "<h4 class='item'>let clear: ReasonReact.reactRef => unit</h4>", "breadcrumb": "TextInput"},
{"href": "./api/TextInput.html#value-isFocused", "title": "isFocused", "contents": "isFocused ReasonReact reactRef bool ", "rendered": "<h4 class='item'>let isFocused: ReasonReact.reactRef => bool</h4>", "breadcrumb": "TextInput"},
{"href": "./api/TextInput.html", "title": "TextInput", "contents": "@rest", "rendered": "@rest", "breadcrumb": "TextInput"},
{"href": "./api/TextInput.html", "title": "TextInput", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "TextInput"},
{"href": "./api/TextInput.html#TextInput", "title": "TextInput", "contents": "", "rendered": "", "breadcrumb": "TextInput"},
{"href": "./api/Text.html#value-make", "title": "make", "contents": "make option bool option bool option option int option BsReactNative RNEvent NativeLayoutEvent t unit  option unit unit  option unit unit  option BsReactNative Types insets option bool option BsReactNative Style t option string option string option option bool option float option bool option string array ReasonReact reactElement ReasonReact component ReasonReact stateless ReasonReact noRetainedProps unit accessible allowFontScaling ellipsizeMode numberOfLines onLayout onLongPress onPress pressRetentionOffset selectable style testID selectionColor textBreakStrategy adjustsFontSizeToFit minimumFontScale suppressHighlighting value ", "rendered": "<h4 class='item'>let make: (\n  ~?accessible: option(bool),\n  ~?allowFontScaling: option(bool),\n  ~?ellipsizeMode: option(\n    [ `clip | `head | `middle | `tail ]\n  ),\n  ~?numberOfLines: option(int),\n  ~?onLayout: option(\n    BsReactNative.RNEvent.NativeLayoutEvent.t => unit\n  ),\n  ~?onLongPress: option(unit => unit),\n  ~?onPress: option(unit => unit),\n  ~?pressRetentionOffset: option(\n    BsReactNative.Types.insets\n  ),\n  ~?selectable: option(bool),\n  ~?style: option(BsReactNative.Style.t),\n  ~?testID: option(string),\n  ~?selectionColor: option(string),\n  ~?textBreakStrategy: option(\n    [ `highQuality | `balanced | `simple ]\n  ),\n  ~?adjustsFontSizeToFit: option(bool),\n  ~?minimumFontScale: option(float),\n  ~?suppressHighlighting: option(bool),\n  ~?value: option(string),\n  array(ReasonReact.reactElement)\n) => ReasonReact.component(\n  ReasonReact.stateless,\n  ReasonReact.noRetainedProps,\n  unit\n)</h4>", "breadcrumb": "Text"},
{"href": "./api/Text.html", "title": "Text", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Text"},
{"href": "./api/Text.html", "title": "Text", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Text"},
{"href": "./api/Text.html", "title": "Text", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Text"},
{"href": "./api/Text.html#Text", "title": "Text", "contents": "", "rendered": "", "breadcrumb": "Text"},
{"href": "./api/TabBarIOS.html#value-make", "title": "make", "contents": "make option string option option BsReactNative Style t option string option bool option string option string option ReasonReact reactElement option bool option BsReactNative Types insets option unit unit  option BsReactNative RNEvent NativeLayoutEvent t unit  option unit unit  option BsReactNative Types touchResponderHandlers option option bool option string option option option bool option option bool option bool option list option bool option bool array ReasonReact reactElement ReasonReact component ReasonReact stateless ReasonReact noRetainedProps unit barTintColor itemPositioning style tintColor translucent unselectedItemTintColor unselectedTintColor accessibilityLabel accessible hitSlop onAccessibilityTap onLayout onMagicTap responderHandlers pointerEvents removeClippedSubviews testID accessibilityComponentType accessibilityLiveRegion collapsable importantForAccessibility needsOffscreenAlphaCompositing renderToHardwareTextureAndroid accessibilityTraits accessibilityViewIsModal shouldRasterizeIOS ", "rendered": "<h4 class='item'>let make: (\n  ~?barTintColor: option(string),\n  ~?itemPositioning: option([ `fill | `auto | `center ]),\n  ~?style: option(BsReactNative.Style.t),\n  ~?tintColor: option(string),\n  ~?translucent: option(bool),\n  ~?unselectedItemTintColor: option(string),\n  ~?unselectedTintColor: option(string),\n  ~?accessibilityLabel: option(ReasonReact.reactElement),\n  ~?accessible: option(bool),\n  ~?hitSlop: option(BsReactNative.Types.insets),\n  ~?onAccessibilityTap: option(unit => unit),\n  ~?onLayout: option(\n    BsReactNative.RNEvent.NativeLayoutEvent.t => unit\n  ),\n  ~?onMagicTap: option(unit => unit),\n  ~?responderHandlers: option(\n    BsReactNative.Types.touchResponderHandlers\n  ),\n  ~?pointerEvents: option(\n    [ `none | `boxOnly | `auto | `boxNone ]\n  ),\n  ~?removeClippedSubviews: option(bool),\n  ~?testID: option(string),\n  ~?accessibilityComponentType: option(\n    [ `button | `none | `radiobutton_checked | `radiobutton_unchecked ]\n  ),\n  ~?accessibilityLiveRegion: option(\n    [ `none | `polite | `assertive ]\n  ),\n  ~?collapsable: option(bool),\n  ~?importantForAccessibility: option(\n    [ `no | `yes | `noHideDescendants | `auto ]\n  ),\n  ~?needsOffscreenAlphaCompositing: option(bool),\n  ~?renderToHardwareTextureAndroid: option(bool),\n  ~?accessibilityTraits: option(\n    list(\n      [ `frequentUpdates\n| `adjustable\n| `image\n| `button\n| `header\n| `none\n| `plays\n| `text\n| `startsMedia\n| `disabled\n| `link\n| `pageTurn\n| `selected\n| `allowsDirectInteraction\n| `summary\n| `search\n| `key ]\n    )\n  ),\n  ~?accessibilityViewIsModal: option(bool),\n  ~?shouldRasterizeIOS: option(bool),\n  array(ReasonReact.reactElement)\n) => ReasonReact.component(\n  ReasonReact.stateless,\n  ReasonReact.noRetainedProps,\n  unit\n)</h4>", "breadcrumb": "TabBarIOS"},
{"href": "./api/TabBarIOS.html#value-Item.make", "title": "Item.make", "contents": "make option string option string option string option BsReactNative Image imageSource option unit unit  option bool option BsReactNative Style t option bool option BsReactNative Image imageSource option bool option ReasonReact reactElement option bool option BsReactNative Types insets option unit unit  option BsReactNative RNEvent NativeLayoutEvent t unit  option unit unit  option BsReactNative Types touchResponderHandlers option option bool option string option option option bool option option bool option bool option list option bool option bool array ReasonReact reactElement ReasonReact component ReasonReact stateless ReasonReact noRetainedProps unit title badgeColor badge icon onPress renderAsOriginal style selected selectedIcon isTVSelectable accessibilityLabel accessible hitSlop onAccessibilityTap onLayout onMagicTap responderHandlers pointerEvents removeClippedSubviews testID accessibilityComponentType accessibilityLiveRegion collapsable importantForAccessibility needsOffscreenAlphaCompositing renderToHardwareTextureAndroid accessibilityTraits accessibilityViewIsModal shouldRasterizeIOS ", "rendered": "<h4 class='item'>let make: (\n  ~?title: option(string),\n  ~?badgeColor: option(string),\n  ~?badge: option(string),\n  ~?icon: option(BsReactNative.Image.imageSource),\n  ~?onPress: option(unit => unit),\n  ~?renderAsOriginal: option(bool),\n  ~?style: option(BsReactNative.Style.t),\n  ~?selected: option(bool),\n  ~?selectedIcon: option(BsReactNative.Image.imageSource),\n  ~?isTVSelectable: option(bool),\n  ~?accessibilityLabel: option(ReasonReact.reactElement),\n  ~?accessible: option(bool),\n  ~?hitSlop: option(BsReactNative.Types.insets),\n  ~?onAccessibilityTap: option(unit => unit),\n  ~?onLayout: option(\n    BsReactNative.RNEvent.NativeLayoutEvent.t => unit\n  ),\n  ~?onMagicTap: option(unit => unit),\n  ~?responderHandlers: option(\n    BsReactNative.Types.touchResponderHandlers\n  ),\n  ~?pointerEvents: option(\n    [ `none | `boxOnly | `auto | `boxNone ]\n  ),\n  ~?removeClippedSubviews: option(bool),\n  ~?testID: option(string),\n  ~?accessibilityComponentType: option(\n    [ `button | `none | `radiobutton_checked | `radiobutton_unchecked ]\n  ),\n  ~?accessibilityLiveRegion: option(\n    [ `none | `polite | `assertive ]\n  ),\n  ~?collapsable: option(bool),\n  ~?importantForAccessibility: option(\n    [ `no | `yes | `noHideDescendants | `auto ]\n  ),\n  ~?needsOffscreenAlphaCompositing: option(bool),\n  ~?renderToHardwareTextureAndroid: option(bool),\n  ~?accessibilityTraits: option(\n    list(\n      [ `frequentUpdates\n| `adjustable\n| `image\n| `button\n| `header\n| `none\n| `plays\n| `text\n| `startsMedia\n| `disabled\n| `link\n| `pageTurn\n| `selected\n| `allowsDirectInteraction\n| `summary\n| `search\n| `key ]\n    )\n  ),\n  ~?accessibilityViewIsModal: option(bool),\n  ~?shouldRasterizeIOS: option(bool),\n  array(ReasonReact.reactElement)\n) => ReasonReact.component(\n  ReasonReact.stateless,\n  ReasonReact.noRetainedProps,\n  unit\n)</h4>", "breadcrumb": "TabBarIOS"},
{"href": "./api/TabBarIOS.html#module-Item", "title": "Item", "contents": "@rest", "rendered": "@rest", "breadcrumb": "TabBarIOS"},
{"href": "./api/TabBarIOS.html#module-Item", "title": "Item", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "TabBarIOS"},
{"href": "./api/TabBarIOS.html", "title": "TabBarIOS", "contents": "@rest", "rendered": "@rest", "breadcrumb": "TabBarIOS"},
{"href": "./api/TabBarIOS.html", "title": "TabBarIOS", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "TabBarIOS"},
{"href": "./api/TabBarIOS.html#TabBarIOS", "title": "TabBarIOS", "contents": "", "rendered": "", "breadcrumb": "TabBarIOS"},
{"href": "./api/Switch.html#value-make", "title": "make", "contents": "make option bool option string option bool unit  option string option string option bool option ReasonReact reactElement option bool option BsReactNative Types insets option unit unit  option BsReactNative RNEvent NativeLayoutEvent t unit  option unit unit  option BsReactNative Types touchResponderHandlers option option bool option BsReactNative Style t option string option option option bool option option bool option bool option list option bool option bool array ReasonReact reactElement ReasonReact component ReasonReact stateless ReasonReact noRetainedProps unit disabled onTintColor onValueChange thumbTintColor tintColor value accessibilityLabel accessible hitSlop onAccessibilityTap onLayout onMagicTap responderHandlers pointerEvents removeClippedSubviews style testID accessibilityComponentType accessibilityLiveRegion collapsable importantForAccessibility needsOffscreenAlphaCompositing renderToHardwareTextureAndroid accessibilityTraits accessibilityViewIsModal shouldRasterizeIOS ", "rendered": "<h4 class='item'>let make: (\n  ~?disabled: option(bool),\n  ~?onTintColor: option(string),\n  ~?onValueChange: option(bool => unit),\n  ~?thumbTintColor: option(string),\n  ~?tintColor: option(string),\n  ~?value: option(bool),\n  ~?accessibilityLabel: option(ReasonReact.reactElement),\n  ~?accessible: option(bool),\n  ~?hitSlop: option(BsReactNative.Types.insets),\n  ~?onAccessibilityTap: option(unit => unit),\n  ~?onLayout: option(\n    BsReactNative.RNEvent.NativeLayoutEvent.t => unit\n  ),\n  ~?onMagicTap: option(unit => unit),\n  ~?responderHandlers: option(\n    BsReactNative.Types.touchResponderHandlers\n  ),\n  ~?pointerEvents: option(\n    [ `none | `boxOnly | `auto | `boxNone ]\n  ),\n  ~?removeClippedSubviews: option(bool),\n  ~?style: option(BsReactNative.Style.t),\n  ~?testID: option(string),\n  ~?accessibilityComponentType: option(\n    [ `button | `none | `radiobutton_checked | `radiobutton_unchecked ]\n  ),\n  ~?accessibilityLiveRegion: option(\n    [ `none | `polite | `assertive ]\n  ),\n  ~?collapsable: option(bool),\n  ~?importantForAccessibility: option(\n    [ `no | `yes | `noHideDescendants | `auto ]\n  ),\n  ~?needsOffscreenAlphaCompositing: option(bool),\n  ~?renderToHardwareTextureAndroid: option(bool),\n  ~?accessibilityTraits: option(\n    list(\n      [ `frequentUpdates\n| `adjustable\n| `image\n| `button\n| `header\n| `none\n| `plays\n| `text\n| `startsMedia\n| `disabled\n| `link\n| `pageTurn\n| `selected\n| `allowsDirectInteraction\n| `summary\n| `search\n| `key ]\n    )\n  ),\n  ~?accessibilityViewIsModal: option(bool),\n  ~?shouldRasterizeIOS: option(bool),\n  array(ReasonReact.reactElement)\n) => ReasonReact.component(\n  ReasonReact.stateless,\n  ReasonReact.noRetainedProps,\n  unit\n)</h4>", "breadcrumb": "Switch"},
{"href": "./api/Switch.html", "title": "Switch", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Switch"},
{"href": "./api/Switch.html", "title": "Switch", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Switch"},
{"href": "./api/Switch.html#Switch", "title": "Switch", "contents": "", "rendered": "", "breadcrumb": "Switch"},
{"href": "./api/StatusBar.html#value-make", "title": "make", "contents": "make option bool option option bool option string option bool option bool option array ReasonReact reactElement ReasonReact component ReasonReact stateless ReasonReact noRetainedProps unit animated barStyle hidden backgroundColor translucent networkActivityIndicatorVisible showHideTransition ", "rendered": "<h4 class='item'>let make: (\n  ~?animated: option(bool),\n  ~?barStyle: option(\n    [ `default | `darkContent | `lightContent ]\n  ),\n  ~?hidden: option(bool),\n  ~?backgroundColor: option(string),\n  ~?translucent: option(bool),\n  ~?networkActivityIndicatorVisible: option(bool),\n  ~?showHideTransition: option([ `none | `fade | `slide ]),\n  array(ReasonReact.reactElement)\n) => ReasonReact.component(\n  ReasonReact.stateless,\n  ReasonReact.noRetainedProps,\n  unit\n)</h4>", "breadcrumb": "StatusBar"},
{"href": "./api/StatusBar.html#value-setTranslucent", "title": "setTranslucent", "contents": "setTranslucent bool unit ", "rendered": "<h4 class='item'>let setTranslucent: bool => unit</h4>", "breadcrumb": "StatusBar"},
{"href": "./api/StatusBar.html#value-setBackgroundColor", "title": "setBackgroundColor", "contents": "setBackgroundColor string option bool unit unit  animated ", "rendered": "<h4 class='item'>let setBackgroundColor: (\n  string,\n  ~?animated: option(bool),\n  unit\n) => unit</h4>", "breadcrumb": "StatusBar"},
{"href": "./api/StatusBar.html#value-setNetworkActivityIndicatorVisible", "title": "setNetworkActivityIndicatorVisible", "contents": "setNetworkActivityIndicatorVisible bool unit ", "rendered": "<h4 class='item'>let setNetworkActivityIndicatorVisible: bool => unit</h4>", "breadcrumb": "StatusBar"},
{"href": "./api/StatusBar.html#value-setBarStyle", "title": "setBarStyle", "contents": "setBarStyle option bool unit unit  animated ", "rendered": "<h4 class='item'>let setBarStyle: (\n  [ `default | `darkContent | `lightContent ],\n  ~?animated: option(bool),\n  unit\n) => unit</h4>", "breadcrumb": "StatusBar"},
{"href": "./api/StatusBar.html#value-setHidden", "title": "setHidden", "contents": "setHidden bool option unit unit  animation ", "rendered": "<h4 class='item'>let setHidden: (\n  bool,\n  ~?animation: option([ `none | `fade | `slide ]),\n  unit\n) => unit</h4>", "breadcrumb": "StatusBar"},
{"href": "./api/StatusBar.html", "title": "StatusBar", "contents": "@rest", "rendered": "@rest", "breadcrumb": "StatusBar"},
{"href": "./api/StatusBar.html", "title": "StatusBar", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "StatusBar"},
{"href": "./api/StatusBar.html#StatusBar", "title": "StatusBar", "contents": "", "rendered": "", "breadcrumb": "StatusBar"},
{"href": "./api/Slider.html#value-make", "title": "make", "contents": "make option bool option string option float option string option float option float unit  option float unit  option float option float option string option BsReactNative Image imageSource option BsReactNative Image imageSource option BsReactNative Image imageSource option BsReactNative Image imageSource option ReasonReact reactElement option bool option BsReactNative Types insets option unit unit  option BsReactNative RNEvent NativeLayoutEvent t unit  option unit unit  option BsReactNative Types touchResponderHandlers option option bool option BsReactNative Style t option string option option option bool option option bool option bool option list option bool option bool array ReasonReact reactElement ReasonReact component ReasonReact stateless ReasonReact noRetainedProps unit disabled maximumTrackTintColor maximumValue minimumTrackTintColor minimumValue onSlidingComplete onValueChange step value thumbTintColor maximumTrackImage minimumTrackImage thumbImage trackImage accessibilityLabel accessible hitSlop onAccessibilityTap onLayout onMagicTap responderHandlers pointerEvents removeClippedSubviews style testID accessibilityComponentType accessibilityLiveRegion collapsable importantForAccessibility needsOffscreenAlphaCompositing renderToHardwareTextureAndroid accessibilityTraits accessibilityViewIsModal shouldRasterizeIOS ", "rendered": "<h4 class='item'>let make: (\n  ~?disabled: option(bool),\n  ~?maximumTrackTintColor: option(string),\n  ~?maximumValue: option(float),\n  ~?minimumTrackTintColor: option(string),\n  ~?minimumValue: option(float),\n  ~?onSlidingComplete: option(float => unit),\n  ~?onValueChange: option(float => unit),\n  ~?step: option(float),\n  ~?value: option(float),\n  ~?thumbTintColor: option(string),\n  ~?maximumTrackImage: option(\n    BsReactNative.Image.imageSource\n  ),\n  ~?minimumTrackImage: option(\n    BsReactNative.Image.imageSource\n  ),\n  ~?thumbImage: option(BsReactNative.Image.imageSource),\n  ~?trackImage: option(BsReactNative.Image.imageSource),\n  ~?accessibilityLabel: option(ReasonReact.reactElement),\n  ~?accessible: option(bool),\n  ~?hitSlop: option(BsReactNative.Types.insets),\n  ~?onAccessibilityTap: option(unit => unit),\n  ~?onLayout: option(\n    BsReactNative.RNEvent.NativeLayoutEvent.t => unit\n  ),\n  ~?onMagicTap: option(unit => unit),\n  ~?responderHandlers: option(\n    BsReactNative.Types.touchResponderHandlers\n  ),\n  ~?pointerEvents: option(\n    [ `none | `boxOnly | `auto | `boxNone ]\n  ),\n  ~?removeClippedSubviews: option(bool),\n  ~?style: option(BsReactNative.Style.t),\n  ~?testID: option(string),\n  ~?accessibilityComponentType: option(\n    [ `button | `none | `radiobutton_checked | `radiobutton_unchecked ]\n  ),\n  ~?accessibilityLiveRegion: option(\n    [ `none | `polite | `assertive ]\n  ),\n  ~?collapsable: option(bool),\n  ~?importantForAccessibility: option(\n    [ `no | `yes | `noHideDescendants | `auto ]\n  ),\n  ~?needsOffscreenAlphaCompositing: option(bool),\n  ~?renderToHardwareTextureAndroid: option(bool),\n  ~?accessibilityTraits: option(\n    list(\n      [ `frequentUpdates\n| `adjustable\n| `image\n| `button\n| `header\n| `none\n| `plays\n| `text\n| `startsMedia\n| `disabled\n| `link\n| `pageTurn\n| `selected\n| `allowsDirectInteraction\n| `summary\n| `search\n| `key ]\n    )\n  ),\n  ~?accessibilityViewIsModal: option(bool),\n  ~?shouldRasterizeIOS: option(bool),\n  array(ReasonReact.reactElement)\n) => ReasonReact.component(\n  ReasonReact.stateless,\n  ReasonReact.noRetainedProps,\n  unit\n)</h4>", "breadcrumb": "Slider"},
{"href": "./api/Slider.html", "title": "Slider", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Slider"},
{"href": "./api/Slider.html", "title": "Slider", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Slider"},
{"href": "./api/Slider.html#Slider", "title": "Slider", "contents": "", "rendered": "", "breadcrumb": "Slider"},
{"href": "./api/SegmentedControllOS.html#value-make", "title": "make", "contents": "make list string option int option BsReactNative RNEvent t unit  option bool option bool option string option string unit  option ReasonReact reactElement option bool option BsReactNative Types insets option unit unit  option BsReactNative RNEvent NativeLayoutEvent t unit  option unit unit  option BsReactNative Types touchResponderHandlers option option bool option BsReactNative Style t option string option option option bool option option bool option bool option list option bool option bool array ReasonReact reactElement ReasonReact component ReasonReact stateless ReasonReact noRetainedProps unit values selectedIndex onChange enabled momentary tintColor onValueChange accessibilityLabel accessible hitSlop onAccessibilityTap onLayout onMagicTap responderHandlers pointerEvents removeClippedSubviews style testID accessibilityComponentType accessibilityLiveRegion collapsable importantForAccessibility needsOffscreenAlphaCompositing renderToHardwareTextureAndroid accessibilityTraits accessibilityViewIsModal shouldRasterizeIOS ", "rendered": "<h4 class='item'>let make: (\n  ~values: list(string),\n  ~?selectedIndex: option(int),\n  ~?onChange: option(BsReactNative.RNEvent.t => unit),\n  ~?enabled: option(bool),\n  ~?momentary: option(bool),\n  ~?tintColor: option(string),\n  ~?onValueChange: option(string => unit),\n  ~?accessibilityLabel: option(ReasonReact.reactElement),\n  ~?accessible: option(bool),\n  ~?hitSlop: option(BsReactNative.Types.insets),\n  ~?onAccessibilityTap: option(unit => unit),\n  ~?onLayout: option(\n    BsReactNative.RNEvent.NativeLayoutEvent.t => unit\n  ),\n  ~?onMagicTap: option(unit => unit),\n  ~?responderHandlers: option(\n    BsReactNative.Types.touchResponderHandlers\n  ),\n  ~?pointerEvents: option(\n    [ `none | `boxOnly | `auto | `boxNone ]\n  ),\n  ~?removeClippedSubviews: option(bool),\n  ~?style: option(BsReactNative.Style.t),\n  ~?testID: option(string),\n  ~?accessibilityComponentType: option(\n    [ `button | `none | `radiobutton_checked | `radiobutton_unchecked ]\n  ),\n  ~?accessibilityLiveRegion: option(\n    [ `none | `polite | `assertive ]\n  ),\n  ~?collapsable: option(bool),\n  ~?importantForAccessibility: option(\n    [ `no | `yes | `noHideDescendants | `auto ]\n  ),\n  ~?needsOffscreenAlphaCompositing: option(bool),\n  ~?renderToHardwareTextureAndroid: option(bool),\n  ~?accessibilityTraits: option(\n    list(\n      [ `frequentUpdates\n| `adjustable\n| `image\n| `button\n| `header\n| `none\n| `plays\n| `text\n| `startsMedia\n| `disabled\n| `link\n| `pageTurn\n| `selected\n| `allowsDirectInteraction\n| `summary\n| `search\n| `key ]\n    )\n  ),\n  ~?accessibilityViewIsModal: option(bool),\n  ~?shouldRasterizeIOS: option(bool),\n  array(ReasonReact.reactElement)\n) => ReasonReact.component(\n  ReasonReact.stateless,\n  ReasonReact.noRetainedProps,\n  unit\n)</h4>", "breadcrumb": "SegmentedControllOS"},
{"href": "./api/SegmentedControllOS.html", "title": "SegmentedControllOS", "contents": "@rest", "rendered": "@rest", "breadcrumb": "SegmentedControllOS"},
{"href": "./api/SegmentedControllOS.html", "title": "SegmentedControllOS", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "SegmentedControllOS"},
{"href": "./api/SegmentedControllOS.html#SegmentedControllOS", "title": "SegmentedControllOS", "contents": "", "rendered": "", "breadcrumb": "SegmentedControllOS"},
{"href": "./api/SectionList.html#value-make", "title": "make", "contents": "make sections renderItem int string   option separatorComponent option unit ReasonReact reactElement  option ReasonReact reactElement option ReasonReact reactElement option separatorComponent option bool option option int option Js t unit  option float option Js t option unit unit  option bool option renderAccessoryView option renderAccessoryView option bool option option option bool option bool option option array int Js t   array ReasonReact reactElement ReasonReact component ReasonReact stateless ReasonReact noRetainedProps unit sections renderItem keyExtractor itemSeparatorComponent listEmptyComponent listFooterComponent listHeaderComponent sectionSeparatorComponent inverted extraData initialNumToRender onEndReached onEndReachedThreshold onViewableItemsChanged onRefresh refreshing renderSectionHeader renderSectionFooter stickySectionHeadersEnabled keyboardDismissMode keyboardShouldPersistTaps showsHorizontalScrollIndicator showsVerticalScrollIndicator getItemLayout ", "rendered": "<h4 class='item'>let make: (\n  ~sections: <a href=\"./api/SectionList.html#type-sections\">sections</a>('item),\n  ~renderItem: <a href=\"./api/SectionList.html#type-renderItem\">renderItem</a>('item),\n  ~keyExtractor: ('item, int) => string,\n  ~?itemSeparatorComponent: option(\n    <a href=\"./api/SectionList.html#type-separatorComponent\">separatorComponent</a>('item)\n  ),\n  ~?listEmptyComponent: option(\n    unit => ReasonReact.reactElement\n  ),\n  ~?listFooterComponent: option(ReasonReact.reactElement),\n  ~?listHeaderComponent: option(ReasonReact.reactElement),\n  ~?sectionSeparatorComponent: option(\n    <a href=\"./api/SectionList.html#type-separatorComponent\">separatorComponent</a>('item)\n  ),\n  ~?inverted: option(bool),\n  ~?extraData: option('extraData),\n  ~?initialNumToRender: option(int),\n  ~?onEndReached: option(\n    Js.t(&lt; distanceFromEnd : float &gt;) => unit\n  ),\n  ~?onEndReachedThreshold: option(float),\n  ~?onViewableItemsChanged: option(\n    Js.t(\n      &lt; changed : 'item4 viewToken array; viewableItems : 'item4 viewToken array &gt;\n    )\n  ),\n  ~?onRefresh: option(unit => unit),\n  ~?refreshing: option(bool),\n  ~?renderSectionHeader: option(<a href=\"./api/SectionList.html#type-renderAccessoryView\">renderAccessoryView</a>('item)),\n  ~?renderSectionFooter: option(<a href=\"./api/SectionList.html#type-renderAccessoryView\">renderAccessoryView</a>('item)),\n  ~?stickySectionHeadersEnabled: option(bool),\n  ~?keyboardDismissMode: option(\n    [ `interactive | `none | `onDrag ]\n  ),\n  ~?keyboardShouldPersistTaps: option(\n    [ `never | `handled | `always ]\n  ),\n  ~?showsHorizontalScrollIndicator: option(bool),\n  ~?showsVerticalScrollIndicator: option(bool),\n  ~?getItemLayout: option(\n    (option(array('item)), int) => Js.t(\n      &lt; index : int; length : int; offset : int &gt;\n    )\n  ),\n  array(ReasonReact.reactElement)\n) => ReasonReact.component(\n  ReasonReact.stateless,\n  ReasonReact.noRetainedProps,\n  unit\n)</h4>", "breadcrumb": "SectionList"},
{"href": "./api/SectionList.html#type-viewToken", "title": "viewToken", "contents": "viewToken Js t", "rendered": "<h4 class='item'>type viewToken('item) = Js.t(\n  &lt; index : int Js.undefined; isViewable : bool; item : 'item3; key : string;\n  section : 'item3 section &gt;\n)</h4>", "breadcrumb": "SectionList"},
{"href": "./api/SectionList.html#value-renderAccessoryView", "title": "renderAccessoryView", "contents": "renderAccessoryView renderAccessory ReasonReact reactElement  renderAccessoryView ", "rendered": "<h4 class='item'>let renderAccessoryView: <a href=\"./api/SectionList.html#type-renderAccessory\">renderAccessory</a>(\n  'item\n) => ReasonReact.reactElement => <a href=\"./api/SectionList.html#type-renderAccessoryView\">renderAccessoryView</a>('item)</h4>", "breadcrumb": "SectionList"},
{"href": "./api/SectionList.html#type-renderAccessoryView", "title": "renderAccessoryView", "contents": "renderAccessoryView ", "rendered": "<h4 class='item'>type renderAccessoryView('item)</h4>", "breadcrumb": "SectionList"},
{"href": "./api/SectionList.html#type-renderAccessory", "title": "renderAccessory", "contents": "renderAccessory section section", "rendered": "<h4 class='item'>type renderAccessory('item) = {section: <a href=\"./api/SectionList.html#type-section\">section</a>('item)}</h4>", "breadcrumb": "SectionList"},
{"href": "./api/SectionList.html#value-separatorComponent", "title": "separatorComponent", "contents": "separatorComponent separatorProps ReasonReact reactElement  separatorComponent ", "rendered": "<h4 class='item'>let separatorComponent: <a href=\"./api/SectionList.html#type-separatorProps\">separatorProps</a>(\n  'item\n) => ReasonReact.reactElement => <a href=\"./api/SectionList.html#type-separatorComponent\">separatorComponent</a>('item)</h4>", "breadcrumb": "SectionList"},
{"href": "./api/SectionList.html#type-separatorComponent", "title": "separatorComponent", "contents": "separatorComponent ", "rendered": "<h4 class='item'>type separatorComponent('item)</h4>", "breadcrumb": "SectionList"},
{"href": "./api/SectionList.html#value-renderItem", "title": "renderItem", "contents": "renderItem renderBag ReasonReact reactElement  renderItem ", "rendered": "<h4 class='item'>let renderItem: <a href=\"./api/SectionList.html#type-renderBag\">renderBag</a>(\n  'item\n) => ReasonReact.reactElement => <a href=\"./api/SectionList.html#type-renderItem\">renderItem</a>('item)</h4>", "breadcrumb": "SectionList"},
{"href": "./api/SectionList.html#type-renderItem", "title": "renderItem", "contents": "renderItem ", "rendered": "<h4 class='item'>type renderItem('item)</h4>", "breadcrumb": "SectionList"},
{"href": "./api/SectionList.html#value-sections", "title": "sections", "contents": "sections array section sections ", "rendered": "<h4 class='item'>let sections: array(<a href=\"./api/SectionList.html#type-section\">section</a>('item)) => <a href=\"./api/SectionList.html#type-sections\">sections</a>('item)</h4>", "breadcrumb": "SectionList"},
{"href": "./api/SectionList.html#type-sections", "title": "sections", "contents": "sections ", "rendered": "<h4 class='item'>type sections('item)</h4>", "breadcrumb": "SectionList"},
{"href": "./api/SectionList.html#type-separatorProps", "title": "separatorProps", "contents": "separatorProps highlighted bool leadingItem option leadingSection option section section section trailingItem option trailingSection option section", "rendered": "<h4 class='item'>type separatorProps('item) = {\n  highlighted: bool,\n  leadingItem: option('item),\n  leadingSection: option(<a href=\"./api/SectionList.html#type-section\">section</a>('item)),\n  section: <a href=\"./api/SectionList.html#type-section\">section</a>('item),\n  trailingItem: option('item),\n  trailingSection: option(<a href=\"./api/SectionList.html#type-section\">section</a>('item))\n}</h4>", "breadcrumb": "SectionList"},
{"href": "./api/SectionList.html#value-section", "title": "section", "contents": "section array option string option renderBag ReasonReact reactElement  unit section data key renderItem ", "rendered": "<h4 class='item'>let section: (\n  ~data: array('item),\n  ~?key: option(string),\n  ~?renderItem: option(\n    <a href=\"./api/SectionList.html#type-renderBag\">renderBag</a>('item) => ReasonReact.reactElement\n  ),\n  unit\n) => <a href=\"./api/SectionList.html#type-section\">section</a>('item)</h4>", "breadcrumb": "SectionList"},
{"href": "./api/SectionList.html#type-section", "title": "section", "contents": "section data array key option string renderItem option renderBag ReasonReact reactElement ", "rendered": "<h4 class='item'>type section('item) = {\n  data: array('item),\n  key: option(string),\n  renderItem: option(\n    <a href=\"./api/SectionList.html#type-renderBag\">renderBag</a>('item) => ReasonReact.reactElement\n  )\n}</h4>", "breadcrumb": "SectionList"},
{"href": "./api/SectionList.html#type-renderBag", "title": "renderBag", "contents": "renderBag item index int section section separators Js t", "rendered": "<h4 class='item'>type renderBag('item) = {\n  item: 'item,\n  index: int,\n  section: <a href=\"./api/SectionList.html#type-section\">section</a>('item),\n  separators: Js.t(\n    &lt; highlight : unit -&gt; unit; unhighlight : unit -&gt; unit &gt;\n  )\n}</h4>", "breadcrumb": "SectionList"},
{"href": "./api/SectionList.html", "title": "SectionList", "contents": "@rest", "rendered": "@rest", "breadcrumb": "SectionList"},
{"href": "./api/SectionList.html", "title": "SectionList", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "SectionList"},
{"href": "./api/SectionList.html#SectionList", "title": "SectionList", "contents": "", "rendered": "", "breadcrumb": "SectionList"},
{"href": "./api/ScrollView.html#value-make", "title": "make", "contents": "make option ReasonReact reactElement option bool option BsReactNative Types insets option unit unit  option BsReactNative RNEvent NativeLayoutEvent t unit  option unit unit  option BsReactNative Types touchResponderHandlers option option bool option BsReactNative Style t option string option option option bool option option bool option bool option list option bool option bool option BsReactNative Style t option bool option option option float float unit  option BsReactNative RNEvent NativeScrollEvent t unit  option bool option ReasonReact reactElement option bool option bool option bool option list int option option string option bool option bool option bool option bool option bool option bool option BsReactNative Types insets option point option option bool option option float option float option unit unit  option int option BsReactNative Types insets option bool option option float array ReasonReact reactElement ReasonReact component ReasonReact stateless ReasonReact noRetainedProps unit accessibilityLabel accessible hitSlop onAccessibilityTap onLayout onMagicTap responderHandlers pointerEvents removeClippedSubviews style testID accessibilityComponentType accessibilityLiveRegion collapsable importantForAccessibility needsOffscreenAlphaCompositing renderToHardwareTextureAndroid accessibilityTraits accessibilityViewIsModal shouldRasterizeIOS contentContainerStyle horizontal keyboardDismissMode keyboardShouldPersistTaps onContentSizeChange onScroll pagingEnabled refreshControl scrollEnabled showsHorizontalScrollIndicator showsVerticalScrollIndicator stickyHeaderIndices overScrollMode scrollPerfTag alwaysBounceHorizontal alwaysBounceVertical automaticallyAdjustContentInsets bounces canCancelContentTouches centerContent contentInset contentOffset decelerationRate directionalLockEnabled indicatorStyle maximumZoomScale minimumZoomScale onScrollAnimationEnd scrollEventThrottle scrollIndicatorInsets scrollsToTop snapToAlignment zoomScale ", "rendered": "<h4 class='item'>let make: (\n  ~?accessibilityLabel: option(ReasonReact.reactElement),\n  ~?accessible: option(bool),\n  ~?hitSlop: option(BsReactNative.Types.insets),\n  ~?onAccessibilityTap: option(unit => unit),\n  ~?onLayout: option(\n    BsReactNative.RNEvent.NativeLayoutEvent.t => unit\n  ),\n  ~?onMagicTap: option(unit => unit),\n  ~?responderHandlers: option(\n    BsReactNative.Types.touchResponderHandlers\n  ),\n  ~?pointerEvents: option(\n    [ `none | `boxOnly | `auto | `boxNone ]\n  ),\n  ~?removeClippedSubviews: option(bool),\n  ~?style: option(BsReactNative.Style.t),\n  ~?testID: option(string),\n  ~?accessibilityComponentType: option(\n    [ `button | `none | `radiobutton_checked | `radiobutton_unchecked ]\n  ),\n  ~?accessibilityLiveRegion: option(\n    [ `none | `polite | `assertive ]\n  ),\n  ~?collapsable: option(bool),\n  ~?importantForAccessibility: option(\n    [ `no | `yes | `noHideDescendants | `auto ]\n  ),\n  ~?needsOffscreenAlphaCompositing: option(bool),\n  ~?renderToHardwareTextureAndroid: option(bool),\n  ~?accessibilityTraits: option(\n    list(\n      [ `frequentUpdates\n| `adjustable\n| `image\n| `button\n| `none\n| `header\n| `plays\n| `text\n| `startsMedia\n| `link\n| `disabled\n| `pageTurn\n| `selected\n| `summary\n| `search\n| `allowsDirectInteraction\n| `key ]\n    )\n  ),\n  ~?accessibilityViewIsModal: option(bool),\n  ~?shouldRasterizeIOS: option(bool),\n  ~?contentContainerStyle: option(BsReactNative.Style.t),\n  ~?horizontal: option(bool),\n  ~?keyboardDismissMode: option(\n    [ `interactive | `none | `onDrag ]\n  ),\n  ~?keyboardShouldPersistTaps: option(\n    [ `never | `handled | `always ]\n  ),\n  ~?onContentSizeChange: option((float, float) => unit),\n  ~?onScroll: option(\n    BsReactNative.RNEvent.NativeScrollEvent.t => unit\n  ),\n  ~?pagingEnabled: option(bool),\n  ~?refreshControl: option(ReasonReact.reactElement),\n  ~?scrollEnabled: option(bool),\n  ~?showsHorizontalScrollIndicator: option(bool),\n  ~?showsVerticalScrollIndicator: option(bool),\n  ~?stickyHeaderIndices: option(list(int)),\n  ~?overScrollMode: option([ `never | `auto | `always ]),\n  ~?scrollPerfTag: option(string),\n  ~?alwaysBounceHorizontal: option(bool),\n  ~?alwaysBounceVertical: option(bool),\n  ~?automaticallyAdjustContentInsets: option(bool),\n  ~?bounces: option(bool),\n  ~?canCancelContentTouches: option(bool),\n  ~?centerContent: option(bool),\n  ~?contentInset: option(BsReactNative.Types.insets),\n  ~?contentOffset: option(<a href=\"./api/ScrollView.html#type-point\">point</a>),\n  ~?decelerationRate: option([ `normal | `fast ]),\n  ~?directionalLockEnabled: option(bool),\n  ~?indicatorStyle: option([ `white | `black | `default ]),\n  ~?maximumZoomScale: option(float),\n  ~?minimumZoomScale: option(float),\n  ~?onScrollAnimationEnd: option(unit => unit),\n  ~?scrollEventThrottle: option(int),\n  ~?scrollIndicatorInsets: option(\n    BsReactNative.Types.insets\n  ),\n  ~?scrollsToTop: option(bool),\n  ~?snapToAlignment: option([ `start | `center | `end_ ]),\n  ~?zoomScale: option(float),\n  array(ReasonReact.reactElement)\n) => ReasonReact.component(\n  ReasonReact.stateless,\n  ReasonReact.noRetainedProps,\n  unit\n)</h4>", "breadcrumb": "ScrollView"},
{"href": "./api/ScrollView.html#value-scrollToEnd", "title": "scrollToEnd", "contents": "scrollToEnd ReasonReact reactRef bool unit  animated", "rendered": "<h4 class='item'>let scrollToEnd: (\n  ReasonReact.reactRef,\n  ~animated: bool\n) => unit</h4>", "breadcrumb": "ScrollView"},
{"href": "./api/ScrollView.html#value-scrollTo", "title": "scrollTo", "contents": "scrollTo ReasonReact reactRef int int bool unit  x y animated", "rendered": "<h4 class='item'>let scrollTo: (\n  ReasonReact.reactRef,\n  ~x: int,\n  ~y: int,\n  ~animated: bool\n) => unit</h4>", "breadcrumb": "ScrollView"},
{"href": "./api/ScrollView.html#type-point", "title": "point", "contents": "point x float y float", "rendered": "<h4 class='item'>type point = {x: float, y: float}</h4>", "breadcrumb": "ScrollView"},
{"href": "./api/ScrollView.html", "title": "ScrollView", "contents": "@rest", "rendered": "@rest", "breadcrumb": "ScrollView"},
{"href": "./api/ScrollView.html", "title": "ScrollView", "contents": "@rest", "rendered": "@rest", "breadcrumb": "ScrollView"},
{"href": "./api/ScrollView.html", "title": "ScrollView", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ScrollView"},
{"href": "./api/ScrollView.html#ScrollView", "title": "ScrollView", "contents": "", "rendered": "", "breadcrumb": "ScrollView"},
{"href": "./api/SafeAreaView.html#value-make", "title": "make", "contents": "make option string option bool option BsReactNative Types insets option unit unit  option BsReactNative RNEvent NativeLayoutEvent t unit  option unit unit  option BsReactNative Types touchResponderHandlers option option bool option BsReactNative Style t option string option option option bool option option bool option bool option list option bool option bool array ReasonReact reactElement ReasonReact component ReasonReact stateless ReasonReact noRetainedProps unit accessibilityLabel accessible hitSlop onAccessibilityTap onLayout onMagicTap responderHandlers pointerEvents removeClippedSubviews style testID accessibilityComponentType accessibilityLiveRegion collapsable importantForAccessibility needsOffscreenAlphaCompositing renderToHardwareTextureAndroid accessibilityTraits accessibilityViewIsModal shouldRasterizeIOS ", "rendered": "<h4 class='item'>let make: (\n  ~?accessibilityLabel: option(string),\n  ~?accessible: option(bool),\n  ~?hitSlop: option(BsReactNative.Types.insets),\n  ~?onAccessibilityTap: option(unit => unit),\n  ~?onLayout: option(\n    BsReactNative.RNEvent.NativeLayoutEvent.t => unit\n  ),\n  ~?onMagicTap: option(unit => unit),\n  ~?responderHandlers: option(\n    BsReactNative.Types.touchResponderHandlers\n  ),\n  ~?pointerEvents: option(\n    [ `none | `boxOnly | `auto | `boxNone ]\n  ),\n  ~?removeClippedSubviews: option(bool),\n  ~?style: option(BsReactNative.Style.t),\n  ~?testID: option(string),\n  ~?accessibilityComponentType: option(\n    [ `button | `none | `radiobutton_checked | `radiobutton_unchecked ]\n  ),\n  ~?accessibilityLiveRegion: option(\n    [ `none | `polite | `assertive ]\n  ),\n  ~?collapsable: option(bool),\n  ~?importantForAccessibility: option(\n    [ `no | `yes | `noHideDescendants | `auto ]\n  ),\n  ~?needsOffscreenAlphaCompositing: option(bool),\n  ~?renderToHardwareTextureAndroid: option(bool),\n  ~?accessibilityTraits: option(\n    list(\n      [ `frequentUpdates\n| `adjustable\n| `image\n| `button\n| `none\n| `header\n| `plays\n| `text\n| `startsMedia\n| `link\n| `disabled\n| `pageTurn\n| `selected\n| `summary\n| `search\n| `allowsDirectInteraction\n| `key ]\n    )\n  ),\n  ~?accessibilityViewIsModal: option(bool),\n  ~?shouldRasterizeIOS: option(bool),\n  array(ReasonReact.reactElement)\n) => ReasonReact.component(\n  ReasonReact.stateless,\n  ReasonReact.noRetainedProps,\n  unit\n)</h4>", "breadcrumb": "SafeAreaView"},
{"href": "./api/SafeAreaView.html", "title": "SafeAreaView", "contents": "@rest", "rendered": "@rest", "breadcrumb": "SafeAreaView"},
{"href": "./api/SafeAreaView.html", "title": "SafeAreaView", "contents": "@rest", "rendered": "@rest", "breadcrumb": "SafeAreaView"},
{"href": "./api/SafeAreaView.html", "title": "SafeAreaView", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "SafeAreaView"},
{"href": "./api/SafeAreaView.html#SafeAreaView", "title": "SafeAreaView", "contents": "", "rendered": "", "breadcrumb": "SafeAreaView"},
{"href": "./api/RefreshControl.html#value-make", "title": "make", "contents": "make option unit unit  option bool option array string option bool option string option float option string option string option string option ReasonReact reactElement option bool option BsReactNative Types insets option unit unit  option BsReactNative RNEvent NativeLayoutEvent t unit  option unit unit  option BsReactNative Types touchResponderHandlers option option bool option BsReactNative Style t option string option option option bool option option bool option bool option list option bool option bool array ReasonReact reactElement ReasonReact component ReasonReact stateless ReasonReact noRetainedProps unit onRefresh refreshing colors enabled progressBackgroundColor progressViewOffset tintColor title titleColor accessibilityLabel accessible hitSlop onAccessibilityTap onLayout onMagicTap responderHandlers pointerEvents removeClippedSubviews style testID accessibilityComponentType accessibilityLiveRegion collapsable importantForAccessibility needsOffscreenAlphaCompositing renderToHardwareTextureAndroid accessibilityTraits accessibilityViewIsModal shouldRasterizeIOS ", "rendered": "<h4 class='item'>let make: (\n  ~?onRefresh: option(unit => unit),\n  ~?refreshing: option(bool),\n  ~?colors: option(array(string)),\n  ~?enabled: option(bool),\n  ~?progressBackgroundColor: option(string),\n  ~?progressViewOffset: option(float),\n  ~?tintColor: option(string),\n  ~?title: option(string),\n  ~?titleColor: option(string),\n  ~?accessibilityLabel: option(ReasonReact.reactElement),\n  ~?accessible: option(bool),\n  ~?hitSlop: option(BsReactNative.Types.insets),\n  ~?onAccessibilityTap: option(unit => unit),\n  ~?onLayout: option(\n    BsReactNative.RNEvent.NativeLayoutEvent.t => unit\n  ),\n  ~?onMagicTap: option(unit => unit),\n  ~?responderHandlers: option(\n    BsReactNative.Types.touchResponderHandlers\n  ),\n  ~?pointerEvents: option(\n    [ `none | `boxOnly | `auto | `boxNone ]\n  ),\n  ~?removeClippedSubviews: option(bool),\n  ~?style: option(BsReactNative.Style.t),\n  ~?testID: option(string),\n  ~?accessibilityComponentType: option(\n    [ `button | `none | `radiobutton_checked | `radiobutton_unchecked ]\n  ),\n  ~?accessibilityLiveRegion: option(\n    [ `none | `polite | `assertive ]\n  ),\n  ~?collapsable: option(bool),\n  ~?importantForAccessibility: option(\n    [ `no | `yes | `noHideDescendants | `auto ]\n  ),\n  ~?needsOffscreenAlphaCompositing: option(bool),\n  ~?renderToHardwareTextureAndroid: option(bool),\n  ~?accessibilityTraits: option(\n    list(\n      [ `frequentUpdates\n| `adjustable\n| `image\n| `button\n| `header\n| `none\n| `plays\n| `text\n| `startsMedia\n| `disabled\n| `link\n| `pageTurn\n| `selected\n| `allowsDirectInteraction\n| `summary\n| `search\n| `key ]\n    )\n  ),\n  ~?accessibilityViewIsModal: option(bool),\n  ~?shouldRasterizeIOS: option(bool),\n  array(ReasonReact.reactElement)\n) => ReasonReact.component(\n  ReasonReact.stateless,\n  ReasonReact.noRetainedProps,\n  unit\n)</h4>", "breadcrumb": "RefreshControl"},
{"href": "./api/RefreshControl.html", "title": "RefreshControl", "contents": "@rest", "rendered": "@rest", "breadcrumb": "RefreshControl"},
{"href": "./api/RefreshControl.html", "title": "RefreshControl", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "RefreshControl"},
{"href": "./api/RefreshControl.html#RefreshControl", "title": "RefreshControl", "contents": "", "rendered": "", "breadcrumb": "RefreshControl"},
{"href": "./api/Picker.html#value-make", "title": "make", "contents": "make option unit  option option bool option option string option BsReactNative Style t option ReasonReact reactElement option bool option BsReactNative Types insets option unit unit  option BsReactNative RNEvent NativeLayoutEvent t unit  option unit unit  option BsReactNative Types touchResponderHandlers option option bool option BsReactNative Style t option string option option option bool option option bool option bool option list option bool option bool array ReasonReact reactElement ReasonReact component ReasonReact stateless ReasonReact noRetainedProps unit onValueChange selectedValue enabled mode prompt itemStyle accessibilityLabel accessible hitSlop onAccessibilityTap onLayout onMagicTap responderHandlers pointerEvents removeClippedSubviews style testID accessibilityComponentType accessibilityLiveRegion collapsable importantForAccessibility needsOffscreenAlphaCompositing renderToHardwareTextureAndroid accessibilityTraits accessibilityViewIsModal shouldRasterizeIOS ", "rendered": "<h4 class='item'>let make: (\n  ~?onValueChange: option('value => unit),\n  ~?selectedValue: option('value),\n  ~?enabled: option(bool),\n  ~?mode: option([ `dropdown | `dialog ]),\n  ~?prompt: option(string),\n  ~?itemStyle: option(BsReactNative.Style.t),\n  ~?accessibilityLabel: option(ReasonReact.reactElement),\n  ~?accessible: option(bool),\n  ~?hitSlop: option(BsReactNative.Types.insets),\n  ~?onAccessibilityTap: option(unit => unit),\n  ~?onLayout: option(\n    BsReactNative.RNEvent.NativeLayoutEvent.t => unit\n  ),\n  ~?onMagicTap: option(unit => unit),\n  ~?responderHandlers: option(\n    BsReactNative.Types.touchResponderHandlers\n  ),\n  ~?pointerEvents: option(\n    [ `none | `boxOnly | `auto | `boxNone ]\n  ),\n  ~?removeClippedSubviews: option(bool),\n  ~?style: option(BsReactNative.Style.t),\n  ~?testID: option(string),\n  ~?accessibilityComponentType: option(\n    [ `button | `none | `radiobutton_checked | `radiobutton_unchecked ]\n  ),\n  ~?accessibilityLiveRegion: option(\n    [ `none | `polite | `assertive ]\n  ),\n  ~?collapsable: option(bool),\n  ~?importantForAccessibility: option(\n    [ `no | `yes | `noHideDescendants | `auto ]\n  ),\n  ~?needsOffscreenAlphaCompositing: option(bool),\n  ~?renderToHardwareTextureAndroid: option(bool),\n  ~?accessibilityTraits: option(\n    list(\n      [ `frequentUpdates\n| `adjustable\n| `image\n| `button\n| `header\n| `none\n| `plays\n| `text\n| `startsMedia\n| `disabled\n| `link\n| `pageTurn\n| `selected\n| `allowsDirectInteraction\n| `summary\n| `search\n| `key ]\n    )\n  ),\n  ~?accessibilityViewIsModal: option(bool),\n  ~?shouldRasterizeIOS: option(bool),\n  array(ReasonReact.reactElement)\n) => ReasonReact.component(\n  ReasonReact.stateless,\n  ReasonReact.noRetainedProps,\n  unit\n)</h4>", "breadcrumb": "Picker"},
{"href": "./api/Picker.html#value-Item.make", "title": "Item.make", "contents": "make option string option string option option string array ReasonReact reactElement ReasonReact component ReasonReact stateless ReasonReact noRetainedProps unit color label value testID ", "rendered": "<h4 class='item'>let make: (\n  ~?color: option(string),\n  ~?label: option(string),\n  ~?value: option('value),\n  ~?testID: option(string),\n  array(ReasonReact.reactElement)\n) => ReasonReact.component(\n  ReasonReact.stateless,\n  ReasonReact.noRetainedProps,\n  unit\n)</h4>", "breadcrumb": "Picker"},
{"href": "./api/Picker.html#module-Item", "title": "Item", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Picker"},
{"href": "./api/Picker.html#module-Item", "title": "Item", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Picker"},
{"href": "./api/Picker.html", "title": "Picker", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Picker"},
{"href": "./api/Picker.html", "title": "Picker", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Picker"},
{"href": "./api/Picker.html#Picker", "title": "Picker", "contents": "", "rendered": "", "breadcrumb": "Picker"},
{"href": "./api/Modal.html#value-make", "title": "make", "contents": "make option option unit unit  option bool option bool option bool option unit unit  option unit unit  option array array ReasonReact reactElement ReasonReact component ReasonReact stateless ReasonReact noRetainedProps unit animationType onShow transparent visible hardwareAccelerated onRequestClose onOrientationChange supportedOrientations ", "rendered": "<h4 class='item'>let make: (\n  ~?animationType: option([ `none | `fade | `slide ]),\n  ~?onShow: option(unit => unit),\n  ~?transparent: option(bool),\n  ~?visible: option(bool),\n  ~?hardwareAccelerated: option(bool),\n  ~?onRequestClose: option(unit => unit),\n  ~?onOrientationChange: option(unit => unit),\n  ~?supportedOrientations: option(\n    array(\n      [ `portrait\n| `landscapeLeft\n| `portraitUpsideDown\n| `landscapeRight\n| `landscape ]\n    )\n  ),\n  array(ReasonReact.reactElement)\n) => ReasonReact.component(\n  ReasonReact.stateless,\n  ReasonReact.noRetainedProps,\n  unit\n)</h4>", "breadcrumb": "Modal"},
{"href": "./api/Modal.html", "title": "Modal", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Modal"},
{"href": "./api/Modal.html", "title": "Modal", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Modal"},
{"href": "./api/Modal.html#Modal", "title": "Modal", "contents": "", "rendered": "", "breadcrumb": "Modal"},
{"href": "./api/KeyboardAvoidingView.html#value-make", "title": "make", "contents": "make option string option bool option BsReactNative Types insets option unit unit  option BsReactNative RNEvent NativeLayoutEvent t unit  option unit unit  option BsReactNative Types touchResponderHandlers option option bool option BsReactNative Style t option string option option option bool option option bool option bool option list option bool option bool option float option option BsReactNative Style t array ReasonReact reactElement ReasonReact component ReasonReact stateless ReasonReact noRetainedProps unit accessibilityLabel accessible hitSlop onAccessibilityTap onLayout onMagicTap responderHandlers pointerEvents removeClippedSubviews style testID accessibilityComponentType accessibilityLiveRegion collapsable importantForAccessibility needsOffscreenAlphaCompositing renderToHardwareTextureAndroid accessibilityTraits accessibilityViewIsModal shouldRasterizeIOS keyboardVerticalOffset behavior contentContainerStyle ", "rendered": "<h4 class='item'>let make: (\n  ~?accessibilityLabel: option(string),\n  ~?accessible: option(bool),\n  ~?hitSlop: option(BsReactNative.Types.insets),\n  ~?onAccessibilityTap: option(unit => unit),\n  ~?onLayout: option(\n    BsReactNative.RNEvent.NativeLayoutEvent.t => unit\n  ),\n  ~?onMagicTap: option(unit => unit),\n  ~?responderHandlers: option(\n    BsReactNative.Types.touchResponderHandlers\n  ),\n  ~?pointerEvents: option(\n    [ `none | `boxOnly | `auto | `boxNone ]\n  ),\n  ~?removeClippedSubviews: option(bool),\n  ~?style: option(BsReactNative.Style.t),\n  ~?testID: option(string),\n  ~?accessibilityComponentType: option(\n    [ `button | `none | `radiobutton_checked | `radiobutton_unchecked ]\n  ),\n  ~?accessibilityLiveRegion: option(\n    [ `none | `polite | `assertive ]\n  ),\n  ~?collapsable: option(bool),\n  ~?importantForAccessibility: option(\n    [ `no | `yes | `noHideDescendants | `auto ]\n  ),\n  ~?needsOffscreenAlphaCompositing: option(bool),\n  ~?renderToHardwareTextureAndroid: option(bool),\n  ~?accessibilityTraits: option(\n    list(\n      [ `frequentUpdates\n| `adjustable\n| `image\n| `button\n| `none\n| `header\n| `plays\n| `text\n| `startsMedia\n| `link\n| `disabled\n| `pageTurn\n| `selected\n| `summary\n| `search\n| `allowsDirectInteraction\n| `key ]\n    )\n  ),\n  ~?accessibilityViewIsModal: option(bool),\n  ~?shouldRasterizeIOS: option(bool),\n  ~?keyboardVerticalOffset: option(float),\n  ~?behavior: option([ `height | `padding | `position ]),\n  ~?contentContainerStyle: option(BsReactNative.Style.t),\n  array(ReasonReact.reactElement)\n) => ReasonReact.component(\n  ReasonReact.stateless,\n  ReasonReact.noRetainedProps,\n  unit\n)</h4>", "breadcrumb": "KeyboardAvoidingView"},
{"href": "./api/KeyboardAvoidingView.html", "title": "KeyboardAvoidingView", "contents": "@rest", "rendered": "@rest", "breadcrumb": "KeyboardAvoidingView"},
{"href": "./api/KeyboardAvoidingView.html", "title": "KeyboardAvoidingView", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "KeyboardAvoidingView"},
{"href": "./api/KeyboardAvoidingView.html#KeyboardAvoidingView", "title": "KeyboardAvoidingView", "contents": "", "rendered": "", "breadcrumb": "KeyboardAvoidingView"},
{"href": "./api/ImageBackground.html#value-make", "title": "make", "contents": "make option error unit  option BsReactNative RNEvent NativeLayoutEvent t unit  option unit unit  option unit unit  option unit unit  option option BsReactNative Image imageSource option BsReactNative Style t option BsReactNative Style t option string option option string option bool option float option BsReactNative Types insets option BsReactNative Image defaultSource option unit unit  option progress unit  array ReasonReact reactElement ReasonReact component ReasonReact stateless ReasonReact noRetainedProps unit onError onLayout onLoad onLoadEnd onLoadStart resizeMode source style imageStyle testID resizeMethod accessibilityLabel accessible blurRadius capInsets defaultSource onPartialLoad onProgress ", "rendered": "<h4 class='item'>let make: (\n  ~?onError: option(<a href=\"./api/ImageBackground.html#type-Event.error\" title=\"Event.error\">error</a> => unit),\n  ~?onLayout: option(\n    BsReactNative.RNEvent.NativeLayoutEvent.t => unit\n  ),\n  ~?onLoad: option(unit => unit),\n  ~?onLoadEnd: option(unit => unit),\n  ~?onLoadStart: option(unit => unit),\n  ~?resizeMode: option(\n    [&lt; `repeat | `stretch | `cover | `contain | `center ]\n  ),\n  ~?source: option(BsReactNative.Image.imageSource),\n  ~?style: option(BsReactNative.Style.t),\n  ~?imageStyle: option(BsReactNative.Style.t),\n  ~?testID: option(string),\n  ~?resizeMethod: option([&lt; `scale | `resize | `auto ]),\n  ~?accessibilityLabel: option(string),\n  ~?accessible: option(bool),\n  ~?blurRadius: option(float),\n  ~?capInsets: option(BsReactNative.Types.insets),\n  ~?defaultSource: option(\n    BsReactNative.Image.defaultSource\n  ),\n  ~?onPartialLoad: option(unit => unit),\n  ~?onProgress: option(<a href=\"./api/ImageBackground.html#type-Event.progress\" title=\"Event.progress\">progress</a> => unit),\n  array(ReasonReact.reactElement)\n) => ReasonReact.component(\n  ReasonReact.stateless,\n  ReasonReact.noRetainedProps,\n  unit\n)</h4>", "breadcrumb": "ImageBackground"},
{"href": "./api/ImageBackground.html#type-Event.progress", "title": "Event.progress", "contents": "progress loaded float total float", "rendered": "<h4 class='item'>type progress = {loaded: float, total: float}</h4>", "breadcrumb": "ImageBackground"},
{"href": "./api/ImageBackground.html#type-Event.error", "title": "Event.error", "contents": "error ", "rendered": "<h4 class='item'>type error</h4>", "breadcrumb": "ImageBackground"},
{"href": "./api/ImageBackground.html#module-Event", "title": "Event", "contents": "@rest", "rendered": "@rest", "breadcrumb": "ImageBackground"},
{"href": "./api/ImageBackground.html#module-Event", "title": "Event", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ImageBackground"},
{"href": "./api/ImageBackground.html", "title": "ImageBackground", "contents": "@rest", "rendered": "@rest", "breadcrumb": "ImageBackground"},
{"href": "./api/ImageBackground.html", "title": "ImageBackground", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ImageBackground"},
{"href": "./api/ImageBackground.html#ImageBackground", "title": "ImageBackground", "contents": "", "rendered": "", "breadcrumb": "ImageBackground"},
{"href": "./api/Image.html#value-make", "title": "make", "contents": "make option Event error unit  option BsReactNative RNEvent NativeLayoutEvent t unit  option unit unit  option unit unit  option unit unit  option option imageSource option BsReactNative Style t option string option option string option bool option float option BsReactNative Types insets option defaultSource option unit unit  option Event progress unit  array ReasonReact reactElement ReasonReact component ReasonReact stateless ReasonReact noRetainedProps unit onError onLayout onLoad onLoadEnd onLoadStart resizeMode source style testID resizeMethod accessibilityLabel accessible blurRadius capInsets defaultSource onPartialLoad onProgress ", "rendered": "<h4 class='item'>let make: (\n  ~?onError: option(Event.error => unit),\n  ~?onLayout: option(\n    BsReactNative.RNEvent.NativeLayoutEvent.t => unit\n  ),\n  ~?onLoad: option(unit => unit),\n  ~?onLoadEnd: option(unit => unit),\n  ~?onLoadStart: option(unit => unit),\n  ~?resizeMode: option(\n    [&lt; `repeat | `stretch | `cover | `contain | `center ]\n  ),\n  ~?source: option(<a href=\"./api/Image.html#type-imageSource\">imageSource</a>),\n  ~?style: option(BsReactNative.Style.t),\n  ~?testID: option(string),\n  ~?resizeMethod: option([&lt; `scale | `resize | `auto ]),\n  ~?accessibilityLabel: option(string),\n  ~?accessible: option(bool),\n  ~?blurRadius: option(float),\n  ~?capInsets: option(BsReactNative.Types.insets),\n  ~?defaultSource: option(<a href=\"./api/Image.html#type-defaultSource\">defaultSource</a>),\n  ~?onPartialLoad: option(unit => unit),\n  ~?onProgress: option(Event.progress => unit),\n  array(ReasonReact.reactElement)\n) => ReasonReact.component(\n  ReasonReact.stateless,\n  ReasonReact.noRetainedProps,\n  unit\n)</h4>", "breadcrumb": "Image"},
{"href": "./api/Image.html#type-Event.progress", "title": "Event.progress", "contents": "progress loaded float total float", "rendered": "<h4 class='item'>type progress = {loaded: float, total: float}</h4>", "breadcrumb": "Image"},
{"href": "./api/Image.html#type-Event.error", "title": "Event.error", "contents": "error ", "rendered": "<h4 class='item'>type error</h4>", "breadcrumb": "Image"},
{"href": "./api/Image.html#module-Event", "title": "Event", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Image"},
{"href": "./api/Image.html#module-Event", "title": "Event", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Image"},
{"href": "./api/Image.html", "title": "Image", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Image"},
{"href": "./api/Image.html", "title": "Image", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Image"},
{"href": "./api/Image.html", "title": "Image", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Image"},
{"href": "./api/Image.html#Image", "title": "Image", "contents": "", "rendered": "", "breadcrumb": "Image"},
{"href": "./api/FlatList.html#value-make", "title": "make", "contents": "make array renderItem int string   option separatorComponent option bool option ReasonReact reactElement option ReasonReact reactElement option BsReactNative Style t option option option array int Js t   option bool option int option int option bool option option Js t unit  option float option unit unit  option Js t option option bool option bool option bool option bool option bool option bool option int option int option Js t option BsReactNative RNEvent NativeScrollEvent t unit  option BsReactNative Style t array ReasonReact reactElement ReasonReact component ReasonReact stateless ReasonReact noRetainedProps unit data renderItem keyExtractor itemSeparatorComponent bounces listFooterComponent listHeaderComponent columnWrapperStyle extraData getItemLayout horizontal initialNumToRender initialScrollIndex inverted numColumns onEndReached onEndReachedThreshold onRefresh onViewableItemsChanged overScrollMode pagingEnabled refreshing removeClippedSubviews scrollEnabled showsHorizontalScrollIndicator showsVerticalScrollIndicator windowSize maxToRenderPerBatch viewabilityConfig onScroll style ", "rendered": "<h4 class='item'>let make: (\n  ~data: array('item),\n  ~renderItem: <a href=\"./api/FlatList.html#type-renderItem\">renderItem</a>('item),\n  ~keyExtractor: ('item, int) => string,\n  ~?itemSeparatorComponent: option(\n    <a href=\"./api/FlatList.html#type-separatorComponent\">separatorComponent</a>('item)\n  ),\n  ~?bounces: option(bool),\n  ~?listFooterComponent: option(ReasonReact.reactElement),\n  ~?listHeaderComponent: option(ReasonReact.reactElement),\n  ~?columnWrapperStyle: option(BsReactNative.Style.t),\n  ~?extraData: option('any),\n  ~?getItemLayout: option(\n    (option(array('item)), int) => Js.t(\n      &lt; index : int; length : int; offset : int &gt;\n    )\n  ),\n  ~?horizontal: option(bool),\n  ~?initialNumToRender: option(int),\n  ~?initialScrollIndex: option(int),\n  ~?inverted: option(bool),\n  ~?numColumns: option('int),\n  ~?onEndReached: option(\n    Js.t(&lt; distanceFromEnd : float &gt;) => unit\n  ),\n  ~?onEndReachedThreshold: option(float),\n  ~?onRefresh: option(unit => unit),\n  ~?onViewableItemsChanged: option(\n    Js.t(\n      &lt; changed : &lt; index : int Js.undefined; isViewable : bool; item : 'item2;\n              key : string; section : &lt;  &gt; Js.t &gt;\n            Js.t array;\n  viewableItems : &lt; index : int Js.undefined; isViewable : bool;\n                    item : 'item2; key : string; section : &lt;  &gt; Js.t &gt;\n                  Js.t array &gt;\n    )\n  ),\n  ~?overScrollMode: option([ `never | `auto | `always ]),\n  ~?pagingEnabled: option(bool),\n  ~?refreshing: option(bool),\n  ~?removeClippedSubviews: option(bool),\n  ~?scrollEnabled: option(bool),\n  ~?showsHorizontalScrollIndicator: option(bool),\n  ~?showsVerticalScrollIndicator: option(bool),\n  ~?windowSize: option(int),\n  ~?maxToRenderPerBatch: option(int),\n  ~?viewabilityConfig: option(Js.t(&lt;  &gt;)),\n  ~?onScroll: option(\n    BsReactNative.RNEvent.NativeScrollEvent.t => unit\n  ),\n  ~?style: option(BsReactNative.Style.t),\n  array(ReasonReact.reactElement)\n) => ReasonReact.component(\n  ReasonReact.stateless,\n  ReasonReact.noRetainedProps,\n  unit\n)</h4>", "breadcrumb": "FlatList"},
{"href": "./api/FlatList.html#value-separatorComponent", "title": "separatorComponent", "contents": "separatorComponent separatorProps ReasonReact reactElement  separatorComponent ", "rendered": "<h4 class='item'>let separatorComponent: <a href=\"./api/FlatList.html#type-separatorProps\">separatorProps</a>(\n  'item\n) => ReasonReact.reactElement => <a href=\"./api/FlatList.html#type-separatorComponent\">separatorComponent</a>('item)</h4>", "breadcrumb": "FlatList"},
{"href": "./api/FlatList.html#type-separatorProps", "title": "separatorProps", "contents": "separatorProps highlighted bool leadingItem option", "rendered": "<h4 class='item'>type separatorProps('item) = {\n  highlighted: bool,\n  leadingItem: option('item)\n}</h4>", "breadcrumb": "FlatList"},
{"href": "./api/FlatList.html#type-separatorComponent", "title": "separatorComponent", "contents": "separatorComponent ", "rendered": "<h4 class='item'>type separatorComponent('item)</h4>", "breadcrumb": "FlatList"},
{"href": "./api/FlatList.html#value-renderItem", "title": "renderItem", "contents": "renderItem renderBag ReasonReact reactElement  renderItem ", "rendered": "<h4 class='item'>let renderItem: <a href=\"./api/FlatList.html#type-renderBag\">renderBag</a>(\n  'item\n) => ReasonReact.reactElement => <a href=\"./api/FlatList.html#type-renderItem\">renderItem</a>('item)</h4>", "breadcrumb": "FlatList"},
{"href": "./api/FlatList.html#type-renderItem", "title": "renderItem", "contents": "renderItem ", "rendered": "<h4 class='item'>type renderItem('item)</h4>", "breadcrumb": "FlatList"},
{"href": "./api/FlatList.html#type-renderBag", "title": "renderBag", "contents": "renderBag item index int", "rendered": "<h4 class='item'>type renderBag('item) = {item: 'item, index: int}</h4>", "breadcrumb": "FlatList"},
{"href": "./api/FlatList.html#value-recordInteraction", "title": "recordInteraction", "contents": "recordInteraction ReasonReact reactRef unit ", "rendered": "<h4 class='item'>let recordInteraction: ReasonReact.reactRef => unit</h4>", "breadcrumb": "FlatList"},
{"href": "./api/FlatList.html#value-scrollToOffset", "title": "scrollToOffset", "contents": "scrollToOffset ReasonReact reactRef option int option bool unit unit  offset animated ", "rendered": "<h4 class='item'>let scrollToOffset: (\n  ReasonReact.reactRef,\n  ~?offset: option(int),\n  ~?animated: option(bool),\n  unit\n) => unit</h4>", "breadcrumb": "FlatList"},
{"href": "./api/FlatList.html#value-scrollToItem", "title": "scrollToItem", "contents": "scrollToItem ReasonReact reactRef option bool option int unit unit  item animated viewPosition ", "rendered": "<h4 class='item'>let scrollToItem: (\n  ReasonReact.reactRef,\n  ~item: 'item,\n  ~?animated: option(bool),\n  ~?viewPosition: option(int),\n  unit\n) => unit</h4>", "breadcrumb": "FlatList"},
{"href": "./api/FlatList.html#value-scrollToIndex", "title": "scrollToIndex", "contents": "scrollToIndex ReasonReact reactRef int option bool option int option int unit unit  index animated viewOffset viewPosition ", "rendered": "<h4 class='item'>let scrollToIndex: (\n  ReasonReact.reactRef,\n  ~index: int,\n  ~?animated: option(bool),\n  ~?viewOffset: option(int),\n  ~?viewPosition: option(int),\n  unit\n) => unit</h4>", "breadcrumb": "FlatList"},
{"href": "./api/FlatList.html#value-scrollToEnd", "title": "scrollToEnd", "contents": "scrollToEnd ReasonReact reactRef bool unit  animated", "rendered": "<h4 class='item'>let scrollToEnd: (\n  ReasonReact.reactRef,\n  ~animated: bool\n) => unit</h4>", "breadcrumb": "FlatList"},
{"href": "./api/FlatList.html", "title": "FlatList", "contents": "@rest", "rendered": "@rest", "breadcrumb": "FlatList"},
{"href": "./api/FlatList.html", "title": "FlatList", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "FlatList"},
{"href": "./api/FlatList.html#FlatList", "title": "FlatList", "contents": "", "rendered": "", "breadcrumb": "FlatList"},
{"href": "./api/DatePickerIOS.html#value-make", "title": "make", "contents": "make option Js Date t option Js Date t unit  option Js Date t option Js Date t option option int option int option ReasonReact reactElement option bool option BsReactNative Types insets option unit unit  option BsReactNative RNEvent NativeLayoutEvent t unit  option unit unit  option BsReactNative Types touchResponderHandlers option option bool option BsReactNative Style t option string option option option bool option option bool option bool option list option bool option bool array ReasonReact reactElement ReasonReact component ReasonReact stateless ReasonReact noRetainedProps unit date onDateChange maximumDate minimumDate mode minuteInterval timeZoneOffsetInMinutes accessibilityLabel accessible hitSlop onAccessibilityTap onLayout onMagicTap responderHandlers pointerEvents removeClippedSubviews style testID accessibilityComponentType accessibilityLiveRegion collapsable importantForAccessibility needsOffscreenAlphaCompositing renderToHardwareTextureAndroid accessibilityTraits accessibilityViewIsModal shouldRasterizeIOS ", "rendered": "<h4 class='item'>let make: (\n  ~?date: option(Js.Date.t),\n  ~?onDateChange: option(Js.Date.t => unit),\n  ~?maximumDate: option(Js.Date.t),\n  ~?minimumDate: option(Js.Date.t),\n  ~?mode: option([ `time | `date | `datetime ]),\n  ~?minuteInterval: option(int),\n  ~?timeZoneOffsetInMinutes: option(int),\n  ~?accessibilityLabel: option(ReasonReact.reactElement),\n  ~?accessible: option(bool),\n  ~?hitSlop: option(BsReactNative.Types.insets),\n  ~?onAccessibilityTap: option(unit => unit),\n  ~?onLayout: option(\n    BsReactNative.RNEvent.NativeLayoutEvent.t => unit\n  ),\n  ~?onMagicTap: option(unit => unit),\n  ~?responderHandlers: option(\n    BsReactNative.Types.touchResponderHandlers\n  ),\n  ~?pointerEvents: option(\n    [ `none | `boxOnly | `auto | `boxNone ]\n  ),\n  ~?removeClippedSubviews: option(bool),\n  ~?style: option(BsReactNative.Style.t),\n  ~?testID: option(string),\n  ~?accessibilityComponentType: option(\n    [ `button | `none | `radiobutton_checked | `radiobutton_unchecked ]\n  ),\n  ~?accessibilityLiveRegion: option(\n    [ `none | `polite | `assertive ]\n  ),\n  ~?collapsable: option(bool),\n  ~?importantForAccessibility: option(\n    [ `no | `yes | `noHideDescendants | `auto ]\n  ),\n  ~?needsOffscreenAlphaCompositing: option(bool),\n  ~?renderToHardwareTextureAndroid: option(bool),\n  ~?accessibilityTraits: option(\n    list(\n      [ `frequentUpdates\n| `adjustable\n| `image\n| `button\n| `header\n| `none\n| `plays\n| `text\n| `startsMedia\n| `disabled\n| `link\n| `pageTurn\n| `selected\n| `allowsDirectInteraction\n| `summary\n| `search\n| `key ]\n    )\n  ),\n  ~?accessibilityViewIsModal: option(bool),\n  ~?shouldRasterizeIOS: option(bool),\n  array(ReasonReact.reactElement)\n) => ReasonReact.component(\n  ReasonReact.stateless,\n  ReasonReact.noRetainedProps,\n  unit\n)</h4>", "breadcrumb": "DatePickerIOS"},
{"href": "./api/DatePickerIOS.html", "title": "DatePickerIOS", "contents": "@rest", "rendered": "@rest", "breadcrumb": "DatePickerIOS"},
{"href": "./api/DatePickerIOS.html", "title": "DatePickerIOS", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "DatePickerIOS"},
{"href": "./api/DatePickerIOS.html#DatePickerIOS", "title": "DatePickerIOS", "contents": "", "rendered": "", "breadcrumb": "DatePickerIOS"},
{"href": "./api/Button.html#value-make", "title": "make", "contents": "make option string option string option bool option unit unit  option string option string array ReasonReact reactElement ReasonReact component ReasonReact stateless ReasonReact noRetainedProps unit accessibilityLabel color disabled onPress testID title ", "rendered": "<h4 class='item'>let make: (\n  ~?accessibilityLabel: option(string),\n  ~?color: option(string),\n  ~?disabled: option(bool),\n  ~?onPress: option(unit => unit),\n  ~?testID: option(string),\n  ~?title: option(string),\n  array(ReasonReact.reactElement)\n) => ReasonReact.component(\n  ReasonReact.stateless,\n  ReasonReact.noRetainedProps,\n  unit\n)</h4>", "breadcrumb": "Button"},
{"href": "./api/Button.html", "title": "Button", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Button"},
{"href": "./api/Button.html", "title": "Button", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Button"},
{"href": "./api/Button.html#Button", "title": "Button", "contents": "", "rendered": "", "breadcrumb": "Button"},
{"href": "./api/AnimatedComponents.html#value-ScrollView.make", "title": "ScrollView.make", "contents": "make option ReasonReact reactElement option bool option BsReactNative Types insets option unit unit  option BsReactNative RNEvent NativeLayoutEvent t unit  option unit unit  option BsReactNative Types touchResponderHandlers option option bool option BsReactNative Style t option string option option option bool option option bool option bool option list option bool option bool option BsReactNative Style t option bool option option option float float unit  option BsReactNative RNEvent NativeScrollEvent t unit  option bool option ReasonReact reactElement option bool option bool option bool option list int option option string option bool option bool option bool option bool option bool option bool option BsReactNative Types insets option point option option bool option option float option float option unit unit  option int option BsReactNative Types insets option bool option option float array ReasonReact reactElement ReasonReact component ReasonReact stateless ReasonReact noRetainedProps unit accessibilityLabel accessible hitSlop onAccessibilityTap onLayout onMagicTap responderHandlers pointerEvents removeClippedSubviews style testID accessibilityComponentType accessibilityLiveRegion collapsable importantForAccessibility needsOffscreenAlphaCompositing renderToHardwareTextureAndroid accessibilityTraits accessibilityViewIsModal shouldRasterizeIOS contentContainerStyle horizontal keyboardDismissMode keyboardShouldPersistTaps onContentSizeChange onScroll pagingEnabled refreshControl scrollEnabled showsHorizontalScrollIndicator showsVerticalScrollIndicator stickyHeaderIndices overScrollMode scrollPerfTag alwaysBounceHorizontal alwaysBounceVertical automaticallyAdjustContentInsets bounces canCancelContentTouches centerContent contentInset contentOffset decelerationRate directionalLockEnabled indicatorStyle maximumZoomScale minimumZoomScale onScrollAnimationEnd scrollEventThrottle scrollIndicatorInsets scrollsToTop snapToAlignment zoomScale ", "rendered": "<h4 class='item'>let make: (\n  ~?accessibilityLabel: option(ReasonReact.reactElement),\n  ~?accessible: option(bool),\n  ~?hitSlop: option(BsReactNative.Types.insets),\n  ~?onAccessibilityTap: option(unit => unit),\n  ~?onLayout: option(\n    BsReactNative.RNEvent.NativeLayoutEvent.t => unit\n  ),\n  ~?onMagicTap: option(unit => unit),\n  ~?responderHandlers: option(\n    BsReactNative.Types.touchResponderHandlers\n  ),\n  ~?pointerEvents: option(\n    [ `none | `boxOnly | `auto | `boxNone ]\n  ),\n  ~?removeClippedSubviews: option(bool),\n  ~?style: option(BsReactNative.Style.t),\n  ~?testID: option(string),\n  ~?accessibilityComponentType: option(\n    [ `button | `none | `radiobutton_checked | `radiobutton_unchecked ]\n  ),\n  ~?accessibilityLiveRegion: option(\n    [ `none | `polite | `assertive ]\n  ),\n  ~?collapsable: option(bool),\n  ~?importantForAccessibility: option(\n    [ `no | `yes | `noHideDescendants | `auto ]\n  ),\n  ~?needsOffscreenAlphaCompositing: option(bool),\n  ~?renderToHardwareTextureAndroid: option(bool),\n  ~?accessibilityTraits: option(\n    list(\n      [ `frequentUpdates\n| `adjustable\n| `image\n| `button\n| `none\n| `header\n| `plays\n| `text\n| `startsMedia\n| `link\n| `disabled\n| `pageTurn\n| `selected\n| `summary\n| `search\n| `allowsDirectInteraction\n| `key ]\n    )\n  ),\n  ~?accessibilityViewIsModal: option(bool),\n  ~?shouldRasterizeIOS: option(bool),\n  ~?contentContainerStyle: option(BsReactNative.Style.t),\n  ~?horizontal: option(bool),\n  ~?keyboardDismissMode: option(\n    [ `interactive | `none | `onDrag ]\n  ),\n  ~?keyboardShouldPersistTaps: option(\n    [ `never | `handled | `always ]\n  ),\n  ~?onContentSizeChange: option((float, float) => unit),\n  ~?onScroll: option(\n    BsReactNative.RNEvent.NativeScrollEvent.t => unit\n  ),\n  ~?pagingEnabled: option(bool),\n  ~?refreshControl: option(ReasonReact.reactElement),\n  ~?scrollEnabled: option(bool),\n  ~?showsHorizontalScrollIndicator: option(bool),\n  ~?showsVerticalScrollIndicator: option(bool),\n  ~?stickyHeaderIndices: option(list(int)),\n  ~?overScrollMode: option([ `never | `auto | `always ]),\n  ~?scrollPerfTag: option(string),\n  ~?alwaysBounceHorizontal: option(bool),\n  ~?alwaysBounceVertical: option(bool),\n  ~?automaticallyAdjustContentInsets: option(bool),\n  ~?bounces: option(bool),\n  ~?canCancelContentTouches: option(bool),\n  ~?centerContent: option(bool),\n  ~?contentInset: option(BsReactNative.Types.insets),\n  ~?contentOffset: option(<a href=\"./api/AnimatedComponents.html#type-ScrollView.point\">point</a>),\n  ~?decelerationRate: option([ `normal | `fast ]),\n  ~?directionalLockEnabled: option(bool),\n  ~?indicatorStyle: option([ `white | `black | `default ]),\n  ~?maximumZoomScale: option(float),\n  ~?minimumZoomScale: option(float),\n  ~?onScrollAnimationEnd: option(unit => unit),\n  ~?scrollEventThrottle: option(int),\n  ~?scrollIndicatorInsets: option(\n    BsReactNative.Types.insets\n  ),\n  ~?scrollsToTop: option(bool),\n  ~?snapToAlignment: option([ `start | `center | `end_ ]),\n  ~?zoomScale: option(float),\n  array(ReasonReact.reactElement)\n) => ReasonReact.component(\n  ReasonReact.stateless,\n  ReasonReact.noRetainedProps,\n  unit\n)</h4>", "breadcrumb": "AnimatedComponents"},
{"href": "./api/AnimatedComponents.html#value-ScrollView.scrollToEnd", "title": "ScrollView.scrollToEnd", "contents": "scrollToEnd ReasonReact reactRef bool unit  animated", "rendered": "<h4 class='item'>let scrollToEnd: (\n  ReasonReact.reactRef,\n  ~animated: bool\n) => unit</h4>", "breadcrumb": "AnimatedComponents"},
{"href": "./api/AnimatedComponents.html#value-ScrollView.scrollTo", "title": "ScrollView.scrollTo", "contents": "scrollTo ReasonReact reactRef int int bool unit  x y animated", "rendered": "<h4 class='item'>let scrollTo: (\n  ReasonReact.reactRef,\n  ~x: int,\n  ~y: int,\n  ~animated: bool\n) => unit</h4>", "breadcrumb": "AnimatedComponents"},
{"href": "./api/AnimatedComponents.html#type-ScrollView.point", "title": "ScrollView.point", "contents": "point x float y float", "rendered": "<h4 class='item'>type point = {x: float, y: float}</h4>", "breadcrumb": "AnimatedComponents"},
{"href": "./api/AnimatedComponents.html#value-ScrollView.onScrollUpdater", "title": "ScrollView.onScrollUpdater", "contents": "onScrollUpdater option option option bool unit BsReactNative RNEvent NativeScrollEvent t unit x y native  ", "rendered": "<h4 class='item'>let onScrollUpdater: (\n  ~?x: option('a),\n  ~?y: option('b),\n  ~?native: option(bool),\n  unit,\n  BsReactNative.RNEvent.NativeScrollEvent.t\n) => unit</h4>", "breadcrumb": "AnimatedComponents"},
{"href": "./api/AnimatedComponents.html#module-ScrollView", "title": "ScrollView", "contents": "@rest", "rendered": "@rest", "breadcrumb": "AnimatedComponents"},
{"href": "./api/AnimatedComponents.html#module-ScrollView", "title": "ScrollView", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "AnimatedComponents"},
{"href": "./api/AnimatedComponents.html", "title": "AnimatedComponents", "contents": "@rest", "rendered": "@rest", "breadcrumb": "AnimatedComponents"},
{"href": "./api/AnimatedComponents.html", "title": "AnimatedComponents", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "AnimatedComponents"},
{"href": "./api/AnimatedComponents.html#AnimatedComponents", "title": "AnimatedComponents", "contents": "", "rendered": "", "breadcrumb": "AnimatedComponents"},
{"href": "./api/ActivityIndicator.html#value-make", "title": "make", "contents": "make option bool option string option option bool option ReasonReact reactElement option bool option BsReactNative Types insets option unit unit  option BsReactNative RNEvent NativeLayoutEvent t unit  option unit unit  option BsReactNative Types touchResponderHandlers option option bool option BsReactNative Style t option string option option option bool option option bool option bool option list option bool option bool array ReasonReact reactElement ReasonReact component ReasonReact stateless ReasonReact noRetainedProps unit animating color size hidesWhenStopped accessibilityLabel accessible hitSlop onAccessibilityTap onLayout onMagicTap responderHandlers pointerEvents removeClippedSubviews style testID accessibilityComponentType accessibilityLiveRegion collapsable importantForAccessibility needsOffscreenAlphaCompositing renderToHardwareTextureAndroid accessibilityTraits accessibilityViewIsModal shouldRasterizeIOS ", "rendered": "<h4 class='item'>let make: (\n  ~?animating: option(bool),\n  ~?color: option(string),\n  ~?size: option([ `small | `large | `exact of int ]),\n  ~?hidesWhenStopped: option(bool),\n  ~?accessibilityLabel: option(ReasonReact.reactElement),\n  ~?accessible: option(bool),\n  ~?hitSlop: option(BsReactNative.Types.insets),\n  ~?onAccessibilityTap: option(unit => unit),\n  ~?onLayout: option(\n    BsReactNative.RNEvent.NativeLayoutEvent.t => unit\n  ),\n  ~?onMagicTap: option(unit => unit),\n  ~?responderHandlers: option(\n    BsReactNative.Types.touchResponderHandlers\n  ),\n  ~?pointerEvents: option(\n    [ `none | `boxOnly | `auto | `boxNone ]\n  ),\n  ~?removeClippedSubviews: option(bool),\n  ~?style: option(BsReactNative.Style.t),\n  ~?testID: option(string),\n  ~?accessibilityComponentType: option(\n    [ `button | `none | `radiobutton_checked | `radiobutton_unchecked ]\n  ),\n  ~?accessibilityLiveRegion: option(\n    [ `none | `polite | `assertive ]\n  ),\n  ~?collapsable: option(bool),\n  ~?importantForAccessibility: option(\n    [ `no | `yes | `noHideDescendants | `auto ]\n  ),\n  ~?needsOffscreenAlphaCompositing: option(bool),\n  ~?renderToHardwareTextureAndroid: option(bool),\n  ~?accessibilityTraits: option(\n    list(\n      [ `frequentUpdates\n| `adjustable\n| `image\n| `button\n| `header\n| `none\n| `plays\n| `text\n| `startsMedia\n| `disabled\n| `link\n| `pageTurn\n| `selected\n| `allowsDirectInteraction\n| `summary\n| `search\n| `key ]\n    )\n  ),\n  ~?accessibilityViewIsModal: option(bool),\n  ~?shouldRasterizeIOS: option(bool),\n  array(ReasonReact.reactElement)\n) => ReasonReact.component(\n  ReasonReact.stateless,\n  ReasonReact.noRetainedProps,\n  unit\n)</h4>", "breadcrumb": "ActivityIndicator"},
{"href": "./api/ActivityIndicator.html", "title": "ActivityIndicator", "contents": "@rest", "rendered": "@rest", "breadcrumb": "ActivityIndicator"},
{"href": "./api/ActivityIndicator.html", "title": "ActivityIndicator", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ActivityIndicator"},
{"href": "./api/ActivityIndicator.html#ActivityIndicator", "title": "ActivityIndicator", "contents": "", "rendered": "", "breadcrumb": "ActivityIndicator"},
{"href": "./api/Vibration.html#value-cancel", "title": "cancel", "contents": "cancel unit unit ", "rendered": "<h4 class='item'>let cancel: unit => unit</h4>", "breadcrumb": "Vibration"},
{"href": "./api/Vibration.html#value-vibrate", "title": "vibrate", "contents": "vibrate array int bool unit pattern repeat", "rendered": "<h4 class='item'>let vibrate: (~pattern: array(int), ~repeat: bool) => unit</h4>", "breadcrumb": "Vibration"},
{"href": "./api/Vibration.html", "title": "Vibration", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Vibration"},
{"href": "./api/Vibration.html", "title": "Vibration", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Vibration"},
{"href": "./api/Vibration.html#Vibration", "title": "Vibration", "contents": "", "rendered": "", "breadcrumb": "Vibration"},
{"href": "./api/Types.html#type-touchResponderHandlers", "title": "touchResponderHandlers", "contents": "touchResponderHandlers onMoveShouldSetResponder option BsReactNative RNEvent NativeEvent t bool  onMoveShouldSetResponderCapture option BsReactNative RNEvent NativeEvent t bool  onResponderGrant option BsReactNative RNEvent NativeEvent t unit  onResponderMove option BsReactNative RNEvent NativeEvent t unit  onResponderReject option BsReactNative RNEvent NativeEvent t unit  onResponderRelease option BsReactNative RNEvent NativeEvent t unit  onResponderTerminate option BsReactNative RNEvent NativeEvent t unit  onResponderTerminationRequest option BsReactNative RNEvent NativeEvent t unit  onStartShouldSetResponder option BsReactNative RNEvent NativeEvent t bool  onStartShouldSetResponderCapture option BsReactNative RNEvent NativeEvent t bool ", "rendered": "<h4 class='item'>type touchResponderHandlers = {\n  onMoveShouldSetResponder: option(\n    BsReactNative.RNEvent.NativeEvent.t => bool\n  ),\n  onMoveShouldSetResponderCapture: option(\n    BsReactNative.RNEvent.NativeEvent.t => bool\n  ),\n  onResponderGrant: option(\n    BsReactNative.RNEvent.NativeEvent.t => unit\n  ),\n  onResponderMove: option(\n    BsReactNative.RNEvent.NativeEvent.t => unit\n  ),\n  onResponderReject: option(\n    BsReactNative.RNEvent.NativeEvent.t => unit\n  ),\n  onResponderRelease: option(\n    BsReactNative.RNEvent.NativeEvent.t => unit\n  ),\n  onResponderTerminate: option(\n    BsReactNative.RNEvent.NativeEvent.t => unit\n  ),\n  onResponderTerminationRequest: option(\n    BsReactNative.RNEvent.NativeEvent.t => unit\n  ),\n  onStartShouldSetResponder: option(\n    BsReactNative.RNEvent.NativeEvent.t => bool\n  ),\n  onStartShouldSetResponderCapture: option(\n    BsReactNative.RNEvent.NativeEvent.t => bool\n  )\n}</h4>", "breadcrumb": "Types"},
{"href": "./api/Types.html#type-insets", "title": "insets", "contents": "insets Js t", "rendered": "<h4 class='item'>type insets = Js.t(\n  &lt; bottom : int; left : int; right : int; top : int &gt;\n)</h4>", "breadcrumb": "Types"},
{"href": "./api/Types.html", "title": "Types", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Types"},
{"href": "./api/Types.html", "title": "Types", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Types"},
{"href": "./api/Types.html#Types", "title": "Types", "contents": "", "rendered": "", "breadcrumb": "Types"},
{"href": "./api/StyleSheet.html#value-processColor", "title": "processColor", "contents": "processColor string ", "rendered": "<h4 class='item'>let processColor: [ `Number of int | `String of string ] => string</h4>", "breadcrumb": "StyleSheet"},
{"href": "./api/StyleSheet.html#value-flatten", "title": "flatten", "contents": "flatten list BsReactNative Style t BsReactNative Style t ", "rendered": "<h4 class='item'>let flatten: list(\n  BsReactNative.Style.t\n) => BsReactNative.Style.t</h4>", "breadcrumb": "StyleSheet"},
{"href": "./api/StyleSheet.html#value-absoluteFillObject", "title": "absoluteFillObject", "contents": "absoluteFillObject BsReactNative Style t", "rendered": "<h4 class='item'>let absoluteFillObject: BsReactNative.Style.t</h4>", "breadcrumb": "StyleSheet"},
{"href": "./api/StyleSheet.html#value-absoluteFill", "title": "absoluteFill", "contents": "absoluteFill BsReactNative Style t", "rendered": "<h4 class='item'>let absoluteFill: BsReactNative.Style.t</h4>", "breadcrumb": "StyleSheet"},
{"href": "./api/StyleSheet.html#value-hairlineWidth", "title": "hairlineWidth", "contents": "hairlineWidth float", "rendered": "<h4 class='item'>let hairlineWidth: float</h4>", "breadcrumb": "StyleSheet"},
{"href": "./api/StyleSheet.html#value-create", "title": "create", "contents": "create Js t Js t ", "rendered": "<h4 class='item'>let create: Js.t('a) => Js.t('a)</h4>", "breadcrumb": "StyleSheet"},
{"href": "./api/StyleSheet.html#value-t", "title": "t", "contents": "t t", "rendered": "<h4 class='item'>let t: <a href=\"./api/StyleSheet.html#type-t\">t</a></h4>", "breadcrumb": "StyleSheet"},
{"href": "./api/StyleSheet.html#type-t", "title": "t", "contents": "t ", "rendered": "<h4 class='item'>type t</h4>", "breadcrumb": "StyleSheet"},
{"href": "./api/StyleSheet.html", "title": "StyleSheet", "contents": "@rest", "rendered": "@rest", "breadcrumb": "StyleSheet"},
{"href": "./api/StyleSheet.html", "title": "StyleSheet", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "StyleSheet"},
{"href": "./api/StyleSheet.html#StyleSheet", "title": "StyleSheet", "contents": "", "rendered": "", "breadcrumb": "StyleSheet"},
{"href": "./api/Style.html#value-overlayColor", "title": "overlayColor", "contents": "overlayColor string_interpolated styleElement ", "rendered": "<h4 class='item'>let overlayColor: <a href=\"./api/Style.html#type-string_interpolated\">string_interpolated</a> => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-tintColor", "title": "tintColor", "contents": "tintColor string_interpolated styleElement ", "rendered": "<h4 class='item'>let tintColor: <a href=\"./api/Style.html#type-string_interpolated\">string_interpolated</a> => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-resizeMode", "title": "resizeMode", "contents": "resizeMode resizeMode styleElement ", "rendered": "<h4 class='item'>let resizeMode: <a href=\"./api/Style.html#type-resizeMode\">resizeMode</a> => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#type-resizeMode", "title": "resizeMode", "contents": "resizeMode ", "rendered": "<h4 class='item'>type resizeMode = \n  | Cover\n  | Contain\n  | Stretch\n  | Repeat\n  | Center\n</h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-writingDirection", "title": "writingDirection", "contents": "writingDirection writingDirection styleElement ", "rendered": "<h4 class='item'>let writingDirection: <a href=\"./api/Style.html#type-writingDirection\">writingDirection</a> => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#type-writingDirection", "title": "writingDirection", "contents": "writingDirection ", "rendered": "<h4 class='item'>type writingDirection = | Auto | Ltr | Rtl\n</h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-textDecorationStyle", "title": "textDecorationStyle", "contents": "textDecorationStyle textDecorationStyle styleElement ", "rendered": "<h4 class='item'>let textDecorationStyle: <a href=\"./api/Style.html#type-textDecorationStyle\">textDecorationStyle</a> => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#type-textDecorationStyle", "title": "textDecorationStyle", "contents": "textDecorationStyle ", "rendered": "<h4 class='item'>type textDecorationStyle = \n  | Solid\n  | Double\n  | Dotted\n  | Dashed\n</h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-textDecorationColor", "title": "textDecorationColor", "contents": "textDecorationColor string_interpolated styleElement ", "rendered": "<h4 class='item'>let textDecorationColor: <a href=\"./api/Style.html#type-string_interpolated\">string_interpolated</a> => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-letterSpacing", "title": "letterSpacing", "contents": "letterSpacing float styleElement ", "rendered": "<h4 class='item'>let letterSpacing: float => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-fontVariant", "title": "fontVariant", "contents": "fontVariant list string styleElement ", "rendered": "<h4 class='item'>let fontVariant: list(string) => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-textAlignVertical", "title": "textAlignVertical", "contents": "textAlignVertical textAlignVertical styleElement ", "rendered": "<h4 class='item'>let textAlignVertical: <a href=\"./api/Style.html#type-textAlignVertical\">textAlignVertical</a> => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#type-textAlignVertical", "title": "textAlignVertical", "contents": "textAlignVertical ", "rendered": "<h4 class='item'>type textAlignVertical = | Auto | Top | Bottom | Center\n</h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-includeFontPadding", "title": "includeFontPadding", "contents": "includeFontPadding bool styleElement ", "rendered": "<h4 class='item'>let includeFontPadding: bool => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-textShadowRadius", "title": "textShadowRadius", "contents": "textShadowRadius float styleElement ", "rendered": "<h4 class='item'>let textShadowRadius: float => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-textShadowOffset", "title": "textShadowOffset", "contents": "textShadowOffset float float styleElement height width", "rendered": "<h4 class='item'>let textShadowOffset: (\n  ~height: float,\n  ~width: float\n) => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-textShadowColor", "title": "textShadowColor", "contents": "textShadowColor string_interpolated styleElement ", "rendered": "<h4 class='item'>let textShadowColor: <a href=\"./api/Style.html#type-string_interpolated\">string_interpolated</a> => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-textDecorationLine", "title": "textDecorationLine", "contents": "textDecorationLine textDecorationLine styleElement ", "rendered": "<h4 class='item'>let textDecorationLine: <a href=\"./api/Style.html#type-textDecorationLine\">textDecorationLine</a> => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#type-textDecorationLine", "title": "textDecorationLine", "contents": "textDecorationLine ", "rendered": "<h4 class='item'>type textDecorationLine = \n  | None\n  | Underline\n  | LineThrough\n  | UnderlineLineThrough\n</h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-textAlign", "title": "textAlign", "contents": "textAlign textAlign styleElement ", "rendered": "<h4 class='item'>let textAlign: <a href=\"./api/Style.html#type-textAlign\">textAlign</a> => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#type-textAlign", "title": "textAlign", "contents": "textAlign ", "rendered": "<h4 class='item'>type textAlign = | Auto | Left | Right | Center | Justify\n</h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-lineHeight", "title": "lineHeight", "contents": "lineHeight float styleElement ", "rendered": "<h4 class='item'>let lineHeight: float => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-fontWeight", "title": "fontWeight", "contents": "fontWeight styleElement ", "rendered": "<h4 class='item'>let fontWeight: [ `Bold\n| `_200\n| `Normal\n| `_900\n| `_400\n| `_800\n| `_300\n| `_100\n| `_500\n| `_700\n| `_600 ] => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-fontStyle", "title": "fontStyle", "contents": "fontStyle fontStyle styleElement ", "rendered": "<h4 class='item'>let fontStyle: <a href=\"./api/Style.html#type-fontStyle\">fontStyle</a> => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#type-fontStyle", "title": "fontStyle", "contents": "fontStyle ", "rendered": "<h4 class='item'>type fontStyle = | Normal | Italic\n</h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-fontSize", "title": "fontSize", "contents": "fontSize float_interpolated_animated styleElement ", "rendered": "<h4 class='item'>let fontSize: <a href=\"./api/Style.html#type-float_interpolated_animated\">float_interpolated_animated</a> => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-fontFamily", "title": "fontFamily", "contents": "fontFamily string styleElement ", "rendered": "<h4 class='item'>let fontFamily: string => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-color", "title": "color", "contents": "color string_interpolated styleElement ", "rendered": "<h4 class='item'>let color: <a href=\"./api/Style.html#type-string_interpolated\">string_interpolated</a> => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-elevation", "title": "elevation", "contents": "elevation float styleElement ", "rendered": "<h4 class='item'>let elevation: float => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-opacity", "title": "opacity", "contents": "opacity float_interpolated_animated styleElement ", "rendered": "<h4 class='item'>let opacity: <a href=\"./api/Style.html#type-float_interpolated_animated\">float_interpolated_animated</a> => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-borderBottomRightRadius", "title": "borderBottomRightRadius", "contents": "borderBottomRightRadius float styleElement ", "rendered": "<h4 class='item'>let borderBottomRightRadius: float => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-borderBottomLeftRadius", "title": "borderBottomLeftRadius", "contents": "borderBottomLeftRadius float styleElement ", "rendered": "<h4 class='item'>let borderBottomLeftRadius: float => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-borderStyle", "title": "borderStyle", "contents": "borderStyle borderStyle styleElement ", "rendered": "<h4 class='item'>let borderStyle: <a href=\"./api/Style.html#type-borderStyle\">borderStyle</a> => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#type-borderStyle", "title": "borderStyle", "contents": "borderStyle ", "rendered": "<h4 class='item'>type borderStyle = | Solid | Dotted | Dashed\n</h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-borderTopRightRadius", "title": "borderTopRightRadius", "contents": "borderTopRightRadius float styleElement ", "rendered": "<h4 class='item'>let borderTopRightRadius: float => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-borderTopLeftRadius", "title": "borderTopLeftRadius", "contents": "borderTopLeftRadius float styleElement ", "rendered": "<h4 class='item'>let borderTopLeftRadius: float => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-borderRadius", "title": "borderRadius", "contents": "borderRadius float styleElement ", "rendered": "<h4 class='item'>let borderRadius: float => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-borderLeftColor", "title": "borderLeftColor", "contents": "borderLeftColor string_interpolated styleElement ", "rendered": "<h4 class='item'>let borderLeftColor: <a href=\"./api/Style.html#type-string_interpolated\">string_interpolated</a> => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-borderBottomColor", "title": "borderBottomColor", "contents": "borderBottomColor string_interpolated styleElement ", "rendered": "<h4 class='item'>let borderBottomColor: <a href=\"./api/Style.html#type-string_interpolated\">string_interpolated</a> => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-borderRightColor", "title": "borderRightColor", "contents": "borderRightColor string_interpolated styleElement ", "rendered": "<h4 class='item'>let borderRightColor: <a href=\"./api/Style.html#type-string_interpolated\">string_interpolated</a> => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-borderTopColor", "title": "borderTopColor", "contents": "borderTopColor string_interpolated styleElement ", "rendered": "<h4 class='item'>let borderTopColor: <a href=\"./api/Style.html#type-string_interpolated\">string_interpolated</a> => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-borderColor", "title": "borderColor", "contents": "borderColor string_interpolated styleElement ", "rendered": "<h4 class='item'>let borderColor: <a href=\"./api/Style.html#type-string_interpolated\">string_interpolated</a> => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-backgroundColor", "title": "backgroundColor", "contents": "backgroundColor string_interpolated styleElement ", "rendered": "<h4 class='item'>let backgroundColor: <a href=\"./api/Style.html#type-string_interpolated\">string_interpolated</a> => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-backfaceVisibility", "title": "backfaceVisibility", "contents": "backfaceVisibility backfaceVisibility styleElement ", "rendered": "<h4 class='item'>let backfaceVisibility: <a href=\"./api/Style.html#type-backfaceVisibility\">backfaceVisibility</a> => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#type-backfaceVisibility", "title": "backfaceVisibility", "contents": "backfaceVisibility ", "rendered": "<h4 class='item'>type backfaceVisibility = | Visible | Hidden\n</h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-Transform.makeInterpolated", "title": "Transform.makeInterpolated", "contents": "makeInterpolated option BsReactNative AnimatedRe Interpolation t option BsReactNative AnimatedRe Interpolation t option BsReactNative AnimatedRe Interpolation t option BsReactNative AnimatedRe Interpolation t option BsReactNative AnimatedRe Interpolation t option BsReactNative AnimatedRe Interpolation t option BsReactNative AnimatedRe Interpolation t option BsReactNative AnimatedRe Interpolation t option BsReactNative AnimatedRe Interpolation t option BsReactNative AnimatedRe Interpolation t option BsReactNative AnimatedRe Interpolation t unit styleElement perspective rotate rotateX rotateY rotateZ scaleX scaleY translateX translateY skewX skewY ", "rendered": "<h4 class='item'>let makeInterpolated: (\n  ~?perspective: option(\n    BsReactNative.AnimatedRe.Interpolation.t\n  ),\n  ~?rotate: option(\n    BsReactNative.AnimatedRe.Interpolation.t\n  ),\n  ~?rotateX: option(\n    BsReactNative.AnimatedRe.Interpolation.t\n  ),\n  ~?rotateY: option(\n    BsReactNative.AnimatedRe.Interpolation.t\n  ),\n  ~?rotateZ: option(\n    BsReactNative.AnimatedRe.Interpolation.t\n  ),\n  ~?scaleX: option(\n    BsReactNative.AnimatedRe.Interpolation.t\n  ),\n  ~?scaleY: option(\n    BsReactNative.AnimatedRe.Interpolation.t\n  ),\n  ~?translateX: option(\n    BsReactNative.AnimatedRe.Interpolation.t\n  ),\n  ~?translateY: option(\n    BsReactNative.AnimatedRe.Interpolation.t\n  ),\n  ~?skewX: option(BsReactNative.AnimatedRe.Interpolation.t),\n  ~?skewY: option(BsReactNative.AnimatedRe.Interpolation.t),\n  unit\n) => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-Transform.makeAnimated", "title": "Transform.makeAnimated", "contents": "makeAnimated option BsReactNative AnimatedRe Value t option BsReactNative AnimatedRe Value t option BsReactNative AnimatedRe Value t option BsReactNative AnimatedRe Value t option BsReactNative AnimatedRe Value t option BsReactNative AnimatedRe Value t option BsReactNative AnimatedRe Value t option BsReactNative AnimatedRe Value t option BsReactNative AnimatedRe Value t option BsReactNative AnimatedRe Value t option BsReactNative AnimatedRe Value t unit styleElement perspective rotate rotateX rotateY rotateZ scaleX scaleY translateX translateY skewX skewY ", "rendered": "<h4 class='item'>let makeAnimated: (\n  ~?perspective: option(BsReactNative.AnimatedRe.Value.t),\n  ~?rotate: option(BsReactNative.AnimatedRe.Value.t),\n  ~?rotateX: option(BsReactNative.AnimatedRe.Value.t),\n  ~?rotateY: option(BsReactNative.AnimatedRe.Value.t),\n  ~?rotateZ: option(BsReactNative.AnimatedRe.Value.t),\n  ~?scaleX: option(BsReactNative.AnimatedRe.Value.t),\n  ~?scaleY: option(BsReactNative.AnimatedRe.Value.t),\n  ~?translateX: option(BsReactNative.AnimatedRe.Value.t),\n  ~?translateY: option(BsReactNative.AnimatedRe.Value.t),\n  ~?skewX: option(BsReactNative.AnimatedRe.Value.t),\n  ~?skewY: option(BsReactNative.AnimatedRe.Value.t),\n  unit\n) => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-Transform.make", "title": "Transform.make", "contents": "make option float option string option string option string option string option float option float option float option float option string option string unit styleElement perspective rotate rotateX rotateY rotateZ scaleX scaleY translateX translateY skewX skewY ", "rendered": "<h4 class='item'>let make: (\n  ~?perspective: option(float),\n  ~?rotate: option(string),\n  ~?rotateX: option(string),\n  ~?rotateY: option(string),\n  ~?rotateZ: option(string),\n  ~?scaleX: option(float),\n  ~?scaleY: option(float),\n  ~?translateX: option(float),\n  ~?translateY: option(float),\n  ~?skewX: option(string),\n  ~?skewY: option(string),\n  unit\n) => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#module-Transform", "title": "Transform", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Style"},
{"href": "./api/Style.html#module-Transform", "title": "Transform", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-shadowRadius", "title": "shadowRadius", "contents": "shadowRadius float styleElement ", "rendered": "<h4 class='item'>let shadowRadius: float => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-shadowOpacity", "title": "shadowOpacity", "contents": "shadowOpacity float styleElement ", "rendered": "<h4 class='item'>let shadowOpacity: float => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-shadowOffset", "title": "shadowOffset", "contents": "shadowOffset float float styleElement height width", "rendered": "<h4 class='item'>let shadowOffset: (\n  ~height: float,\n  ~width: float\n) => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-shadowColor", "title": "shadowColor", "contents": "shadowColor string_interpolated styleElement ", "rendered": "<h4 class='item'>let shadowColor: <a href=\"./api/Style.html#type-string_interpolated\">string_interpolated</a> => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-direction", "title": "direction", "contents": "direction direction styleElement ", "rendered": "<h4 class='item'>let direction: <a href=\"./api/Style.html#type-direction\">direction</a> => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#type-direction", "title": "direction", "contents": "direction ", "rendered": "<h4 class='item'>type direction = | Inherit | Ltr | Rtl\n</h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-zIndex", "title": "zIndex", "contents": "zIndex int styleElement ", "rendered": "<h4 class='item'>let zIndex: int => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-width", "title": "width", "contents": "width pt_pct_animated_interpolated styleElement ", "rendered": "<h4 class='item'>let width: <a href=\"./api/Style.html#type-pt_pct_animated_interpolated\">pt_pct_animated_interpolated</a> => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-height", "title": "height", "contents": "height pt_pct_animated_interpolated styleElement ", "rendered": "<h4 class='item'>let height: <a href=\"./api/Style.html#type-pt_pct_animated_interpolated\">pt_pct_animated_interpolated</a> => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-bottom", "title": "bottom", "contents": "bottom pt_pct_animated_interpolated styleElement ", "rendered": "<h4 class='item'>let bottom: <a href=\"./api/Style.html#type-pt_pct_animated_interpolated\">pt_pct_animated_interpolated</a> => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-right", "title": "right", "contents": "right pt_pct_animated_interpolated styleElement ", "rendered": "<h4 class='item'>let right: <a href=\"./api/Style.html#type-pt_pct_animated_interpolated\">pt_pct_animated_interpolated</a> => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-left", "title": "left", "contents": "left pt_pct_animated_interpolated styleElement ", "rendered": "<h4 class='item'>let left: <a href=\"./api/Style.html#type-pt_pct_animated_interpolated\">pt_pct_animated_interpolated</a> => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-top", "title": "top", "contents": "top pt_pct_animated_interpolated styleElement ", "rendered": "<h4 class='item'>let top: <a href=\"./api/Style.html#type-pt_pct_animated_interpolated\">pt_pct_animated_interpolated</a> => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-position", "title": "position", "contents": "position position styleElement ", "rendered": "<h4 class='item'>let position: <a href=\"./api/Style.html#type-position\">position</a> => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#type-position", "title": "position", "contents": "position ", "rendered": "<h4 class='item'>type position = | Absolute | Relative\n</h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-paddingVertical", "title": "paddingVertical", "contents": "paddingVertical pt_pct styleElement ", "rendered": "<h4 class='item'>let paddingVertical: <a href=\"./api/Style.html#type-pt_pct\">pt_pct</a> => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-paddingTop", "title": "paddingTop", "contents": "paddingTop pt_pct styleElement ", "rendered": "<h4 class='item'>let paddingTop: <a href=\"./api/Style.html#type-pt_pct\">pt_pct</a> => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-paddingRight", "title": "paddingRight", "contents": "paddingRight pt_pct styleElement ", "rendered": "<h4 class='item'>let paddingRight: <a href=\"./api/Style.html#type-pt_pct\">pt_pct</a> => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-paddingLeft", "title": "paddingLeft", "contents": "paddingLeft pt_pct styleElement ", "rendered": "<h4 class='item'>let paddingLeft: <a href=\"./api/Style.html#type-pt_pct\">pt_pct</a> => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-paddingHorizontal", "title": "paddingHorizontal", "contents": "paddingHorizontal pt_pct styleElement ", "rendered": "<h4 class='item'>let paddingHorizontal: <a href=\"./api/Style.html#type-pt_pct\">pt_pct</a> => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-paddingBottom", "title": "paddingBottom", "contents": "paddingBottom pt_pct styleElement ", "rendered": "<h4 class='item'>let paddingBottom: <a href=\"./api/Style.html#type-pt_pct\">pt_pct</a> => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-padding", "title": "padding", "contents": "padding pt_pct styleElement ", "rendered": "<h4 class='item'>let padding: <a href=\"./api/Style.html#type-pt_pct\">pt_pct</a> => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-overflow", "title": "overflow", "contents": "overflow overflow styleElement ", "rendered": "<h4 class='item'>let overflow: <a href=\"./api/Style.html#type-overflow\">overflow</a> => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#type-overflow", "title": "overflow", "contents": "overflow ", "rendered": "<h4 class='item'>type overflow = | Visible | Hidden | Scroll\n</h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-minWidth", "title": "minWidth", "contents": "minWidth pt_pct styleElement ", "rendered": "<h4 class='item'>let minWidth: <a href=\"./api/Style.html#type-pt_pct\">pt_pct</a> => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-minHeight", "title": "minHeight", "contents": "minHeight pt_pct styleElement ", "rendered": "<h4 class='item'>let minHeight: <a href=\"./api/Style.html#type-pt_pct\">pt_pct</a> => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-maxWidth", "title": "maxWidth", "contents": "maxWidth pt_pct styleElement ", "rendered": "<h4 class='item'>let maxWidth: <a href=\"./api/Style.html#type-pt_pct\">pt_pct</a> => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-maxHeight", "title": "maxHeight", "contents": "maxHeight pt_pct styleElement ", "rendered": "<h4 class='item'>let maxHeight: <a href=\"./api/Style.html#type-pt_pct\">pt_pct</a> => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-marginVertical", "title": "marginVertical", "contents": "marginVertical pt_pct_auto styleElement ", "rendered": "<h4 class='item'>let marginVertical: <a href=\"./api/Style.html#type-pt_pct_auto\">pt_pct_auto</a> => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-marginTop", "title": "marginTop", "contents": "marginTop pt_pct_auto styleElement ", "rendered": "<h4 class='item'>let marginTop: <a href=\"./api/Style.html#type-pt_pct_auto\">pt_pct_auto</a> => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-marginRight", "title": "marginRight", "contents": "marginRight pt_pct_auto styleElement ", "rendered": "<h4 class='item'>let marginRight: <a href=\"./api/Style.html#type-pt_pct_auto\">pt_pct_auto</a> => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-marginLeft", "title": "marginLeft", "contents": "marginLeft pt_pct_auto styleElement ", "rendered": "<h4 class='item'>let marginLeft: <a href=\"./api/Style.html#type-pt_pct_auto\">pt_pct_auto</a> => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-marginHorizontal", "title": "marginHorizontal", "contents": "marginHorizontal pt_pct_auto styleElement ", "rendered": "<h4 class='item'>let marginHorizontal: <a href=\"./api/Style.html#type-pt_pct_auto\">pt_pct_auto</a> => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-marginBottom", "title": "marginBottom", "contents": "marginBottom pt_pct_auto styleElement ", "rendered": "<h4 class='item'>let marginBottom: <a href=\"./api/Style.html#type-pt_pct_auto\">pt_pct_auto</a> => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-margin", "title": "margin", "contents": "margin pt_pct_auto styleElement ", "rendered": "<h4 class='item'>let margin: <a href=\"./api/Style.html#type-pt_pct_auto\">pt_pct_auto</a> => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-justifyContent", "title": "justifyContent", "contents": "justifyContent justifyContent styleElement ", "rendered": "<h4 class='item'>let justifyContent: <a href=\"./api/Style.html#type-justifyContent\">justifyContent</a> => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#type-justifyContent", "title": "justifyContent", "contents": "justifyContent ", "rendered": "<h4 class='item'>type justifyContent = \n  | FlexStart\n  | FlexEnd\n  | Center\n  | Stretch\n  | SpaceAround\n  | SpaceBetween\n</h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-flexWrap", "title": "flexWrap", "contents": "flexWrap flexWrap styleElement ", "rendered": "<h4 class='item'>let flexWrap: <a href=\"./api/Style.html#type-flexWrap\">flexWrap</a> => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#type-flexWrap", "title": "flexWrap", "contents": "flexWrap ", "rendered": "<h4 class='item'>type flexWrap = | Wrap | Nowrap\n</h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-flexShrink", "title": "flexShrink", "contents": "flexShrink float styleElement ", "rendered": "<h4 class='item'>let flexShrink: float => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-flexDirection", "title": "flexDirection", "contents": "flexDirection flexDirection styleElement ", "rendered": "<h4 class='item'>let flexDirection: <a href=\"./api/Style.html#type-flexDirection\">flexDirection</a> => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#type-flexDirection", "title": "flexDirection", "contents": "flexDirection ", "rendered": "<h4 class='item'>type flexDirection = \n  | Row\n  | RowReverse\n  | Column\n  | ColumnReverse\n</h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-flexGrow", "title": "flexGrow", "contents": "flexGrow float styleElement ", "rendered": "<h4 class='item'>let flexGrow: float => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-flexBasis", "title": "flexBasis", "contents": "flexBasis pt_pct styleElement ", "rendered": "<h4 class='item'>let flexBasis: <a href=\"./api/Style.html#type-pt_pct\">pt_pct</a> => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-display", "title": "display", "contents": "display display styleElement ", "rendered": "<h4 class='item'>let display: <a href=\"./api/Style.html#type-display\">display</a> => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#type-display", "title": "display", "contents": "display ", "rendered": "<h4 class='item'>type display = | Flex | None\n</h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-flex", "title": "flex", "contents": "flex float styleElement ", "rendered": "<h4 class='item'>let flex: float => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-borderWidth", "title": "borderWidth", "contents": "borderWidth float styleElement ", "rendered": "<h4 class='item'>let borderWidth: float => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-borderTopWidth", "title": "borderTopWidth", "contents": "borderTopWidth float styleElement ", "rendered": "<h4 class='item'>let borderTopWidth: float => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-borderRightWidth", "title": "borderRightWidth", "contents": "borderRightWidth float styleElement ", "rendered": "<h4 class='item'>let borderRightWidth: float => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-borderLeftWidth", "title": "borderLeftWidth", "contents": "borderLeftWidth float styleElement ", "rendered": "<h4 class='item'>let borderLeftWidth: float => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-borderBottomWidth", "title": "borderBottomWidth", "contents": "borderBottomWidth float styleElement ", "rendered": "<h4 class='item'>let borderBottomWidth: float => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-aspectRatio", "title": "aspectRatio", "contents": "aspectRatio float styleElement ", "rendered": "<h4 class='item'>let aspectRatio: float => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-alignSelf", "title": "alignSelf", "contents": "alignSelf alignSelf styleElement ", "rendered": "<h4 class='item'>let alignSelf: <a href=\"./api/Style.html#type-alignSelf\">alignSelf</a> => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#type-alignSelf", "title": "alignSelf", "contents": "alignSelf ", "rendered": "<h4 class='item'>type alignSelf = \n  | FlexStart\n  | FlexEnd\n  | Center\n  | Stretch\n  | Baseline\n</h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-alignItems", "title": "alignItems", "contents": "alignItems alignItems styleElement ", "rendered": "<h4 class='item'>let alignItems: <a href=\"./api/Style.html#type-alignItems\">alignItems</a> => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#type-alignItems", "title": "alignItems", "contents": "alignItems ", "rendered": "<h4 class='item'>type alignItems = \n  | FlexStart\n  | FlexEnd\n  | Center\n  | Stretch\n  | Baseline\n</h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-alignContent", "title": "alignContent", "contents": "alignContent alignContent styleElement ", "rendered": "<h4 class='item'>let alignContent: <a href=\"./api/Style.html#type-alignContent\">alignContent</a> => <a href=\"./api/Style.html#type-styleElement\">styleElement</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#type-alignContent", "title": "alignContent", "contents": "alignContent ", "rendered": "<h4 class='item'>type alignContent = \n  | FlexStart\n  | FlexEnd\n  | Center\n  | Stretch\n  | SpaceAround\n  | SpaceBetween\n</h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-concat", "title": "concat", "contents": "concat list t t ", "rendered": "<h4 class='item'>let concat: list(<a href=\"./api/Style.html#type-t\">t</a>) => <a href=\"./api/Style.html#type-t\">t</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-combine", "title": "combine", "contents": "combine t t t  ", "rendered": "<h4 class='item'>let combine: (<a href=\"./api/Style.html#type-t\">t</a>, <a href=\"./api/Style.html#type-t\">t</a>) => <a href=\"./api/Style.html#type-t\">t</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-flatten", "title": "flatten", "contents": "flatten array t t ", "rendered": "<h4 class='item'>let flatten: array(<a href=\"./api/Style.html#type-t\">t</a>) => <a href=\"./api/Style.html#type-t\">t</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#value-style", "title": "style", "contents": "style list styleElement t ", "rendered": "<h4 class='item'>let style: list(<a href=\"./api/Style.html#type-styleElement\">styleElement</a>) => <a href=\"./api/Style.html#type-t\">t</a></h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#type-string_interpolated", "title": "string_interpolated", "contents": "string_interpolated string BsReactNative AnimatedRe Interpolation t", "rendered": "<h4 class='item'>type string_interpolated = \n  | String(string)\n  | Interpolated(BsReactNative.AnimatedRe.Interpolation.t)\n</h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#type-float_interpolated_animated", "title": "float_interpolated_animated", "contents": "float_interpolated_animated float BsReactNative AnimatedRe Value t BsReactNative AnimatedRe Interpolation t", "rendered": "<h4 class='item'>type float_interpolated_animated = \n  | Float(float)\n  | Animated(BsReactNative.AnimatedRe.Value.t)\n  | Interpolated(BsReactNative.AnimatedRe.Interpolation.t)\n</h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#type-pt_pct_animated_interpolated", "title": "pt_pct_animated_interpolated", "contents": "pt_pct_animated_interpolated float float BsReactNative AnimatedRe Value t BsReactNative AnimatedRe Interpolation t", "rendered": "<h4 class='item'>type pt_pct_animated_interpolated = \n  | Pt(float)\n  | Pct(float)\n  | Animated(BsReactNative.AnimatedRe.Value.t)\n  | Interpolated(BsReactNative.AnimatedRe.Interpolation.t)\n</h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#type-pt_pct_auto", "title": "pt_pct_auto", "contents": "pt_pct_auto float float", "rendered": "<h4 class='item'>type pt_pct_auto = | Pt(float) | Pct(float) | Auto\n</h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#type-pt_pct", "title": "pt_pct", "contents": "pt_pct float float", "rendered": "<h4 class='item'>type pt_pct = | Pt(float) | Pct(float)\n</h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#type-styleElement", "title": "styleElement", "contents": "styleElement ", "rendered": "<h4 class='item'>type styleElement</h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html#type-t", "title": "t", "contents": "t ", "rendered": "<h4 class='item'>type t</h4>", "breadcrumb": "Style"},
{"href": "./api/Style.html", "title": "Style", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Style"},
{"href": "./api/Style.html", "title": "Style", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Style"},
{"href": "./api/Style.html#Style", "title": "Style", "contents": "", "rendered": "", "breadcrumb": "Style"},
{"href": "./api/UtilsRN.html#value-dictFromArray", "title": "dictFromArray", "contents": "dictFromArray array Js Dict key Js Dict t ", "rendered": "<h4 class='item'>let dictFromArray: array((Js.Dict.key, 'a)) => Js.Dict.t('a)</h4>", "breadcrumb": "UtilsRN"},
{"href": "./api/UtilsRN.html#value-dictFromList", "title": "dictFromList", "contents": "dictFromList list Js Dict key Js Dict t ", "rendered": "<h4 class='item'>let dictFromList: list((Js.Dict.key, 'a)) => Js.Dict.t('a)</h4>", "breadcrumb": "UtilsRN"},
{"href": "./api/UtilsRN.html#value-dictValues", "title": "dictValues", "contents": "dictValues Js Dict t ", "rendered": "<h4 class='item'>let dictValues: Js.Dict.t('a) => 'a</h4>", "breadcrumb": "UtilsRN"},
{"href": "./api/UtilsRN.html#value-dictEntries", "title": "dictEntries", "contents": "dictEntries Js Dict t ", "rendered": "<h4 class='item'>let dictEntries: Js.Dict.t('a) => 'a</h4>", "breadcrumb": "UtilsRN"},
{"href": "./api/UtilsRN.html#value-<<", "title": "<<", "contents": "<<     ", "rendered": "<h4 class='item'>let <<: ('a => 'a, 'a => 'a, 'a) => 'a</h4>", "breadcrumb": "UtilsRN"},
{"href": "./api/UtilsRN.html#value-objAssign2", "title": "objAssign2", "contents": "objAssign2 Js t Js t Js t Js t   ", "rendered": "<h4 class='item'>let objAssign2: (\n  Js.t(&lt; .. &gt;),\n  Js.t(&lt; .. &gt;),\n  Js.t(&lt; .. &gt;)\n) => Js.t(&lt; .. &gt;)</h4>", "breadcrumb": "UtilsRN"},
{"href": "./api/UtilsRN.html#value-optBoolToOptJsBoolean", "title": "optBoolToOptJsBoolean", "contents": "optBoolToOptJsBoolean option option ", "rendered": "<h4 class='item'>let optBoolToOptJsBoolean: option('a) => option('a)</h4>", "breadcrumb": "UtilsRN"},
{"href": "./api/UtilsRN.html#value-option_map", "title": "option_map", "contents": "option_map  option option  ", "rendered": "<h4 class='item'>let option_map: ('a => 'a, option('a)) => option('a)</h4>", "breadcrumb": "UtilsRN"},
{"href": "./api/UtilsRN.html", "title": "UtilsRN", "contents": "@rest", "rendered": "@rest", "breadcrumb": "UtilsRN"},
{"href": "./api/UtilsRN.html", "title": "UtilsRN", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "UtilsRN"},
{"href": "./api/UtilsRN.html#UtilsRN", "title": "UtilsRN", "contents": "", "rendered": "", "breadcrumb": "UtilsRN"},
{"href": "./api/ResponderUtils.html#value-responderHandlers", "title": "responderHandlers", "contents": "responderHandlers option BsReactNative RNEvent NativeEvent t bool  option BsReactNative RNEvent NativeEvent t bool  option BsReactNative RNEvent NativeEvent t unit  option BsReactNative RNEvent NativeEvent t unit  option BsReactNative RNEvent NativeEvent t unit  option BsReactNative RNEvent NativeEvent t unit  option BsReactNative RNEvent NativeEvent t unit  option BsReactNative RNEvent NativeEvent t unit  option BsReactNative RNEvent NativeEvent t bool  option BsReactNative RNEvent NativeEvent t bool  unit BsReactNative Types touchResponderHandlers onMoveShouldSetResponder onMoveShouldSetResponderCapture onResponderGrant onResponderMove onResponderReject onResponderRelease onResponderTerminate onResponderTerminationRequest onStartShouldSetResponder onStartShouldSetResponderCapture ", "rendered": "<h4 class='item'>let responderHandlers: (\n  ~?onMoveShouldSetResponder: option(\n    BsReactNative.RNEvent.NativeEvent.t => bool\n  ),\n  ~?onMoveShouldSetResponderCapture: option(\n    BsReactNative.RNEvent.NativeEvent.t => bool\n  ),\n  ~?onResponderGrant: option(\n    BsReactNative.RNEvent.NativeEvent.t => unit\n  ),\n  ~?onResponderMove: option(\n    BsReactNative.RNEvent.NativeEvent.t => unit\n  ),\n  ~?onResponderReject: option(\n    BsReactNative.RNEvent.NativeEvent.t => unit\n  ),\n  ~?onResponderRelease: option(\n    BsReactNative.RNEvent.NativeEvent.t => unit\n  ),\n  ~?onResponderTerminate: option(\n    BsReactNative.RNEvent.NativeEvent.t => unit\n  ),\n  ~?onResponderTerminationRequest: option(\n    BsReactNative.RNEvent.NativeEvent.t => unit\n  ),\n  ~?onStartShouldSetResponder: option(\n    BsReactNative.RNEvent.NativeEvent.t => bool\n  ),\n  ~?onStartShouldSetResponderCapture: option(\n    BsReactNative.RNEvent.NativeEvent.t => bool\n  ),\n  unit\n) => BsReactNative.Types.touchResponderHandlers</h4>", "breadcrumb": "ResponderUtils"},
{"href": "./api/ResponderUtils.html", "title": "ResponderUtils", "contents": "@rest", "rendered": "@rest", "breadcrumb": "ResponderUtils"},
{"href": "./api/ResponderUtils.html", "title": "ResponderUtils", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ResponderUtils"},
{"href": "./api/ResponderUtils.html#ResponderUtils", "title": "ResponderUtils", "contents": "", "rendered": "", "breadcrumb": "ResponderUtils"},
{"href": "./api/Props.html#value-extendView", "title": "extendView", "contents": "extendView option option option option option option option BsReactNative Types touchResponderHandlers option option option option option option option option option option option list option option Js t Js t accessibilityLabel accessible hitSlop onAccessibilityTap onLayout onMagicTap responderHandlers pointerEvents removeClippedSubviews style testID accessibilityComponentType accessibilityLiveRegion collapsable importantForAccessibility needsOffscreenAlphaCompositing renderToHardwareTextureAndroid accessibilityTraits accessibilityViewIsModal shouldRasterizeIOS ", "rendered": "<h4 class='item'>let extendView: (\n  ~?accessibilityLabel: option('a),\n  ~?accessible: option('a),\n  ~?hitSlop: option('a),\n  ~?onAccessibilityTap: option('a),\n  ~?onLayout: option('a),\n  ~?onMagicTap: option('a),\n  ~?responderHandlers: option(\n    BsReactNative.Types.touchResponderHandlers\n  ),\n  ~?pointerEvents: option(\n    [&lt; `auto | `boxNone | `boxOnly | `none ]\n  ),\n  ~?removeClippedSubviews: option('a),\n  ~?style: option('a),\n  ~?testID: option('a),\n  ~?accessibilityComponentType: option(\n    [&lt; `button | `none | `radiobutton_checked | `radiobutton_unchecked ]\n  ),\n  ~?accessibilityLiveRegion: option(\n    [&lt; `assertive | `none | `polite ]\n  ),\n  ~?collapsable: option('a),\n  ~?importantForAccessibility: option(\n    [&lt; `auto | `no | `noHideDescendants | `yes ]\n  ),\n  ~?needsOffscreenAlphaCompositing: option('a),\n  ~?renderToHardwareTextureAndroid: option('a),\n  ~?accessibilityTraits: option(\n    list(\n      [&lt; `adjustable\n | `allowsDirectInteraction\n | `button\n | `disabled\n | `frequentUpdates\n | `header\n | `image\n | `key\n | `link\n | `none\n | `pageTurn\n | `plays\n | `search\n | `selected\n | `startsMedia\n | `summary\n | `text ]\n    )\n  ),\n  ~?accessibilityViewIsModal: option('a),\n  ~?shouldRasterizeIOS: option('a),\n  Js.t(&lt; .. &gt;)\n) => Js.t(&lt; .. &gt;)</h4>", "breadcrumb": "Props"},
{"href": "./api/Props.html#value-serialize", "title": "serialize", "contents": "serialize option BsReactNative Types touchResponderHandlers Js t ", "rendered": "<h4 class='item'>let serialize: option(\n  BsReactNative.Types.touchResponderHandlers\n) => Js.t(\n  &lt; onMoveShouldSetResponder : (BsReactNative.RNEvent.NativeEvent.t -&gt; bool)\n                             Js.Undefined.t;\n  onMoveShouldSetResponderCapture : (BsReactNative.RNEvent.NativeEvent.t -&gt;\n                                     bool)\n                                    Js.Undefined.t;\n  onResponderGrant : (BsReactNative.RNEvent.NativeEvent.t -&gt; unit)\n                     Js.Undefined.t;\n  onResponderMove : (BsReactNative.RNEvent.NativeEvent.t -&gt; unit)\n                    Js.Undefined.t;\n  onResponderReject : (BsReactNative.RNEvent.NativeEvent.t -&gt; unit)\n                      Js.Undefined.t;\n  onResponderRelease : (BsReactNative.RNEvent.NativeEvent.t -&gt; unit)\n                       Js.Undefined.t;\n  onResponderTerminate : (BsReactNative.RNEvent.NativeEvent.t -&gt; unit)\n                         Js.Undefined.t;\n  onResponderTerminationRequest : (BsReactNative.RNEvent.NativeEvent.t -&gt;\n                                   unit)\n                                  Js.Undefined.t;\n  onStartShouldSetResponder : (BsReactNative.RNEvent.NativeEvent.t -&gt; bool)\n                              Js.Undefined.t;\n  onStartShouldSetResponderCapture : (BsReactNative.RNEvent.NativeEvent.t -&gt;\n                                      bool)\n                                     Js.Undefined.t &gt;\n)</h4>", "breadcrumb": "Props"},
{"href": "./api/Props.html", "title": "Props", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Props"},
{"href": "./api/Props.html", "title": "Props", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Props"},
{"href": "./api/Props.html#Props", "title": "Props", "contents": "", "rendered": "", "breadcrumb": "Props"},
{"href": "./api/Encode.html#value-pct", "title": "pct", "contents": "pct float Js Json t ", "rendered": "<h4 class='item'>let pct: float => Js.Json.t</h4>", "breadcrumb": "Encode"},
{"href": "./api/Encode.html#value-interpolatedValue", "title": "interpolatedValue", "contents": "interpolatedValue BsReactNative AnimatedRe Interpolation t Js Json t ", "rendered": "<h4 class='item'>let interpolatedValue: BsReactNative.AnimatedRe.Interpolation.t => Js.Json.t</h4>", "breadcrumb": "Encode"},
{"href": "./api/Encode.html#value-animatedValue", "title": "animatedValue", "contents": "animatedValue BsReactNative AnimatedRe Value t Js Json t ", "rendered": "<h4 class='item'>let animatedValue: BsReactNative.AnimatedRe.Value.t => Js.Json.t</h4>", "breadcrumb": "Encode"},
{"href": "./api/Encode.html#value-array", "title": "array", "contents": "array array Js Json t Js Json t ", "rendered": "<h4 class='item'>let array: array(Js.Json.t) => Js.Json.t</h4>", "breadcrumb": "Encode"},
{"href": "./api/Encode.html#value-object_", "title": "object_", "contents": " object_ dict makes a JSON objet of the dict", "rendered": " [object_ dict] makes a JSON objet of the [Js.Dict.t] [dict]", "breadcrumb": "Encode"},
{"href": "./api/Encode.html#value-object_", "title": "object_", "contents": "object_ Js_dict t Js Json t Js Json t ", "rendered": "<h4 class='item'>let object_: Js_dict.t(Js.Json.t) => Js.Json.t</h4>", "breadcrumb": "Encode"},
{"href": "./api/Encode.html#value-boolean", "title": "boolean", "contents": " boolean b makes a JSON boolean of the b", "rendered": " [boolean b] makes a JSON boolean of the [bool] [b]", "breadcrumb": "Encode"},
{"href": "./api/Encode.html#value-boolean", "title": "boolean", "contents": "boolean bool Js Json t ", "rendered": "<h4 class='item'>let boolean: bool => Js.Json.t</h4>", "breadcrumb": "Encode"},
{"href": "./api/Encode.html#value-int", "title": "int", "contents": " int n makes a JSON number of the n", "rendered": " [int n] makes a JSON number of the [int] [n]", "breadcrumb": "Encode"},
{"href": "./api/Encode.html#value-int", "title": "int", "contents": "int int Js Json t ", "rendered": "<h4 class='item'>let int: int => Js.Json.t</h4>", "breadcrumb": "Encode"},
{"href": "./api/Encode.html#value-float", "title": "float", "contents": " float n makes a JSON number of the n", "rendered": " [float n] makes a JSON number of the [float] [n]", "breadcrumb": "Encode"},
{"href": "./api/Encode.html#value-float", "title": "float", "contents": "float float Js Json t ", "rendered": "<h4 class='item'>let float: float => Js.Json.t</h4>", "breadcrumb": "Encode"},
{"href": "./api/Encode.html#value-string", "title": "string", "contents": " string s makes a JSON string of the s", "rendered": " [string s] makes a JSON string of the [string] [s]", "breadcrumb": "Encode"},
{"href": "./api/Encode.html#value-string", "title": "string", "contents": "string string Js Json t ", "rendered": "<h4 class='item'>let string: string => Js.Json.t</h4>", "breadcrumb": "Encode"},
{"href": "./api/Encode.html", "title": "Encode", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Encode"},
{"href": "./api/Encode.html", "title": "Encode", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Encode"},
{"href": "./api/Encode.html#Encode", "title": "Encode", "contents": "", "rendered": "", "breadcrumb": "Encode"},
{"href": "./api/Platform.html#value-version", "title": "version", "contents": " Raises UnknownVersion if version is undefined, i.e. in react-native-web", "rendered": " Raises UnknownVersion if version is undefined, i.e. in react-native-web", "breadcrumb": "Platform"},
{"href": "./api/Platform.html#value-version", "title": "version", "contents": "version unit int ", "rendered": "<h4 class='item'>let version: unit => int</h4>", "breadcrumb": "Platform"},
{"href": "./api/Platform.html#value-equals", "title": "equals", "contents": "equals os bool ", "rendered": "<h4 class='item'>let equals: <a href=\"./api/Platform.html#type-os\">os</a> => bool</h4>", "breadcrumb": "Platform"},
{"href": "./api/Platform.html#value-os", "title": "os", "contents": " Raises UnknownPlatform for non-standard platforms such as &quot;web&quot;\n from react-native-web", "rendered": " Raises UnknownPlatform for non-standard platforms such as &quot;web&quot;\n from react-native-web", "breadcrumb": "Platform"},
{"href": "./api/Platform.html#value-os", "title": "os", "contents": "os unit os ", "rendered": "<h4 class='item'>let os: unit => <a href=\"./api/Platform.html#type-os\">os</a></h4>", "breadcrumb": "Platform"},
{"href": "./api/Platform.html#type-os", "title": "os", "contents": "os iosIdiom", "rendered": "<h4 class='item'>type os = | IOS(<a href=\"./api/Platform.html#type-iosIdiom\">iosIdiom</a>) | Android\n</h4>", "breadcrumb": "Platform"},
{"href": "./api/Platform.html#type-iosIdiom", "title": "iosIdiom", "contents": "iosIdiom ", "rendered": "<h4 class='item'>type iosIdiom = | Phone | Pad | TV\n</h4>", "breadcrumb": "Platform"},
{"href": "./api/Platform.html", "title": "Platform", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Platform"},
{"href": "./api/Platform.html", "title": "Platform", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Platform"},
{"href": "./api/Platform.html#Platform", "title": "Platform", "contents": "", "rendered": "", "breadcrumb": "Platform"},
{"href": "./api/PixelRatio.html#value-roundToNearestPixel", "title": "roundToNearestPixel", "contents": "roundToNearestPixel float float ", "rendered": "<h4 class='item'>let roundToNearestPixel: float => float</h4>", "breadcrumb": "PixelRatio"},
{"href": "./api/PixelRatio.html#value-getPixelSizeForLayoutSize", "title": "getPixelSizeForLayoutSize", "contents": "getPixelSizeForLayoutSize int int ", "rendered": "<h4 class='item'>let getPixelSizeForLayoutSize: int => int</h4>", "breadcrumb": "PixelRatio"},
{"href": "./api/PixelRatio.html#value-getFontScale", "title": "getFontScale", "contents": "getFontScale unit float ", "rendered": "<h4 class='item'>let getFontScale: unit => float</h4>", "breadcrumb": "PixelRatio"},
{"href": "./api/PixelRatio.html#value-get", "title": "get", "contents": "get unit float ", "rendered": "<h4 class='item'>let get: unit => float</h4>", "breadcrumb": "PixelRatio"},
{"href": "./api/PixelRatio.html", "title": "PixelRatio", "contents": "@rest", "rendered": "@rest", "breadcrumb": "PixelRatio"},
{"href": "./api/PixelRatio.html", "title": "PixelRatio", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "PixelRatio"},
{"href": "./api/PixelRatio.html#PixelRatio", "title": "PixelRatio", "contents": "", "rendered": "", "breadcrumb": "PixelRatio"},
{"href": "./api/PanResponder.html#value-panHandlers", "title": "panHandlers", "contents": "panHandlers t BsReactNative Types touchResponderHandlers ", "rendered": "<h4 class='item'>let panHandlers: <a href=\"./api/PanResponder.html#type-t\">t</a> => BsReactNative.Types.touchResponderHandlers</h4>", "breadcrumb": "PanResponder"},
{"href": "./api/PanResponder.html#value-create", "title": "create", "contents": "create option callback bool option callback bool option callback bool option callback bool option callback unit option callback unit option callback unit option callback unit option callback unit option option callback unit option callback bool option callback bool unit t onMoveShouldSetPanResponder onMoveShouldSetPanResponderCapture onStartShouldSetPanResponder onStartShouldSetPanResponderCapture onPanResponderReject onPanResponderGrant onPanResponderStart onPanResponderEnd onPanResponderRelease onPanResponderMove onPanResponderTerminate onPanResponderTerminationRequest onShouldBlockNativeResponder ", "rendered": "<h4 class='item'>let create: (\n  ~?onMoveShouldSetPanResponder: option(<a href=\"./api/PanResponder.html#type-callback\">callback</a>(bool)),\n  ~?onMoveShouldSetPanResponderCapture: option(\n    <a href=\"./api/PanResponder.html#type-callback\">callback</a>(bool)\n  ),\n  ~?onStartShouldSetPanResponder: option(<a href=\"./api/PanResponder.html#type-callback\">callback</a>(bool)),\n  ~?onStartShouldSetPanResponderCapture: option(\n    <a href=\"./api/PanResponder.html#type-callback\">callback</a>(bool)\n  ),\n  ~?onPanResponderReject: option(<a href=\"./api/PanResponder.html#type-callback\">callback</a>(unit)),\n  ~?onPanResponderGrant: option(<a href=\"./api/PanResponder.html#type-callback\">callback</a>(unit)),\n  ~?onPanResponderStart: option(<a href=\"./api/PanResponder.html#type-callback\">callback</a>(unit)),\n  ~?onPanResponderEnd: option(<a href=\"./api/PanResponder.html#type-callback\">callback</a>(unit)),\n  ~?onPanResponderRelease: option(<a href=\"./api/PanResponder.html#type-callback\">callback</a>(unit)),\n  ~?onPanResponderMove: option(\n    [ `update of\n    [ `X of BsReactNative.AnimatedRe.Value.t\n    | `XY of BsReactNative.AnimatedRe.ValueXY.t\n    | `Y of BsReactNative.AnimatedRe.Value.t ] list\n| `callback of unit callback ]\n  ),\n  ~?onPanResponderTerminate: option(<a href=\"./api/PanResponder.html#type-callback\">callback</a>(unit)),\n  ~?onPanResponderTerminationRequest: option(\n    <a href=\"./api/PanResponder.html#type-callback\">callback</a>(bool)\n  ),\n  ~?onShouldBlockNativeResponder: option(<a href=\"./api/PanResponder.html#type-callback\">callback</a>(bool)),\n  unit\n) => <a href=\"./api/PanResponder.html#type-t\">t</a></h4>", "breadcrumb": "PanResponder"},
{"href": "./api/PanResponder.html#value-callback", "title": "callback", "contents": "callback BsReactNative RNEvent NativeEvent t gestureState   callback ", "rendered": "<h4 class='item'>let callback: (\n  BsReactNative.RNEvent.NativeEvent.t,\n  <a href=\"./api/PanResponder.html#type-gestureState\">gestureState</a>\n) => 'a => <a href=\"./api/PanResponder.html#type-callback\">callback</a>('a)</h4>", "breadcrumb": "PanResponder"},
{"href": "./api/PanResponder.html#type-callback", "title": "callback", "contents": "callback ", "rendered": "<h4 class='item'>type callback('a)</h4>", "breadcrumb": "PanResponder"},
{"href": "./api/PanResponder.html#type-gestureState", "title": "gestureState", "contents": "gestureState stateID float moveX float moveY float x0 float y0 float dx float dy float vx float vy float numberActiveTouches int", "rendered": "<h4 class='item'>type gestureState = {\n  stateID: float,\n  moveX: float,\n  moveY: float,\n  x0: float,\n  y0: float,\n  dx: float,\n  dy: float,\n  vx: float,\n  vy: float,\n  numberActiveTouches: int\n}</h4>", "breadcrumb": "PanResponder"},
{"href": "./api/PanResponder.html#type-t", "title": "t", "contents": "t ", "rendered": "<h4 class='item'>type t</h4>", "breadcrumb": "PanResponder"},
{"href": "./api/PanResponder.html", "title": "PanResponder", "contents": "@rest", "rendered": "@rest", "breadcrumb": "PanResponder"},
{"href": "./api/PanResponder.html", "title": "PanResponder", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "PanResponder"},
{"href": "./api/PanResponder.html#PanResponder", "title": "PanResponder", "contents": "", "rendered": "", "breadcrumb": "PanResponder"},
{"href": "./api/Packager.html#value-require", "title": "require", "contents": "require string required ", "rendered": "<h4 class='item'>let require: string => <a href=\"./api/Packager.html#type-required\">required</a></h4>", "breadcrumb": "Packager"},
{"href": "./api/Packager.html#type-required", "title": "required", "contents": "required ", "rendered": "<h4 class='item'>type required</h4>", "breadcrumb": "Packager"},
{"href": "./api/Packager.html", "title": "Packager", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Packager"},
{"href": "./api/Packager.html", "title": "Packager", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Packager"},
{"href": "./api/Packager.html#Packager", "title": "Packager", "contents": "", "rendered": "", "breadcrumb": "Packager"},
{"href": "./api/NetInfo.html#value-IsConnected.fetch", "title": "IsConnected.fetch", "contents": "fetch unit Js Promise t bool ", "rendered": "<h4 class='item'>let fetch: unit => Js.Promise.t(bool)</h4>", "breadcrumb": "NetInfo"},
{"href": "./api/NetInfo.html#value-IsConnected.removeEventListener", "title": "IsConnected.removeEventListener", "contents": "removeEventListener bool unit  unit ", "rendered": "<h4 class='item'>let removeEventListener: bool => unit => unit</h4>", "breadcrumb": "NetInfo"},
{"href": "./api/NetInfo.html#value-IsConnected.addEventListener", "title": "IsConnected.addEventListener", "contents": "addEventListener bool unit  unit ", "rendered": "<h4 class='item'>let addEventListener: bool => unit => unit</h4>", "breadcrumb": "NetInfo"},
{"href": "./api/NetInfo.html#module-IsConnected", "title": "IsConnected", "contents": "@rest", "rendered": "@rest", "breadcrumb": "NetInfo"},
{"href": "./api/NetInfo.html#module-IsConnected", "title": "IsConnected", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "NetInfo"},
{"href": "./api/NetInfo.html#value-getConnectionInfo", "title": "getConnectionInfo", "contents": "getConnectionInfo unit Js Promise t info ", "rendered": "<h4 class='item'>let getConnectionInfo: unit => Js.Promise.t(<a href=\"./api/NetInfo.html#type-info\">info</a>)</h4>", "breadcrumb": "NetInfo"},
{"href": "./api/NetInfo.html#value-isConnectionExpensive", "title": "isConnectionExpensive", "contents": "isConnectionExpensive unit Js Promise t bool ", "rendered": "<h4 class='item'>let isConnectionExpensive: unit => Js.Promise.t(bool)</h4>", "breadcrumb": "NetInfo"},
{"href": "./api/NetInfo.html#value-removeEventListener", "title": "removeEventListener", "contents": "removeEventListener info unit  unit ", "rendered": "<h4 class='item'>let removeEventListener: <a href=\"./api/NetInfo.html#type-info\">info</a> => unit => unit</h4>", "breadcrumb": "NetInfo"},
{"href": "./api/NetInfo.html#value-addEventListener", "title": "addEventListener", "contents": "addEventListener info unit  unit ", "rendered": "<h4 class='item'>let addEventListener: <a href=\"./api/NetInfo.html#type-info\">info</a> => unit => unit</h4>", "breadcrumb": "NetInfo"},
{"href": "./api/NetInfo.html#value-effectiveConnectionType", "title": "effectiveConnectionType", "contents": "effectiveConnectionType infoEffectiveType effectiveConnectionType ", "rendered": "<h4 class='item'>let effectiveConnectionType: <a href=\"./api/NetInfo.html#type-infoEffectiveType\">infoEffectiveType</a> => <a href=\"./api/NetInfo.html#type-effectiveConnectionType\">effectiveConnectionType</a></h4>", "breadcrumb": "NetInfo"},
{"href": "./api/NetInfo.html#value-connectionType", "title": "connectionType", "contents": "connectionType infoType connectionType ", "rendered": "<h4 class='item'>let connectionType: <a href=\"./api/NetInfo.html#type-infoType\">infoType</a> => <a href=\"./api/NetInfo.html#type-connectionType\">connectionType</a></h4>", "breadcrumb": "NetInfo"},
{"href": "./api/NetInfo.html#type-info", "title": "info", "contents": "info Js t", "rendered": "<h4 class='item'>type info = Js.t(\n  &lt; _type : infoType; effectiveType : infoEffectiveType &gt;\n)</h4>", "breadcrumb": "NetInfo"},
{"href": "./api/NetInfo.html#type-effectiveConnectionType", "title": "effectiveConnectionType", "contents": "effectiveConnectionType ", "rendered": "<h4 class='item'>type effectiveConnectionType = \n  | Net2G\n  | Net3G\n  | Net4G\n  | Unknown\n</h4>", "breadcrumb": "NetInfo"},
{"href": "./api/NetInfo.html#type-connectionType", "title": "connectionType", "contents": "connectionType ", "rendered": "<h4 class='item'>type connectionType = \n  | None\n  | WiFi\n  | Cellular\n  | Unknown\n  | Bluetooth\n  | Ethernet\n  | WiMax\n</h4>", "breadcrumb": "NetInfo"},
{"href": "./api/NetInfo.html#type-infoEffectiveType", "title": "infoEffectiveType", "contents": "infoEffectiveType ", "rendered": "<h4 class='item'>type infoEffectiveType</h4>", "breadcrumb": "NetInfo"},
{"href": "./api/NetInfo.html#type-infoType", "title": "infoType", "contents": "infoType ", "rendered": "<h4 class='item'>type infoType</h4>", "breadcrumb": "NetInfo"},
{"href": "./api/NetInfo.html", "title": "NetInfo", "contents": "@rest", "rendered": "@rest", "breadcrumb": "NetInfo"},
{"href": "./api/NetInfo.html", "title": "NetInfo", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "NetInfo"},
{"href": "./api/NetInfo.html#NetInfo", "title": "NetInfo", "contents": "", "rendered": "", "breadcrumb": "NetInfo"},
{"href": "./api/NativeModules.html#value-requireNativeComponent", "title": "requireNativeComponent", "contents": "requireNativeComponent string ReasonReact reactClass ", "rendered": "<h4 class='item'>let requireNativeComponent: string => ReasonReact.reactClass</h4>", "breadcrumb": "NativeModules"},
{"href": "./api/NativeModules.html#value-get", "title": "get", "contents": "get string t ", "rendered": "<h4 class='item'>let get: string => <a href=\"./api/NativeModules.html#type-t\">t</a>('a)</h4>", "breadcrumb": "NativeModules"},
{"href": "./api/NativeModules.html#type-t", "title": "t", "contents": "t Js t", "rendered": "<h4 class='item'>type t('a) = Js.t('a)</h4>", "breadcrumb": "NativeModules"},
{"href": "./api/NativeModules.html", "title": "NativeModules", "contents": "@rest", "rendered": "@rest", "breadcrumb": "NativeModules"},
{"href": "./api/NativeModules.html", "title": "NativeModules", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "NativeModules"},
{"href": "./api/NativeModules.html#NativeModules", "title": "NativeModules", "contents": "", "rendered": "", "breadcrumb": "NativeModules"},
{"href": "./api/NativeEventEmitter.html#value-Subscription.remove", "title": "Subscription.remove", "contents": "remove emitterSubscription unit unit  ", "rendered": "<h4 class='item'>let remove: (<a href=\"./api/NativeEventEmitter.html#type-emitterSubscription\">emitterSubscription</a>, unit) => unit</h4>", "breadcrumb": "NativeEventEmitter"},
{"href": "./api/NativeEventEmitter.html#module-Subscription", "title": "Subscription", "contents": "@rest", "rendered": "@rest", "breadcrumb": "NativeEventEmitter"},
{"href": "./api/NativeEventEmitter.html#module-Subscription", "title": "Subscription", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "NativeEventEmitter"},
{"href": "./api/NativeEventEmitter.html#value-removeSubscription", "title": "removeSubscription", "contents": "removeSubscription t emitterSubscription unit  ", "rendered": "<h4 class='item'>let removeSubscription: (<a href=\"./api/NativeEventEmitter.html#type-t\">t</a>, <a href=\"./api/NativeEventEmitter.html#type-emitterSubscription\">emitterSubscription</a>) => unit</h4>", "breadcrumb": "NativeEventEmitter"},
{"href": "./api/NativeEventEmitter.html#value-removeAllListeners", "title": "removeAllListeners", "contents": "removeAllListeners t string unit  ", "rendered": "<h4 class='item'>let removeAllListeners: (<a href=\"./api/NativeEventEmitter.html#type-t\">t</a>, string) => unit</h4>", "breadcrumb": "NativeEventEmitter"},
{"href": "./api/NativeEventEmitter.html#value-addListener", "title": "addListener", "contents": "addListener t string unit  emitterSubscription   ", "rendered": "<h4 class='item'>let addListener: (\n  <a href=\"./api/NativeEventEmitter.html#type-t\">t</a>,\n  string,\n  'a => unit\n) => <a href=\"./api/NativeEventEmitter.html#type-emitterSubscription\">emitterSubscription</a></h4>", "breadcrumb": "NativeEventEmitter"},
{"href": "./api/NativeEventEmitter.html#value-create", "title": "create", "contents": "create BsReactNative NativeModules t t ", "rendered": "<h4 class='item'>let create: BsReactNative.NativeModules.t('a) => <a href=\"./api/NativeEventEmitter.html#type-t\">t</a></h4>", "breadcrumb": "NativeEventEmitter"},
{"href": "./api/NativeEventEmitter.html#type-emitterSubscription", "title": "emitterSubscription", "contents": "emitterSubscription ", "rendered": "<h4 class='item'>type emitterSubscription</h4>", "breadcrumb": "NativeEventEmitter"},
{"href": "./api/NativeEventEmitter.html#type-t", "title": "t", "contents": "t ", "rendered": "<h4 class='item'>type t</h4>", "breadcrumb": "NativeEventEmitter"},
{"href": "./api/NativeEventEmitter.html", "title": "NativeEventEmitter", "contents": "@rest", "rendered": "@rest", "breadcrumb": "NativeEventEmitter"},
{"href": "./api/NativeEventEmitter.html", "title": "NativeEventEmitter", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "NativeEventEmitter"},
{"href": "./api/NativeEventEmitter.html#NativeEventEmitter", "title": "NativeEventEmitter", "contents": "", "rendered": "", "breadcrumb": "NativeEventEmitter"},
{"href": "./api/Linking.html#value-removeEventListener", "title": "removeEventListener", "contents": "removeEventListener string Js t unit  unit  ", "rendered": "<h4 class='item'>let removeEventListener: (\n  string,\n  Js.t(&lt; url : string &gt;) => unit\n) => unit</h4>", "breadcrumb": "Linking"},
{"href": "./api/Linking.html#value-addEventListener", "title": "addEventListener", "contents": "addEventListener string Js t unit  unit  ", "rendered": "<h4 class='item'>let addEventListener: (\n  string,\n  Js.t(&lt; url : string &gt;) => unit\n) => unit</h4>", "breadcrumb": "Linking"},
{"href": "./api/Linking.html#value-getInitialURL", "title": "getInitialURL", "contents": "getInitialURL unit Js Promise t option string ", "rendered": "<h4 class='item'>let getInitialURL: unit => Js.Promise.t(option(string))</h4>", "breadcrumb": "Linking"},
{"href": "./api/Linking.html#value-openURL", "title": "openURL", "contents": "openURL string Js Promise t unit ", "rendered": "<h4 class='item'>let openURL: string => Js.Promise.t(unit)</h4>", "breadcrumb": "Linking"},
{"href": "./api/Linking.html#value-canOpenURL", "title": "canOpenURL", "contents": "canOpenURL string Js Promise t bool ", "rendered": "<h4 class='item'>let canOpenURL: string => Js.Promise.t(bool)</h4>", "breadcrumb": "Linking"},
{"href": "./api/Linking.html", "title": "Linking", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Linking"},
{"href": "./api/Linking.html", "title": "Linking", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Linking"},
{"href": "./api/Linking.html#Linking", "title": "Linking", "contents": "", "rendered": "", "breadcrumb": "Linking"},
{"href": "./api/Keyboard.html#value-Subscription.remove", "title": "Subscription.remove", "contents": "remove subscription unit ", "rendered": "<h4 class='item'>let remove: <a href=\"./api/Keyboard.html#type-subscription\">subscription</a> => unit</h4>", "breadcrumb": "Keyboard"},
{"href": "./api/Keyboard.html#module-Subscription", "title": "Subscription", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Keyboard"},
{"href": "./api/Keyboard.html#module-Subscription", "title": "Subscription", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Keyboard"},
{"href": "./api/Keyboard.html#value-removeListener", "title": "removeListener", "contents": "removeListener keyboardEvent listener Js t unit  ", "rendered": "<h4 class='item'>let removeListener: (\n  <a href=\"./api/Keyboard.html#type-keyboardEvent\">keyboardEvent</a>,\n  <a href=\"./api/Keyboard.html#type-listener\">listener</a>(\n    Js.t(\n      &lt; endCoordinates : &lt; height : float; screenX : float; screenY : float;\n                     width : float &gt;\n                   Js.t;\n  .. &gt;\n    )\n  )\n) => unit</h4>", "breadcrumb": "Keyboard"},
{"href": "./api/Keyboard.html#value-removeAllListeners", "title": "removeAllListeners", "contents": "removeAllListeners keyboardEvent unit ", "rendered": "<h4 class='item'>let removeAllListeners: <a href=\"./api/Keyboard.html#type-keyboardEvent\">keyboardEvent</a> => unit</h4>", "breadcrumb": "Keyboard"},
{"href": "./api/Keyboard.html#value-addListener", "title": "addListener", "contents": "addListener keyboardEvent listener Js t subscription  ", "rendered": "<h4 class='item'>let addListener: (\n  <a href=\"./api/Keyboard.html#type-keyboardEvent\">keyboardEvent</a>,\n  <a href=\"./api/Keyboard.html#type-listener\">listener</a>(\n    Js.t(\n      &lt; endCoordinates : &lt; height : float; screenX : float; screenY : float;\n                     width : float &gt;\n                   Js.t;\n  .. &gt;\n    )\n  )\n) => <a href=\"./api/Keyboard.html#type-subscription\">subscription</a></h4>", "breadcrumb": "Keyboard"},
{"href": "./api/Keyboard.html#value-dismiss", "title": "dismiss", "contents": "dismiss unit unit ", "rendered": "<h4 class='item'>let dismiss: unit => unit</h4>", "breadcrumb": "Keyboard"},
{"href": "./api/Keyboard.html#type-keyboardEvent", "title": "keyboardEvent", "contents": "keyboardEvent ", "rendered": "<h4 class='item'>type keyboardEvent = \n  | KeyboardWillShow\n  | KeyboardDidShow\n  | KeyboardWillHide\n  | KeyboardDidHide\n  | KeyboardWillChangeFrame\n  | KeyboardDidChangeFrame\n</h4>", "breadcrumb": "Keyboard"},
{"href": "./api/Keyboard.html#type-listener", "title": "listener", "contents": "listener Js t event Js t unit ", "rendered": "<h4 class='item'>type listener(\n  Js.t(\n    &lt; endCoordinates : &lt; height : float; screenX : float; screenY : float;\n                     width : float &gt;\n                   Js.t;\n  .. &gt;\n  )\n) = <a href=\"./api/Keyboard.html#type-event\">event</a>(\n  Js.t(\n    &lt; endCoordinates : &lt; height : float; screenX : float; screenY : float;\n                     width : float &gt;\n                   Js.t;\n  .. &gt;\n  )\n) => unit</h4>", "breadcrumb": "Keyboard"},
{"href": "./api/Keyboard.html#type-event", "title": "event", "contents": "event Js t Js t", "rendered": "<h4 class='item'>type event(\n  Js.t(\n    &lt; endCoordinates : &lt; height : float; screenX : float; screenY : float;\n                     width : float &gt;\n                   Js.t;\n  .. &gt;\n  )\n) = Js.t(\n  &lt; endCoordinates : &lt; height : float; screenX : float; screenY : float;\n                     width : float &gt;\n                   Js.t;\n  .. &gt;\n)</h4>", "breadcrumb": "Keyboard"},
{"href": "./api/Keyboard.html#type-subscription", "title": "subscription", "contents": "subscription ", "rendered": "<h4 class='item'>type subscription</h4>", "breadcrumb": "Keyboard"},
{"href": "./api/Keyboard.html", "title": "Keyboard", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Keyboard"},
{"href": "./api/Keyboard.html", "title": "Keyboard", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Keyboard"},
{"href": "./api/Keyboard.html#Keyboard", "title": "Keyboard", "contents": "", "rendered": "", "breadcrumb": "Keyboard"},
{"href": "./api/Geolocation.html#value-clearWatch", "title": "clearWatch", "contents": "clearWatch watchId unit ", "rendered": "<h4 class='item'>let clearWatch: <a href=\"./api/Geolocation.html#type-watchId\">watchId</a> => unit</h4>", "breadcrumb": "Geolocation"},
{"href": "./api/Geolocation.html#value-watchPosition", "title": "watchPosition", "contents": "watchPosition option int option int option bool option int option bool position unit  error unit  watchId timeout maximumAge enableHighAccuracy distanceFilter useSignificantChanges  ", "rendered": "<h4 class='item'>let watchPosition: (\n  ~?timeout: option(int),\n  ~?maximumAge: option(int),\n  ~?enableHighAccuracy: option(bool),\n  ~?distanceFilter: option(int),\n  ~?useSignificantChanges: option(bool),\n  <a href=\"./api/Geolocation.html#type-position\">position</a> => unit,\n  <a href=\"./api/Geolocation.html#type-error\">error</a> => unit\n) => <a href=\"./api/Geolocation.html#type-watchId\">watchId</a></h4>", "breadcrumb": "Geolocation"},
{"href": "./api/Geolocation.html#value-getCurrentPosition", "title": "getCurrentPosition", "contents": "getCurrentPosition option int option int option bool position unit  error unit  unit timeout maximumAge enableHighAccuracy  ", "rendered": "<h4 class='item'>let getCurrentPosition: (\n  ~?timeout: option(int),\n  ~?maximumAge: option(int),\n  ~?enableHighAccuracy: option(bool),\n  <a href=\"./api/Geolocation.html#type-position\">position</a> => unit,\n  <a href=\"./api/Geolocation.html#type-error\">error</a> => unit\n) => unit</h4>", "breadcrumb": "Geolocation"},
{"href": "./api/Geolocation.html#value-stopObserving", "title": "stopObserving", "contents": "stopObserving unit unit ", "rendered": "<h4 class='item'>let stopObserving: unit => unit</h4>", "breadcrumb": "Geolocation"},
{"href": "./api/Geolocation.html#value-requestAuthorization", "title": "requestAuthorization", "contents": "requestAuthorization unit unit ", "rendered": "<h4 class='item'>let requestAuthorization: unit => unit</h4>", "breadcrumb": "Geolocation"},
{"href": "./api/Geolocation.html#value-setRNConfiguration", "title": "setRNConfiguration", "contents": "setRNConfiguration option bool unit unit skipPermissionRequests ", "rendered": "<h4 class='item'>let setRNConfiguration: (\n  ~?skipPermissionRequests: option(bool),\n  unit\n) => unit</h4>", "breadcrumb": "Geolocation"},
{"href": "./api/Geolocation.html#type-error", "title": "error", "contents": "error Js t", "rendered": "<h4 class='item'>type error = Js.t(&lt; code : int; message : string &gt;)</h4>", "breadcrumb": "Geolocation"},
{"href": "./api/Geolocation.html#type-coords", "title": "coords", "contents": "coords Js t", "rendered": "<h4 class='item'>type coords = Js.t(\n  &lt; accuracy : int; heading : int; latitude : float; longitude : float;\n  speed : int &gt;\n)</h4>", "breadcrumb": "Geolocation"},
{"href": "./api/Geolocation.html#type-position", "title": "position", "contents": "position Js t", "rendered": "<h4 class='item'>type position = Js.t(\n  &lt; coords : coords; timestamp : float &gt;\n)</h4>", "breadcrumb": "Geolocation"},
{"href": "./api/Geolocation.html#type-watchId", "title": "watchId", "contents": "watchId int", "rendered": "<h4 class='item'>type watchId = int</h4>", "breadcrumb": "Geolocation"},
{"href": "./api/Geolocation.html", "title": "Geolocation", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Geolocation"},
{"href": "./api/Geolocation.html", "title": "Geolocation", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Geolocation"},
{"href": "./api/Geolocation.html#Geolocation", "title": "Geolocation", "contents": "", "rendered": "", "breadcrumb": "Geolocation"},
{"href": "./api/Dimensions.html#value-removeEventListener", "title": "removeEventListener", "contents": "removeEventListener string Js t unit  unit  ", "rendered": "<h4 class='item'>let removeEventListener: (\n  string,\n  Js.t(\n    &lt; screen : dimensions; window : dimensions &gt;\n  ) => unit\n) => unit</h4>", "breadcrumb": "Dimensions"},
{"href": "./api/Dimensions.html#value-addEventListener", "title": "addEventListener", "contents": "addEventListener string Js t unit  unit  ", "rendered": "<h4 class='item'>let addEventListener: (\n  string,\n  Js.t(\n    &lt; screen : dimensions; window : dimensions &gt;\n  ) => unit\n) => unit</h4>", "breadcrumb": "Dimensions"},
{"href": "./api/Dimensions.html#value-get", "title": "get", "contents": "get dimensions ", "rendered": "<h4 class='item'>let get: [&lt; `screen | `window ] => <a href=\"./api/Dimensions.html#type-dimensions\">dimensions</a></h4>", "breadcrumb": "Dimensions"},
{"href": "./api/Dimensions.html#type-dimensions", "title": "dimensions", "contents": "dimensions Js t", "rendered": "<h4 class='item'>type dimensions = Js.t(\n  &lt; fontScale : float; height : int; scale : float; width : int &gt;\n)</h4>", "breadcrumb": "Dimensions"},
{"href": "./api/Dimensions.html", "title": "Dimensions", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Dimensions"},
{"href": "./api/Dimensions.html", "title": "Dimensions", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Dimensions"},
{"href": "./api/Dimensions.html#Dimensions", "title": "Dimensions", "contents": "", "rendered": "", "breadcrumb": "Dimensions"},
{"href": "./api/DatePickerAndroid.html#value-open_", "title": "open_", "contents": "open_ Js Date t option Js Date t option Js Date t option mode unit Js Promise t action date minDate maxDate mode ", "rendered": "<h4 class='item'>let open_: (\n  ~date: Js.Date.t,\n  ~?minDate: option(Js.Date.t),\n  ~?maxDate: option(Js.Date.t),\n  ~?mode: option(<a href=\"./api/DatePickerAndroid.html#type-mode\">mode</a>),\n  unit\n) => Js.Promise.t(<a href=\"./api/DatePickerAndroid.html#type-action\">action</a>)</h4>", "breadcrumb": "DatePickerAndroid"},
{"href": "./api/DatePickerAndroid.html#type-mode", "title": "mode", "contents": "mode ", "rendered": "<h4 class='item'>type mode = | Calendar | Spinner | Default\n</h4>", "breadcrumb": "DatePickerAndroid"},
{"href": "./api/DatePickerAndroid.html#type-action", "title": "action", "contents": "action response", "rendered": "<h4 class='item'>type action = | Dismissed | Set(<a href=\"./api/DatePickerAndroid.html#type-response\">response</a>)\n</h4>", "breadcrumb": "DatePickerAndroid"},
{"href": "./api/DatePickerAndroid.html#type-response", "title": "response", "contents": "response year int month int day int", "rendered": "<h4 class='item'>type response = {year: int, month: int, day: int}</h4>", "breadcrumb": "DatePickerAndroid"},
{"href": "./api/DatePickerAndroid.html", "title": "DatePickerAndroid", "contents": "@rest", "rendered": "@rest", "breadcrumb": "DatePickerAndroid"},
{"href": "./api/DatePickerAndroid.html", "title": "DatePickerAndroid", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "DatePickerAndroid"},
{"href": "./api/DatePickerAndroid.html#DatePickerAndroid", "title": "DatePickerAndroid", "contents": "", "rendered": "", "breadcrumb": "DatePickerAndroid"},
{"href": "./api/WebView.html#value-make", "title": "make", "contents": "make option source option BsReactNative Style t option unit ReasonReact reactElement  option unit ReasonReact reactElement  option Js t unit  option Js t unit  option Js t unit  option Js t unit  option bool option contentInsets option ReasonReact reactElement option bool option BsReactNative Types insets option unit unit  option BsReactNative RNEvent NativeLayoutEvent t unit  option unit unit  option BsReactNative Types touchResponderHandlers option option bool option string option option option bool option option bool option bool option list option bool option bool option string unit  option string option bool option BsReactNative RNEvent NativeEvent t unit  option Js t unit  option bool option bool option bool option bool option list option bool option string option bool option bool option list option list option iOSLoadRequestEvent bool  option bool array ReasonReact reactElement ReasonReact component ReasonReact stateless ReasonReact noRetainedProps unit source style renderError renderLoading onError onLoad onLoadEnd onLoadStart automaticallyAdjustContentInsets contentInsets accessibilityLabel accessible hitSlop onAccessibilityTap onLayout onMagicTap responderHandlers pointerEvents removeClippedSubviews testID accessibilityComponentType accessibilityLiveRegion collapsable importantForAccessibility needsOffscreenAlphaCompositing renderToHardwareTextureAndroid accessibilityTraits accessibilityViewIsModal shouldRasterizeIOS injectJavaScript injectedJavaScript mediaPlaybackRequiresUserAction onMessage onNavigationStateChange scalesPageToFit startInLoadingState domStorageEnabled javaScriptEnabled mixedContentMode thirdPartyCookiesEnabled userAgent allowsInlineMediaPlayback bounces dataDetectorTypes decelerationRate onShouldStartLoadWithRequest scrollEnabled ", "rendered": "<h4 class='item'>let make: (\n  ~?source: option(<a href=\"./api/WebView.html#type-source\">source</a>),\n  ~?style: option(BsReactNative.Style.t),\n  ~?renderError: option(unit => ReasonReact.reactElement),\n  ~?renderLoading: option(unit => ReasonReact.reactElement),\n  ~?onError: option(\n    Js.t(\n      &lt; canGoBack : bool option; canGoForward : bool option; loading : bool option;\n  title : string option; url : string option &gt;\n    ) => unit\n  ),\n  ~?onLoad: option(\n    Js.t(\n      &lt; canGoBack : bool option; canGoForward : bool option; loading : bool option;\n  title : string option; url : string option &gt;\n    ) => unit\n  ),\n  ~?onLoadEnd: option(\n    Js.t(\n      &lt; canGoBack : bool option; canGoForward : bool option; loading : bool option;\n  title : string option; url : string option &gt;\n    ) => unit\n  ),\n  ~?onLoadStart: option(\n    Js.t(\n      &lt; canGoBack : bool option; canGoForward : bool option; loading : bool option;\n  title : string option; url : string option &gt;\n    ) => unit\n  ),\n  ~?automaticallyAdjustContentInsets: option(bool),\n  ~?contentInsets: option(<a href=\"./api/WebView.html#type-contentInsets\">contentInsets</a>),\n  ~?accessibilityLabel: option(ReasonReact.reactElement),\n  ~?accessible: option(bool),\n  ~?hitSlop: option(BsReactNative.Types.insets),\n  ~?onAccessibilityTap: option(unit => unit),\n  ~?onLayout: option(\n    BsReactNative.RNEvent.NativeLayoutEvent.t => unit\n  ),\n  ~?onMagicTap: option(unit => unit),\n  ~?responderHandlers: option(\n    BsReactNative.Types.touchResponderHandlers\n  ),\n  ~?pointerEvents: option(\n    [ `none | `boxOnly | `auto | `boxNone ]\n  ),\n  ~?removeClippedSubviews: option(bool),\n  ~?testID: option(string),\n  ~?accessibilityComponentType: option(\n    [ `button | `none | `radiobutton_checked | `radiobutton_unchecked ]\n  ),\n  ~?accessibilityLiveRegion: option(\n    [ `none | `polite | `assertive ]\n  ),\n  ~?collapsable: option(bool),\n  ~?importantForAccessibility: option(\n    [ `no | `yes | `noHideDescendants | `auto ]\n  ),\n  ~?needsOffscreenAlphaCompositing: option(bool),\n  ~?renderToHardwareTextureAndroid: option(bool),\n  ~?accessibilityTraits: option(\n    list(\n      [ `frequentUpdates\n| `adjustable\n| `image\n| `button\n| `header\n| `none\n| `plays\n| `text\n| `startsMedia\n| `disabled\n| `link\n| `pageTurn\n| `selected\n| `allowsDirectInteraction\n| `summary\n| `search\n| `key ]\n    )\n  ),\n  ~?accessibilityViewIsModal: option(bool),\n  ~?shouldRasterizeIOS: option(bool),\n  ~?injectJavaScript: option(string => unit),\n  ~?injectedJavaScript: option(string),\n  ~?mediaPlaybackRequiresUserAction: option(bool),\n  ~?onMessage: option(\n    BsReactNative.RNEvent.NativeEvent.t => unit\n  ),\n  ~?onNavigationStateChange: option(\n    Js.t(\n      &lt; canGoBack : bool option; canGoForward : bool option; loading : bool option;\n  title : string option; url : string option &gt;\n    ) => unit\n  ),\n  ~?scalesPageToFit: option(bool),\n  ~?startInLoadingState: option(bool),\n  ~?domStorageEnabled: option(bool),\n  ~?javaScriptEnabled: option(bool),\n  ~?mixedContentMode: option(\n    list([ `compatibility | `never | `always ])\n  ),\n  ~?thirdPartyCookiesEnabled: option(bool),\n  ~?userAgent: option(string),\n  ~?allowsInlineMediaPlayback: option(bool),\n  ~?bounces: option(bool),\n  ~?dataDetectorTypes: option(\n    list(\n      [ `none | `all | `link | `calendarEvent | `address | `phoneNumber ]\n    )\n  ),\n  ~?decelerationRate: option(\n    list([ `value of float | `normal | `fast ])\n  ),\n  ~?onShouldStartLoadWithRequest: option(\n    <a href=\"./api/WebView.html#type-iOSLoadRequestEvent\">iOSLoadRequestEvent</a> => bool\n  ),\n  ~?scrollEnabled: option(bool),\n  array(ReasonReact.reactElement)\n) => ReasonReact.component(\n  ReasonReact.stateless,\n  ReasonReact.noRetainedProps,\n  unit\n)</h4>", "breadcrumb": "WebView"},
{"href": "./api/WebView.html#value-stopLoading", "title": "stopLoading", "contents": "stopLoading ReasonReact reactRef unit ", "rendered": "<h4 class='item'>let stopLoading: ReasonReact.reactRef => unit</h4>", "breadcrumb": "WebView"},
{"href": "./api/WebView.html#value-reload", "title": "reload", "contents": "reload ReasonReact reactRef unit ", "rendered": "<h4 class='item'>let reload: ReasonReact.reactRef => unit</h4>", "breadcrumb": "WebView"},
{"href": "./api/WebView.html#value-goBack", "title": "goBack", "contents": "goBack ReasonReact reactRef unit ", "rendered": "<h4 class='item'>let goBack: ReasonReact.reactRef => unit</h4>", "breadcrumb": "WebView"},
{"href": "./api/WebView.html#value-goForward", "title": "goForward", "contents": "goForward ReasonReact reactRef unit ", "rendered": "<h4 class='item'>let goForward: ReasonReact.reactRef => unit</h4>", "breadcrumb": "WebView"},
{"href": "./api/WebView.html#value-contentInsets", "title": "contentInsets", "contents": "contentInsets option int option int option int option int unit contentInsets top left bottom right ", "rendered": "<h4 class='item'>let contentInsets: (\n  ~?top: option(int),\n  ~?left: option(int),\n  ~?bottom: option(int),\n  ~?right: option(int),\n  unit\n) => <a href=\"./api/WebView.html#type-contentInsets\">contentInsets</a></h4>", "breadcrumb": "WebView"},
{"href": "./api/WebView.html#type-contentInsets", "title": "contentInsets", "contents": "contentInsets ", "rendered": "<h4 class='item'>type contentInsets</h4>", "breadcrumb": "WebView"},
{"href": "./api/WebView.html#type-iOSLoadRequestEvent", "title": "iOSLoadRequestEvent", "contents": "iOSLoadRequestEvent Js t", "rendered": "<h4 class='item'>type iOSLoadRequestEvent = Js.t(\n  &lt; canGoBack : bool; canGoForward : bool; loading : bool;\n  lockIdentifier : int; navigationType : string; target : int;\n  title : string; url : string &gt;\n)</h4>", "breadcrumb": "WebView"},
{"href": "./api/WebView.html#value-source", "title": "source", "contents": "source option string option string option Js t option string unit source uri method headers body ", "rendered": "<h4 class='item'>let source: (\n  ~?uri: option(string),\n  ~?method: option(string),\n  ~?headers: option(Js.t('a)),\n  ~?body: option(string),\n  unit\n) => <a href=\"./api/WebView.html#type-source\">source</a></h4>", "breadcrumb": "WebView"},
{"href": "./api/WebView.html#value-sourceHtml", "title": "sourceHtml", "contents": "sourceHtml option string option string unit source html baseUrl ", "rendered": "<h4 class='item'>let sourceHtml: (\n  ~?html: option(string),\n  ~?baseUrl: option(string),\n  unit\n) => <a href=\"./api/WebView.html#type-source\">source</a></h4>", "breadcrumb": "WebView"},
{"href": "./api/WebView.html#value-sourceUri", "title": "sourceUri", "contents": "sourceUri option string option string option Js t option string unit source uri method headers body ", "rendered": "<h4 class='item'>let sourceUri: (\n  ~?uri: option(string),\n  ~?method: option(string),\n  ~?headers: option(Js.t('a)),\n  ~?body: option(string),\n  unit\n) => <a href=\"./api/WebView.html#type-source\">source</a></h4>", "breadcrumb": "WebView"},
{"href": "./api/WebView.html#type-source", "title": "source", "contents": "source ", "rendered": "<h4 class='item'>type source</h4>", "breadcrumb": "WebView"},
{"href": "./api/WebView.html", "title": "WebView", "contents": "@rest", "rendered": "@rest", "breadcrumb": "WebView"},
{"href": "./api/WebView.html", "title": "WebView", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "WebView"},
{"href": "./api/WebView.html#WebView", "title": "WebView", "contents": "", "rendered": "", "breadcrumb": "WebView"},
{"href": "./api/View.html#value-make", "title": "make", "contents": "make option string option bool option BsReactNative Types insets option unit unit  option BsReactNative RNEvent NativeLayoutEvent t unit  option unit unit  option BsReactNative Types touchResponderHandlers option option bool option BsReactNative Style t option string option option option bool option option bool option bool option list option bool option bool array ReasonReact reactElement ReasonReact component ReasonReact stateless ReasonReact noRetainedProps unit accessibilityLabel accessible hitSlop onAccessibilityTap onLayout onMagicTap responderHandlers pointerEvents removeClippedSubviews style testID accessibilityComponentType accessibilityLiveRegion collapsable importantForAccessibility needsOffscreenAlphaCompositing renderToHardwareTextureAndroid accessibilityTraits accessibilityViewIsModal shouldRasterizeIOS ", "rendered": "<h4 class='item'>let make: (\n  ~?accessibilityLabel: option(string),\n  ~?accessible: option(bool),\n  ~?hitSlop: option(BsReactNative.Types.insets),\n  ~?onAccessibilityTap: option(unit => unit),\n  ~?onLayout: option(\n    BsReactNative.RNEvent.NativeLayoutEvent.t => unit\n  ),\n  ~?onMagicTap: option(unit => unit),\n  ~?responderHandlers: option(\n    BsReactNative.Types.touchResponderHandlers\n  ),\n  ~?pointerEvents: option(\n    [ `none | `boxOnly | `auto | `boxNone ]\n  ),\n  ~?removeClippedSubviews: option(bool),\n  ~?style: option(BsReactNative.Style.t),\n  ~?testID: option(string),\n  ~?accessibilityComponentType: option(\n    [ `button | `none | `radiobutton_checked | `radiobutton_unchecked ]\n  ),\n  ~?accessibilityLiveRegion: option(\n    [ `none | `polite | `assertive ]\n  ),\n  ~?collapsable: option(bool),\n  ~?importantForAccessibility: option(\n    [ `no | `yes | `noHideDescendants | `auto ]\n  ),\n  ~?needsOffscreenAlphaCompositing: option(bool),\n  ~?renderToHardwareTextureAndroid: option(bool),\n  ~?accessibilityTraits: option(\n    list(\n      [ `frequentUpdates\n| `adjustable\n| `image\n| `button\n| `none\n| `header\n| `plays\n| `text\n| `startsMedia\n| `link\n| `disabled\n| `pageTurn\n| `selected\n| `summary\n| `search\n| `allowsDirectInteraction\n| `key ]\n    )\n  ),\n  ~?accessibilityViewIsModal: option(bool),\n  ~?shouldRasterizeIOS: option(bool),\n  array(ReasonReact.reactElement)\n) => ReasonReact.component(\n  ReasonReact.stateless,\n  ReasonReact.noRetainedProps,\n  unit\n)</h4>", "breadcrumb": "View"},
{"href": "./api/View.html", "title": "View", "contents": "@rest", "rendered": "@rest", "breadcrumb": "View"},
{"href": "./api/View.html", "title": "View", "contents": "@rest", "rendered": "@rest", "breadcrumb": "View"},
{"href": "./api/View.html", "title": "View", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "View"},
{"href": "./api/View.html#View", "title": "View", "contents": "", "rendered": "", "breadcrumb": "View"},
{"href": "./api/TouchableWithoutFeedback.html#value-make", "title": "make", "contents": "make option bool option string option option list option int option int option int option bool option BsReactNative Types insets option BsReactNative RNEvent NativeLayoutEvent t unit  option unit unit  option unit unit  option unit unit  option unit unit  option BsReactNative Types insets option BsReactNative Style t array ReasonReact reactElement ReasonReact component ReasonReact stateless ReasonReact noRetainedProps unit accessible accessibilityLabel accessibilityComponentType accessibilityTraits delayLongPress delayPressIn delayPressOut disabled hitSlop onLayout onLongPress onPress onPressIn onPressOut pressRetentionOffset style ", "rendered": "<h4 class='item'>let make: (\n  ~?accessible: option(bool),\n  ~?accessibilityLabel: option(string),\n  ~?accessibilityComponentType: option(\n    [ `button | `none | `radiobutton_checked | `radiobutton_unchecked ]\n  ),\n  ~?accessibilityTraits: option(\n    list(\n      [ `frequentUpdates\n| `adjustable\n| `image\n| `button\n| `header\n| `none\n| `plays\n| `text\n| `startsMedia\n| `disabled\n| `link\n| `pageTurn\n| `selected\n| `allowsDirectInteraction\n| `summary\n| `search\n| `key ]\n    )\n  ),\n  ~?delayLongPress: option(int),\n  ~?delayPressIn: option(int),\n  ~?delayPressOut: option(int),\n  ~?disabled: option(bool),\n  ~?hitSlop: option(BsReactNative.Types.insets),\n  ~?onLayout: option(\n    BsReactNative.RNEvent.NativeLayoutEvent.t => unit\n  ),\n  ~?onLongPress: option(unit => unit),\n  ~?onPress: option(unit => unit),\n  ~?onPressIn: option(unit => unit),\n  ~?onPressOut: option(unit => unit),\n  ~?pressRetentionOffset: option(\n    BsReactNative.Types.insets\n  ),\n  ~?style: option(BsReactNative.Style.t),\n  array(ReasonReact.reactElement)\n) => ReasonReact.component(\n  ReasonReact.stateless,\n  ReasonReact.noRetainedProps,\n  unit\n)</h4>", "breadcrumb": "TouchableWithoutFeedback"},
{"href": "./api/TouchableWithoutFeedback.html", "title": "TouchableWithoutFeedback", "contents": "@rest", "rendered": "@rest", "breadcrumb": "TouchableWithoutFeedback"},
{"href": "./api/TouchableWithoutFeedback.html", "title": "TouchableWithoutFeedback", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "TouchableWithoutFeedback"},
{"href": "./api/TouchableWithoutFeedback.html#TouchableWithoutFeedback", "title": "TouchableWithoutFeedback", "contents": "", "rendered": "", "breadcrumb": "TouchableWithoutFeedback"},
{"href": "./api/TouchableOpacity.html#value-make", "title": "make", "contents": "make option bool option string option option list option int option int option int option bool option BsReactNative Types insets option BsReactNative Style t option BsReactNative RNEvent NativeLayoutEvent t unit  option unit unit  option unit unit  option unit unit  option unit unit  option BsReactNative Types insets option float option float option Js t array ReasonReact reactElement ReasonReact component ReasonReact stateless ReasonReact noRetainedProps unit accessible accessibilityLabel accessibilityComponentType accessibilityTraits delayLongPress delayPressIn delayPressOut disabled hitSlop style onLayout onPress onLongPress onPressIn onPressOut pressRetentionOffset activeOpacity focusedOpacity tvParallaxProperties ", "rendered": "<h4 class='item'>let make: (\n  ~?accessible: option(bool),\n  ~?accessibilityLabel: option(string),\n  ~?accessibilityComponentType: option(\n    [ `button | `none | `radiobutton_checked | `radiobutton_unchecked ]\n  ),\n  ~?accessibilityTraits: option(\n    list(\n      [ `frequentUpdates\n| `adjustable\n| `image\n| `button\n| `header\n| `none\n| `plays\n| `text\n| `startsMedia\n| `disabled\n| `link\n| `pageTurn\n| `selected\n| `allowsDirectInteraction\n| `summary\n| `search\n| `key ]\n    )\n  ),\n  ~?delayLongPress: option(int),\n  ~?delayPressIn: option(int),\n  ~?delayPressOut: option(int),\n  ~?disabled: option(bool),\n  ~?hitSlop: option(BsReactNative.Types.insets),\n  ~?style: option(BsReactNative.Style.t),\n  ~?onLayout: option(\n    BsReactNative.RNEvent.NativeLayoutEvent.t => unit\n  ),\n  ~?onPress: option(unit => unit),\n  ~?onLongPress: option(unit => unit),\n  ~?onPressIn: option(unit => unit),\n  ~?onPressOut: option(unit => unit),\n  ~?pressRetentionOffset: option(\n    BsReactNative.Types.insets\n  ),\n  ~?activeOpacity: option(float),\n  ~?focusedOpacity: option(float),\n  ~?tvParallaxProperties: option(Js.t(&lt;  &gt;)),\n  array(ReasonReact.reactElement)\n) => ReasonReact.component(\n  ReasonReact.stateless,\n  ReasonReact.noRetainedProps,\n  unit\n)</h4>", "breadcrumb": "TouchableOpacity"},
{"href": "./api/TouchableOpacity.html#value-setOpacityTo", "title": "setOpacityTo", "contents": "setOpacityTo ReasonReact reactRef float int unit   ", "rendered": "<h4 class='item'>let setOpacityTo: (ReasonReact.reactRef, float, int) => unit</h4>", "breadcrumb": "TouchableOpacity"},
{"href": "./api/TouchableOpacity.html", "title": "TouchableOpacity", "contents": "@rest", "rendered": "@rest", "breadcrumb": "TouchableOpacity"},
{"href": "./api/TouchableOpacity.html", "title": "TouchableOpacity", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "TouchableOpacity"},
{"href": "./api/TouchableOpacity.html#TouchableOpacity", "title": "TouchableOpacity", "contents": "", "rendered": "", "breadcrumb": "TouchableOpacity"},
{"href": "./api/TouchableHighlight.html#value-make", "title": "make", "contents": "make option bool option string option option list option int option int option int option bool option BsReactNative Types insets option BsReactNative RNEvent NativeLayoutEvent t unit  option unit unit  option unit unit  option unit unit  option BsReactNative Types insets option float option unit unit  option unit unit  option BsReactNative Style t option string option bool option Js t array ReasonReact reactElement ReasonReact component ReasonReact stateless ReasonReact noRetainedProps unit accessible accessibilityLabel accessibilityComponentType accessibilityTraits delayLongPress delayPressIn delayPressOut disabled hitSlop onLayout onPress onPressIn onPressOut pressRetentionOffset activeOpacity onHideUnderlay onShowUnderlay style underlayColor hasTVPreferredFocus tvParallaxProperties ", "rendered": "<h4 class='item'>let make: (\n  ~?accessible: option(bool),\n  ~?accessibilityLabel: option(string),\n  ~?accessibilityComponentType: option(\n    [ `button | `none | `radiobutton_checked | `radiobutton_unchecked ]\n  ),\n  ~?accessibilityTraits: option(\n    list(\n      [ `frequentUpdates\n| `adjustable\n| `image\n| `button\n| `header\n| `none\n| `plays\n| `text\n| `startsMedia\n| `disabled\n| `link\n| `pageTurn\n| `selected\n| `allowsDirectInteraction\n| `summary\n| `search\n| `key ]\n    )\n  ),\n  ~?delayLongPress: option(int),\n  ~?delayPressIn: option(int),\n  ~?delayPressOut: option(int),\n  ~?disabled: option(bool),\n  ~?hitSlop: option(BsReactNative.Types.insets),\n  ~?onLayout: option(\n    BsReactNative.RNEvent.NativeLayoutEvent.t => unit\n  ),\n  ~?onPress: option(unit => unit),\n  ~?onPressIn: option(unit => unit),\n  ~?onPressOut: option(unit => unit),\n  ~?pressRetentionOffset: option(\n    BsReactNative.Types.insets\n  ),\n  ~?activeOpacity: option(float),\n  ~?onHideUnderlay: option(unit => unit),\n  ~?onShowUnderlay: option(unit => unit),\n  ~?style: option(BsReactNative.Style.t),\n  ~?underlayColor: option(string),\n  ~?hasTVPreferredFocus: option(bool),\n  ~?tvParallaxProperties: option(Js.t(&lt;  &gt;)),\n  array(ReasonReact.reactElement)\n) => ReasonReact.component(\n  ReasonReact.stateless,\n  ReasonReact.noRetainedProps,\n  unit\n)</h4>", "breadcrumb": "TouchableHighlight"},
{"href": "./api/TouchableHighlight.html", "title": "TouchableHighlight", "contents": "@rest", "rendered": "@rest", "breadcrumb": "TouchableHighlight"},
{"href": "./api/TouchableHighlight.html", "title": "TouchableHighlight", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "TouchableHighlight"},
{"href": "./api/TouchableHighlight.html#TouchableHighlight", "title": "TouchableHighlight", "contents": "", "rendered": "", "breadcrumb": "TouchableHighlight"},
{"href": "./api/TextInput.html#value-make", "title": "make", "contents": "make option ReasonReact reactElement option bool option Js t option unit unit  option BsReactNative RNEvent NativeLayoutEvent t unit  option unit unit  option BsReactNative Types touchResponderHandlers option option bool option BsReactNative Style t option string option option option bool option option bool option bool option list option bool option bool option option bool option bool option bool option bool option string option bool option option int option bool option unit unit  option unit unit  option string unit  option Js t unit  option unit unit  option unit unit  option Js t unit  option Js t unit  option unit unit  option string option string option option bool option bool option Js t option string option string option bool option string option int option int option string option option string option option bool option array option bool option option Js t unit  option option bool array ReasonReact reactElement ReasonReact component ReasonReact stateless ReasonReact noRetainedProps unit accessibilityLabel accessible hitSlop onAccessibilityTap onLayout onMagicTap responderHandlers pointerEvents removeClippedSubviews style testID accessibilityComponentType accessibilityLiveRegion collapsable importantForAccessibility needsOffscreenAlphaCompositing renderToHardwareTextureAndroid accessibilityTraits accessibilityViewIsModal shouldRasterizeIOS autoCapitalize autoCorrect autoFocus blurOnSubmit caretHidden defaultValue editable keyboardType maxLength multiline onBlur onChange onChangeText onContentSizeChange onEndEditing onFocus onScroll onSelectionChange onSubmitEditing placeholder placeholderTextColor returnKeyType secureTextEntry selectTextOnFocus selection selectionColor value disableFullscreenUI inlineImageLeft inlineImagePadding numberOfLines returnKeyLabel textBreakStrategy underlineColorAndroid clearButtonMode clearTextOnFocus dataDetectorTypes enablesReturnKeyAutomatically keyboardAppearance onKeyPress selectionState spellCheck ", "rendered": "<h4 class='item'>let make: (\n  ~?accessibilityLabel: option(ReasonReact.reactElement),\n  ~?accessible: option(bool),\n  ~?hitSlop: option(\n    Js.t(\n      &lt; bottom : int; left : int; right : int; top : int &gt;\n    )\n  ),\n  ~?onAccessibilityTap: option(unit => unit),\n  ~?onLayout: option(\n    BsReactNative.RNEvent.NativeLayoutEvent.t => unit\n  ),\n  ~?onMagicTap: option(unit => unit),\n  ~?responderHandlers: option(\n    BsReactNative.Types.touchResponderHandlers\n  ),\n  ~?pointerEvents: option(\n    [ `none | `boxOnly | `auto | `boxNone ]\n  ),\n  ~?removeClippedSubviews: option(bool),\n  ~?style: option(BsReactNative.Style.t),\n  ~?testID: option(string),\n  ~?accessibilityComponentType: option(\n    [ `button | `none | `radiobutton_checked | `radiobutton_unchecked ]\n  ),\n  ~?accessibilityLiveRegion: option(\n    [ `none | `polite | `assertive ]\n  ),\n  ~?collapsable: option(bool),\n  ~?importantForAccessibility: option(\n    [ `no | `yes | `noHideDescendants | `auto ]\n  ),\n  ~?needsOffscreenAlphaCompositing: option(bool),\n  ~?renderToHardwareTextureAndroid: option(bool),\n  ~?accessibilityTraits: option(\n    list(\n      [ `frequentUpdates\n| `adjustable\n| `image\n| `button\n| `header\n| `none\n| `plays\n| `text\n| `startsMedia\n| `disabled\n| `link\n| `pageTurn\n| `selected\n| `allowsDirectInteraction\n| `summary\n| `search\n| `key ]\n    )\n  ),\n  ~?accessibilityViewIsModal: option(bool),\n  ~?shouldRasterizeIOS: option(bool),\n  ~?autoCapitalize: option(\n    [&lt; `sentences | `none | `words | `characters ]\n  ),\n  ~?autoCorrect: option(bool),\n  ~?autoFocus: option(bool),\n  ~?blurOnSubmit: option(bool),\n  ~?caretHidden: option(bool),\n  ~?defaultValue: option(string),\n  ~?editable: option(bool),\n  ~?keyboardType: option(\n    [ `numeric\n| `asciiCapable\n| `namePhonePad\n| `emailAddress\n| `default\n| `webSearch\n| `numbersAndPunctuation\n| `decimalPad\n| `twitter\n| `url\n| `phonePad\n| `numberPad ]\n  ),\n  ~?maxLength: option(int),\n  ~?multiline: option(bool),\n  ~?onBlur: option(unit => unit),\n  ~?onChange: option(unit => unit),\n  ~?onChangeText: option(string => unit),\n  ~?onContentSizeChange: option(\n    Js.t(\n      &lt; nativeEvent : &lt; contentSize : &lt; height : float; width : float &gt; Js.t &gt; Js.t &gt;\n    ) => unit\n  ),\n  ~?onEndEditing: option(unit => unit),\n  ~?onFocus: option(unit => unit),\n  ~?onScroll: option(\n    Js.t(\n      &lt; nativeEvent : &lt; contentOffset : &lt; x : float; y : float &gt; Js.t &gt; Js.t &gt;\n    ) => unit\n  ),\n  ~?onSelectionChange: option(\n    Js.t(\n      &lt; nativeEvent : &lt; selection : &lt; _end : int; start : int &gt; Js.t &gt; Js.t &gt;\n    ) => unit\n  ),\n  ~?onSubmitEditing: option(unit => unit),\n  ~?placeholder: option(string),\n  ~?placeholderTextColor: option(string),\n  ~?returnKeyType: option(\n    [ `go\n| `previous\n| `none\n| `done_\n| `send\n| `default\n| `emergencyCall\n| `next\n| `route\n| `search\n| `google\n| `yahoo\n| `join ]\n  ),\n  ~?secureTextEntry: option(bool),\n  ~?selectTextOnFocus: option(bool),\n  ~?selection: option(\n    Js.t(&lt; _end : int; start : int &gt;)\n  ),\n  ~?selectionColor: option(string),\n  ~?value: option(string),\n  ~?disableFullscreenUI: option(bool),\n  ~?inlineImageLeft: option(string),\n  ~?inlineImagePadding: option(int),\n  ~?numberOfLines: option(int),\n  ~?returnKeyLabel: option(string),\n  ~?textBreakStrategy: option(\n    [ `highQuality | `balanced | `simple ]\n  ),\n  ~?underlineColorAndroid: option(string),\n  ~?clearButtonMode: option(\n    [ `whileEditing | `never | `always | `unlessEditing ]\n  ),\n  ~?clearTextOnFocus: option(bool),\n  ~?dataDetectorTypes: option(\n    array(\n      [ `none | `all | `link | `calendarEvent | `phoneNumber ]\n    )\n  ),\n  ~?enablesReturnKeyAutomatically: option(bool),\n  ~?keyboardAppearance: option(\n    [ `default | `light | `dark ]\n  ),\n  ~?onKeyPress: option(\n    Js.t(\n      &lt; nativeEvent : &lt; key : string &gt; Js.t &gt;\n    ) => unit\n  ),\n  ~?selectionState: option('documentSelectionState),\n  ~?spellCheck: option(bool),\n  array(ReasonReact.reactElement)\n) => ReasonReact.component(\n  ReasonReact.stateless,\n  ReasonReact.noRetainedProps,\n  unit\n)</h4>", "breadcrumb": "TextInput"},
{"href": "./api/TextInput.html#value-clear", "title": "clear", "contents": "clear ReasonReact reactRef unit ", "rendered": "<h4 class='item'>let clear: ReasonReact.reactRef => unit</h4>", "breadcrumb": "TextInput"},
{"href": "./api/TextInput.html#value-isFocused", "title": "isFocused", "contents": "isFocused ReasonReact reactRef bool ", "rendered": "<h4 class='item'>let isFocused: ReasonReact.reactRef => bool</h4>", "breadcrumb": "TextInput"},
{"href": "./api/TextInput.html", "title": "TextInput", "contents": "@rest", "rendered": "@rest", "breadcrumb": "TextInput"},
{"href": "./api/TextInput.html", "title": "TextInput", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "TextInput"},
{"href": "./api/TextInput.html#TextInput", "title": "TextInput", "contents": "", "rendered": "", "breadcrumb": "TextInput"},
{"href": "./api/Text.html#value-make", "title": "make", "contents": "make option bool option bool option option int option BsReactNative RNEvent NativeLayoutEvent t unit  option unit unit  option unit unit  option BsReactNative Types insets option bool option BsReactNative Style t option string option string option option bool option float option bool option string array ReasonReact reactElement ReasonReact component ReasonReact stateless ReasonReact noRetainedProps unit accessible allowFontScaling ellipsizeMode numberOfLines onLayout onLongPress onPress pressRetentionOffset selectable style testID selectionColor textBreakStrategy adjustsFontSizeToFit minimumFontScale suppressHighlighting value ", "rendered": "<h4 class='item'>let make: (\n  ~?accessible: option(bool),\n  ~?allowFontScaling: option(bool),\n  ~?ellipsizeMode: option(\n    [ `clip | `head | `middle | `tail ]\n  ),\n  ~?numberOfLines: option(int),\n  ~?onLayout: option(\n    BsReactNative.RNEvent.NativeLayoutEvent.t => unit\n  ),\n  ~?onLongPress: option(unit => unit),\n  ~?onPress: option(unit => unit),\n  ~?pressRetentionOffset: option(\n    BsReactNative.Types.insets\n  ),\n  ~?selectable: option(bool),\n  ~?style: option(BsReactNative.Style.t),\n  ~?testID: option(string),\n  ~?selectionColor: option(string),\n  ~?textBreakStrategy: option(\n    [ `highQuality | `balanced | `simple ]\n  ),\n  ~?adjustsFontSizeToFit: option(bool),\n  ~?minimumFontScale: option(float),\n  ~?suppressHighlighting: option(bool),\n  ~?value: option(string),\n  array(ReasonReact.reactElement)\n) => ReasonReact.component(\n  ReasonReact.stateless,\n  ReasonReact.noRetainedProps,\n  unit\n)</h4>", "breadcrumb": "Text"},
{"href": "./api/Text.html", "title": "Text", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Text"},
{"href": "./api/Text.html", "title": "Text", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Text"},
{"href": "./api/Text.html", "title": "Text", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Text"},
{"href": "./api/Text.html#Text", "title": "Text", "contents": "", "rendered": "", "breadcrumb": "Text"},
{"href": "./api/TabBarIOS.html#value-make", "title": "make", "contents": "make option string option option BsReactNative Style t option string option bool option string option string option ReasonReact reactElement option bool option BsReactNative Types insets option unit unit  option BsReactNative RNEvent NativeLayoutEvent t unit  option unit unit  option BsReactNative Types touchResponderHandlers option option bool option string option option option bool option option bool option bool option list option bool option bool array ReasonReact reactElement ReasonReact component ReasonReact stateless ReasonReact noRetainedProps unit barTintColor itemPositioning style tintColor translucent unselectedItemTintColor unselectedTintColor accessibilityLabel accessible hitSlop onAccessibilityTap onLayout onMagicTap responderHandlers pointerEvents removeClippedSubviews testID accessibilityComponentType accessibilityLiveRegion collapsable importantForAccessibility needsOffscreenAlphaCompositing renderToHardwareTextureAndroid accessibilityTraits accessibilityViewIsModal shouldRasterizeIOS ", "rendered": "<h4 class='item'>let make: (\n  ~?barTintColor: option(string),\n  ~?itemPositioning: option([ `fill | `auto | `center ]),\n  ~?style: option(BsReactNative.Style.t),\n  ~?tintColor: option(string),\n  ~?translucent: option(bool),\n  ~?unselectedItemTintColor: option(string),\n  ~?unselectedTintColor: option(string),\n  ~?accessibilityLabel: option(ReasonReact.reactElement),\n  ~?accessible: option(bool),\n  ~?hitSlop: option(BsReactNative.Types.insets),\n  ~?onAccessibilityTap: option(unit => unit),\n  ~?onLayout: option(\n    BsReactNative.RNEvent.NativeLayoutEvent.t => unit\n  ),\n  ~?onMagicTap: option(unit => unit),\n  ~?responderHandlers: option(\n    BsReactNative.Types.touchResponderHandlers\n  ),\n  ~?pointerEvents: option(\n    [ `none | `boxOnly | `auto | `boxNone ]\n  ),\n  ~?removeClippedSubviews: option(bool),\n  ~?testID: option(string),\n  ~?accessibilityComponentType: option(\n    [ `button | `none | `radiobutton_checked | `radiobutton_unchecked ]\n  ),\n  ~?accessibilityLiveRegion: option(\n    [ `none | `polite | `assertive ]\n  ),\n  ~?collapsable: option(bool),\n  ~?importantForAccessibility: option(\n    [ `no | `yes | `noHideDescendants | `auto ]\n  ),\n  ~?needsOffscreenAlphaCompositing: option(bool),\n  ~?renderToHardwareTextureAndroid: option(bool),\n  ~?accessibilityTraits: option(\n    list(\n      [ `frequentUpdates\n| `adjustable\n| `image\n| `button\n| `header\n| `none\n| `plays\n| `text\n| `startsMedia\n| `disabled\n| `link\n| `pageTurn\n| `selected\n| `allowsDirectInteraction\n| `summary\n| `search\n| `key ]\n    )\n  ),\n  ~?accessibilityViewIsModal: option(bool),\n  ~?shouldRasterizeIOS: option(bool),\n  array(ReasonReact.reactElement)\n) => ReasonReact.component(\n  ReasonReact.stateless,\n  ReasonReact.noRetainedProps,\n  unit\n)</h4>", "breadcrumb": "TabBarIOS"},
{"href": "./api/TabBarIOS.html#value-Item.make", "title": "Item.make", "contents": "make option string option string option string option BsReactNative Image imageSource option unit unit  option bool option BsReactNative Style t option bool option BsReactNative Image imageSource option bool option ReasonReact reactElement option bool option BsReactNative Types insets option unit unit  option BsReactNative RNEvent NativeLayoutEvent t unit  option unit unit  option BsReactNative Types touchResponderHandlers option option bool option string option option option bool option option bool option bool option list option bool option bool array ReasonReact reactElement ReasonReact component ReasonReact stateless ReasonReact noRetainedProps unit title badgeColor badge icon onPress renderAsOriginal style selected selectedIcon isTVSelectable accessibilityLabel accessible hitSlop onAccessibilityTap onLayout onMagicTap responderHandlers pointerEvents removeClippedSubviews testID accessibilityComponentType accessibilityLiveRegion collapsable importantForAccessibility needsOffscreenAlphaCompositing renderToHardwareTextureAndroid accessibilityTraits accessibilityViewIsModal shouldRasterizeIOS ", "rendered": "<h4 class='item'>let make: (\n  ~?title: option(string),\n  ~?badgeColor: option(string),\n  ~?badge: option(string),\n  ~?icon: option(BsReactNative.Image.imageSource),\n  ~?onPress: option(unit => unit),\n  ~?renderAsOriginal: option(bool),\n  ~?style: option(BsReactNative.Style.t),\n  ~?selected: option(bool),\n  ~?selectedIcon: option(BsReactNative.Image.imageSource),\n  ~?isTVSelectable: option(bool),\n  ~?accessibilityLabel: option(ReasonReact.reactElement),\n  ~?accessible: option(bool),\n  ~?hitSlop: option(BsReactNative.Types.insets),\n  ~?onAccessibilityTap: option(unit => unit),\n  ~?onLayout: option(\n    BsReactNative.RNEvent.NativeLayoutEvent.t => unit\n  ),\n  ~?onMagicTap: option(unit => unit),\n  ~?responderHandlers: option(\n    BsReactNative.Types.touchResponderHandlers\n  ),\n  ~?pointerEvents: option(\n    [ `none | `boxOnly | `auto | `boxNone ]\n  ),\n  ~?removeClippedSubviews: option(bool),\n  ~?testID: option(string),\n  ~?accessibilityComponentType: option(\n    [ `button | `none | `radiobutton_checked | `radiobutton_unchecked ]\n  ),\n  ~?accessibilityLiveRegion: option(\n    [ `none | `polite | `assertive ]\n  ),\n  ~?collapsable: option(bool),\n  ~?importantForAccessibility: option(\n    [ `no | `yes | `noHideDescendants | `auto ]\n  ),\n  ~?needsOffscreenAlphaCompositing: option(bool),\n  ~?renderToHardwareTextureAndroid: option(bool),\n  ~?accessibilityTraits: option(\n    list(\n      [ `frequentUpdates\n| `adjustable\n| `image\n| `button\n| `header\n| `none\n| `plays\n| `text\n| `startsMedia\n| `disabled\n| `link\n| `pageTurn\n| `selected\n| `allowsDirectInteraction\n| `summary\n| `search\n| `key ]\n    )\n  ),\n  ~?accessibilityViewIsModal: option(bool),\n  ~?shouldRasterizeIOS: option(bool),\n  array(ReasonReact.reactElement)\n) => ReasonReact.component(\n  ReasonReact.stateless,\n  ReasonReact.noRetainedProps,\n  unit\n)</h4>", "breadcrumb": "TabBarIOS"},
{"href": "./api/TabBarIOS.html#module-Item", "title": "Item", "contents": "@rest", "rendered": "@rest", "breadcrumb": "TabBarIOS"},
{"href": "./api/TabBarIOS.html#module-Item", "title": "Item", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "TabBarIOS"},
{"href": "./api/TabBarIOS.html", "title": "TabBarIOS", "contents": "@rest", "rendered": "@rest", "breadcrumb": "TabBarIOS"},
{"href": "./api/TabBarIOS.html", "title": "TabBarIOS", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "TabBarIOS"},
{"href": "./api/TabBarIOS.html#TabBarIOS", "title": "TabBarIOS", "contents": "", "rendered": "", "breadcrumb": "TabBarIOS"},
{"href": "./api/Switch.html#value-make", "title": "make", "contents": "make option bool option string option bool unit  option string option string option bool option ReasonReact reactElement option bool option BsReactNative Types insets option unit unit  option BsReactNative RNEvent NativeLayoutEvent t unit  option unit unit  option BsReactNative Types touchResponderHandlers option option bool option BsReactNative Style t option string option option option bool option option bool option bool option list option bool option bool array ReasonReact reactElement ReasonReact component ReasonReact stateless ReasonReact noRetainedProps unit disabled onTintColor onValueChange thumbTintColor tintColor value accessibilityLabel accessible hitSlop onAccessibilityTap onLayout onMagicTap responderHandlers pointerEvents removeClippedSubviews style testID accessibilityComponentType accessibilityLiveRegion collapsable importantForAccessibility needsOffscreenAlphaCompositing renderToHardwareTextureAndroid accessibilityTraits accessibilityViewIsModal shouldRasterizeIOS ", "rendered": "<h4 class='item'>let make: (\n  ~?disabled: option(bool),\n  ~?onTintColor: option(string),\n  ~?onValueChange: option(bool => unit),\n  ~?thumbTintColor: option(string),\n  ~?tintColor: option(string),\n  ~?value: option(bool),\n  ~?accessibilityLabel: option(ReasonReact.reactElement),\n  ~?accessible: option(bool),\n  ~?hitSlop: option(BsReactNative.Types.insets),\n  ~?onAccessibilityTap: option(unit => unit),\n  ~?onLayout: option(\n    BsReactNative.RNEvent.NativeLayoutEvent.t => unit\n  ),\n  ~?onMagicTap: option(unit => unit),\n  ~?responderHandlers: option(\n    BsReactNative.Types.touchResponderHandlers\n  ),\n  ~?pointerEvents: option(\n    [ `none | `boxOnly | `auto | `boxNone ]\n  ),\n  ~?removeClippedSubviews: option(bool),\n  ~?style: option(BsReactNative.Style.t),\n  ~?testID: option(string),\n  ~?accessibilityComponentType: option(\n    [ `button | `none | `radiobutton_checked | `radiobutton_unchecked ]\n  ),\n  ~?accessibilityLiveRegion: option(\n    [ `none | `polite | `assertive ]\n  ),\n  ~?collapsable: option(bool),\n  ~?importantForAccessibility: option(\n    [ `no | `yes | `noHideDescendants | `auto ]\n  ),\n  ~?needsOffscreenAlphaCompositing: option(bool),\n  ~?renderToHardwareTextureAndroid: option(bool),\n  ~?accessibilityTraits: option(\n    list(\n      [ `frequentUpdates\n| `adjustable\n| `image\n| `button\n| `header\n| `none\n| `plays\n| `text\n| `startsMedia\n| `disabled\n| `link\n| `pageTurn\n| `selected\n| `allowsDirectInteraction\n| `summary\n| `search\n| `key ]\n    )\n  ),\n  ~?accessibilityViewIsModal: option(bool),\n  ~?shouldRasterizeIOS: option(bool),\n  array(ReasonReact.reactElement)\n) => ReasonReact.component(\n  ReasonReact.stateless,\n  ReasonReact.noRetainedProps,\n  unit\n)</h4>", "breadcrumb": "Switch"},
{"href": "./api/Switch.html", "title": "Switch", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Switch"},
{"href": "./api/Switch.html", "title": "Switch", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Switch"},
{"href": "./api/Switch.html#Switch", "title": "Switch", "contents": "", "rendered": "", "breadcrumb": "Switch"},
{"href": "./api/StatusBar.html#value-make", "title": "make", "contents": "make option bool option option bool option string option bool option bool option array ReasonReact reactElement ReasonReact component ReasonReact stateless ReasonReact noRetainedProps unit animated barStyle hidden backgroundColor translucent networkActivityIndicatorVisible showHideTransition ", "rendered": "<h4 class='item'>let make: (\n  ~?animated: option(bool),\n  ~?barStyle: option(\n    [ `default | `darkContent | `lightContent ]\n  ),\n  ~?hidden: option(bool),\n  ~?backgroundColor: option(string),\n  ~?translucent: option(bool),\n  ~?networkActivityIndicatorVisible: option(bool),\n  ~?showHideTransition: option([ `none | `fade | `slide ]),\n  array(ReasonReact.reactElement)\n) => ReasonReact.component(\n  ReasonReact.stateless,\n  ReasonReact.noRetainedProps,\n  unit\n)</h4>", "breadcrumb": "StatusBar"},
{"href": "./api/StatusBar.html#value-setTranslucent", "title": "setTranslucent", "contents": "setTranslucent bool unit ", "rendered": "<h4 class='item'>let setTranslucent: bool => unit</h4>", "breadcrumb": "StatusBar"},
{"href": "./api/StatusBar.html#value-setBackgroundColor", "title": "setBackgroundColor", "contents": "setBackgroundColor string option bool unit unit  animated ", "rendered": "<h4 class='item'>let setBackgroundColor: (\n  string,\n  ~?animated: option(bool),\n  unit\n) => unit</h4>", "breadcrumb": "StatusBar"},
{"href": "./api/StatusBar.html#value-setNetworkActivityIndicatorVisible", "title": "setNetworkActivityIndicatorVisible", "contents": "setNetworkActivityIndicatorVisible bool unit ", "rendered": "<h4 class='item'>let setNetworkActivityIndicatorVisible: bool => unit</h4>", "breadcrumb": "StatusBar"},
{"href": "./api/StatusBar.html#value-setBarStyle", "title": "setBarStyle", "contents": "setBarStyle option bool unit unit  animated ", "rendered": "<h4 class='item'>let setBarStyle: (\n  [ `default | `darkContent | `lightContent ],\n  ~?animated: option(bool),\n  unit\n) => unit</h4>", "breadcrumb": "StatusBar"},
{"href": "./api/StatusBar.html#value-setHidden", "title": "setHidden", "contents": "setHidden bool option unit unit  animation ", "rendered": "<h4 class='item'>let setHidden: (\n  bool,\n  ~?animation: option([ `none | `fade | `slide ]),\n  unit\n) => unit</h4>", "breadcrumb": "StatusBar"},
{"href": "./api/StatusBar.html", "title": "StatusBar", "contents": "@rest", "rendered": "@rest", "breadcrumb": "StatusBar"},
{"href": "./api/StatusBar.html", "title": "StatusBar", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "StatusBar"},
{"href": "./api/StatusBar.html#StatusBar", "title": "StatusBar", "contents": "", "rendered": "", "breadcrumb": "StatusBar"},
{"href": "./api/Slider.html#value-make", "title": "make", "contents": "make option bool option string option float option string option float option float unit  option float unit  option float option float option string option BsReactNative Image imageSource option BsReactNative Image imageSource option BsReactNative Image imageSource option BsReactNative Image imageSource option ReasonReact reactElement option bool option BsReactNative Types insets option unit unit  option BsReactNative RNEvent NativeLayoutEvent t unit  option unit unit  option BsReactNative Types touchResponderHandlers option option bool option BsReactNative Style t option string option option option bool option option bool option bool option list option bool option bool array ReasonReact reactElement ReasonReact component ReasonReact stateless ReasonReact noRetainedProps unit disabled maximumTrackTintColor maximumValue minimumTrackTintColor minimumValue onSlidingComplete onValueChange step value thumbTintColor maximumTrackImage minimumTrackImage thumbImage trackImage accessibilityLabel accessible hitSlop onAccessibilityTap onLayout onMagicTap responderHandlers pointerEvents removeClippedSubviews style testID accessibilityComponentType accessibilityLiveRegion collapsable importantForAccessibility needsOffscreenAlphaCompositing renderToHardwareTextureAndroid accessibilityTraits accessibilityViewIsModal shouldRasterizeIOS ", "rendered": "<h4 class='item'>let make: (\n  ~?disabled: option(bool),\n  ~?maximumTrackTintColor: option(string),\n  ~?maximumValue: option(float),\n  ~?minimumTrackTintColor: option(string),\n  ~?minimumValue: option(float),\n  ~?onSlidingComplete: option(float => unit),\n  ~?onValueChange: option(float => unit),\n  ~?step: option(float),\n  ~?value: option(float),\n  ~?thumbTintColor: option(string),\n  ~?maximumTrackImage: option(\n    BsReactNative.Image.imageSource\n  ),\n  ~?minimumTrackImage: option(\n    BsReactNative.Image.imageSource\n  ),\n  ~?thumbImage: option(BsReactNative.Image.imageSource),\n  ~?trackImage: option(BsReactNative.Image.imageSource),\n  ~?accessibilityLabel: option(ReasonReact.reactElement),\n  ~?accessible: option(bool),\n  ~?hitSlop: option(BsReactNative.Types.insets),\n  ~?onAccessibilityTap: option(unit => unit),\n  ~?onLayout: option(\n    BsReactNative.RNEvent.NativeLayoutEvent.t => unit\n  ),\n  ~?onMagicTap: option(unit => unit),\n  ~?responderHandlers: option(\n    BsReactNative.Types.touchResponderHandlers\n  ),\n  ~?pointerEvents: option(\n    [ `none | `boxOnly | `auto | `boxNone ]\n  ),\n  ~?removeClippedSubviews: option(bool),\n  ~?style: option(BsReactNative.Style.t),\n  ~?testID: option(string),\n  ~?accessibilityComponentType: option(\n    [ `button | `none | `radiobutton_checked | `radiobutton_unchecked ]\n  ),\n  ~?accessibilityLiveRegion: option(\n    [ `none | `polite | `assertive ]\n  ),\n  ~?collapsable: option(bool),\n  ~?importantForAccessibility: option(\n    [ `no | `yes | `noHideDescendants | `auto ]\n  ),\n  ~?needsOffscreenAlphaCompositing: option(bool),\n  ~?renderToHardwareTextureAndroid: option(bool),\n  ~?accessibilityTraits: option(\n    list(\n      [ `frequentUpdates\n| `adjustable\n| `image\n| `button\n| `header\n| `none\n| `plays\n| `text\n| `startsMedia\n| `disabled\n| `link\n| `pageTurn\n| `selected\n| `allowsDirectInteraction\n| `summary\n| `search\n| `key ]\n    )\n  ),\n  ~?accessibilityViewIsModal: option(bool),\n  ~?shouldRasterizeIOS: option(bool),\n  array(ReasonReact.reactElement)\n) => ReasonReact.component(\n  ReasonReact.stateless,\n  ReasonReact.noRetainedProps,\n  unit\n)</h4>", "breadcrumb": "Slider"},
{"href": "./api/Slider.html", "title": "Slider", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Slider"},
{"href": "./api/Slider.html", "title": "Slider", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Slider"},
{"href": "./api/Slider.html#Slider", "title": "Slider", "contents": "", "rendered": "", "breadcrumb": "Slider"},
{"href": "./api/SegmentedControllOS.html#value-make", "title": "make", "contents": "make list string option int option BsReactNative RNEvent t unit  option bool option bool option string option string unit  option ReasonReact reactElement option bool option BsReactNative Types insets option unit unit  option BsReactNative RNEvent NativeLayoutEvent t unit  option unit unit  option BsReactNative Types touchResponderHandlers option option bool option BsReactNative Style t option string option option option bool option option bool option bool option list option bool option bool array ReasonReact reactElement ReasonReact component ReasonReact stateless ReasonReact noRetainedProps unit values selectedIndex onChange enabled momentary tintColor onValueChange accessibilityLabel accessible hitSlop onAccessibilityTap onLayout onMagicTap responderHandlers pointerEvents removeClippedSubviews style testID accessibilityComponentType accessibilityLiveRegion collapsable importantForAccessibility needsOffscreenAlphaCompositing renderToHardwareTextureAndroid accessibilityTraits accessibilityViewIsModal shouldRasterizeIOS ", "rendered": "<h4 class='item'>let make: (\n  ~values: list(string),\n  ~?selectedIndex: option(int),\n  ~?onChange: option(BsReactNative.RNEvent.t => unit),\n  ~?enabled: option(bool),\n  ~?momentary: option(bool),\n  ~?tintColor: option(string),\n  ~?onValueChange: option(string => unit),\n  ~?accessibilityLabel: option(ReasonReact.reactElement),\n  ~?accessible: option(bool),\n  ~?hitSlop: option(BsReactNative.Types.insets),\n  ~?onAccessibilityTap: option(unit => unit),\n  ~?onLayout: option(\n    BsReactNative.RNEvent.NativeLayoutEvent.t => unit\n  ),\n  ~?onMagicTap: option(unit => unit),\n  ~?responderHandlers: option(\n    BsReactNative.Types.touchResponderHandlers\n  ),\n  ~?pointerEvents: option(\n    [ `none | `boxOnly | `auto | `boxNone ]\n  ),\n  ~?removeClippedSubviews: option(bool),\n  ~?style: option(BsReactNative.Style.t),\n  ~?testID: option(string),\n  ~?accessibilityComponentType: option(\n    [ `button | `none | `radiobutton_checked | `radiobutton_unchecked ]\n  ),\n  ~?accessibilityLiveRegion: option(\n    [ `none | `polite | `assertive ]\n  ),\n  ~?collapsable: option(bool),\n  ~?importantForAccessibility: option(\n    [ `no | `yes | `noHideDescendants | `auto ]\n  ),\n  ~?needsOffscreenAlphaCompositing: option(bool),\n  ~?renderToHardwareTextureAndroid: option(bool),\n  ~?accessibilityTraits: option(\n    list(\n      [ `frequentUpdates\n| `adjustable\n| `image\n| `button\n| `header\n| `none\n| `plays\n| `text\n| `startsMedia\n| `disabled\n| `link\n| `pageTurn\n| `selected\n| `allowsDirectInteraction\n| `summary\n| `search\n| `key ]\n    )\n  ),\n  ~?accessibilityViewIsModal: option(bool),\n  ~?shouldRasterizeIOS: option(bool),\n  array(ReasonReact.reactElement)\n) => ReasonReact.component(\n  ReasonReact.stateless,\n  ReasonReact.noRetainedProps,\n  unit\n)</h4>", "breadcrumb": "SegmentedControllOS"},
{"href": "./api/SegmentedControllOS.html", "title": "SegmentedControllOS", "contents": "@rest", "rendered": "@rest", "breadcrumb": "SegmentedControllOS"},
{"href": "./api/SegmentedControllOS.html", "title": "SegmentedControllOS", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "SegmentedControllOS"},
{"href": "./api/SegmentedControllOS.html#SegmentedControllOS", "title": "SegmentedControllOS", "contents": "", "rendered": "", "breadcrumb": "SegmentedControllOS"},
{"href": "./api/SectionList.html#value-make", "title": "make", "contents": "make sections renderItem int string   option separatorComponent option unit ReasonReact reactElement  option ReasonReact reactElement option ReasonReact reactElement option separatorComponent option bool option option int option Js t unit  option float option Js t option unit unit  option bool option renderAccessoryView option renderAccessoryView option bool option option option bool option bool option option array int Js t   array ReasonReact reactElement ReasonReact component ReasonReact stateless ReasonReact noRetainedProps unit sections renderItem keyExtractor itemSeparatorComponent listEmptyComponent listFooterComponent listHeaderComponent sectionSeparatorComponent inverted extraData initialNumToRender onEndReached onEndReachedThreshold onViewableItemsChanged onRefresh refreshing renderSectionHeader renderSectionFooter stickySectionHeadersEnabled keyboardDismissMode keyboardShouldPersistTaps showsHorizontalScrollIndicator showsVerticalScrollIndicator getItemLayout ", "rendered": "<h4 class='item'>let make: (\n  ~sections: <a href=\"./api/SectionList.html#type-sections\">sections</a>('item),\n  ~renderItem: <a href=\"./api/SectionList.html#type-renderItem\">renderItem</a>('item),\n  ~keyExtractor: ('item, int) => string,\n  ~?itemSeparatorComponent: option(\n    <a href=\"./api/SectionList.html#type-separatorComponent\">separatorComponent</a>('item)\n  ),\n  ~?listEmptyComponent: option(\n    unit => ReasonReact.reactElement\n  ),\n  ~?listFooterComponent: option(ReasonReact.reactElement),\n  ~?listHeaderComponent: option(ReasonReact.reactElement),\n  ~?sectionSeparatorComponent: option(\n    <a href=\"./api/SectionList.html#type-separatorComponent\">separatorComponent</a>('item)\n  ),\n  ~?inverted: option(bool),\n  ~?extraData: option('extraData),\n  ~?initialNumToRender: option(int),\n  ~?onEndReached: option(\n    Js.t(&lt; distanceFromEnd : float &gt;) => unit\n  ),\n  ~?onEndReachedThreshold: option(float),\n  ~?onViewableItemsChanged: option(\n    Js.t(\n      &lt; changed : 'item1 viewToken array; viewableItems : 'item1 viewToken array &gt;\n    )\n  ),\n  ~?onRefresh: option(unit => unit),\n  ~?refreshing: option(bool),\n  ~?renderSectionHeader: option(<a href=\"./api/SectionList.html#type-renderAccessoryView\">renderAccessoryView</a>('item)),\n  ~?renderSectionFooter: option(<a href=\"./api/SectionList.html#type-renderAccessoryView\">renderAccessoryView</a>('item)),\n  ~?stickySectionHeadersEnabled: option(bool),\n  ~?keyboardDismissMode: option(\n    [ `interactive | `none | `onDrag ]\n  ),\n  ~?keyboardShouldPersistTaps: option(\n    [ `never | `handled | `always ]\n  ),\n  ~?showsHorizontalScrollIndicator: option(bool),\n  ~?showsVerticalScrollIndicator: option(bool),\n  ~?getItemLayout: option(\n    (option(array('item)), int) => Js.t(\n      &lt; index : int; length : int; offset : int &gt;\n    )\n  ),\n  array(ReasonReact.reactElement)\n) => ReasonReact.component(\n  ReasonReact.stateless,\n  ReasonReact.noRetainedProps,\n  unit\n)</h4>", "breadcrumb": "SectionList"},
{"href": "./api/SectionList.html#type-viewToken", "title": "viewToken", "contents": "viewToken Js t", "rendered": "<h4 class='item'>type viewToken('item) = Js.t(\n  &lt; index : int Js.undefined; isViewable : bool; item : 'item0; key : string;\n  section : 'item0 section &gt;\n)</h4>", "breadcrumb": "SectionList"},
{"href": "./api/SectionList.html#value-renderAccessoryView", "title": "renderAccessoryView", "contents": "renderAccessoryView renderAccessory ReasonReact reactElement  renderAccessoryView ", "rendered": "<h4 class='item'>let renderAccessoryView: <a href=\"./api/SectionList.html#type-renderAccessory\">renderAccessory</a>(\n  'item\n) => ReasonReact.reactElement => <a href=\"./api/SectionList.html#type-renderAccessoryView\">renderAccessoryView</a>('item)</h4>", "breadcrumb": "SectionList"},
{"href": "./api/SectionList.html#type-renderAccessoryView", "title": "renderAccessoryView", "contents": "renderAccessoryView ", "rendered": "<h4 class='item'>type renderAccessoryView('item)</h4>", "breadcrumb": "SectionList"},
{"href": "./api/SectionList.html#type-renderAccessory", "title": "renderAccessory", "contents": "renderAccessory section section", "rendered": "<h4 class='item'>type renderAccessory('item) = {section: <a href=\"./api/SectionList.html#type-section\">section</a>('item)}</h4>", "breadcrumb": "SectionList"},
{"href": "./api/SectionList.html#value-separatorComponent", "title": "separatorComponent", "contents": "separatorComponent separatorProps ReasonReact reactElement  separatorComponent ", "rendered": "<h4 class='item'>let separatorComponent: <a href=\"./api/SectionList.html#type-separatorProps\">separatorProps</a>(\n  'item\n) => ReasonReact.reactElement => <a href=\"./api/SectionList.html#type-separatorComponent\">separatorComponent</a>('item)</h4>", "breadcrumb": "SectionList"},
{"href": "./api/SectionList.html#type-separatorComponent", "title": "separatorComponent", "contents": "separatorComponent ", "rendered": "<h4 class='item'>type separatorComponent('item)</h4>", "breadcrumb": "SectionList"},
{"href": "./api/SectionList.html#value-renderItem", "title": "renderItem", "contents": "renderItem renderBag ReasonReact reactElement  renderItem ", "rendered": "<h4 class='item'>let renderItem: <a href=\"./api/SectionList.html#type-renderBag\">renderBag</a>(\n  'item\n) => ReasonReact.reactElement => <a href=\"./api/SectionList.html#type-renderItem\">renderItem</a>('item)</h4>", "breadcrumb": "SectionList"},
{"href": "./api/SectionList.html#type-renderItem", "title": "renderItem", "contents": "renderItem ", "rendered": "<h4 class='item'>type renderItem('item)</h4>", "breadcrumb": "SectionList"},
{"href": "./api/SectionList.html#value-sections", "title": "sections", "contents": "sections array section sections ", "rendered": "<h4 class='item'>let sections: array(<a href=\"./api/SectionList.html#type-section\">section</a>('item)) => <a href=\"./api/SectionList.html#type-sections\">sections</a>('item)</h4>", "breadcrumb": "SectionList"},
{"href": "./api/SectionList.html#type-sections", "title": "sections", "contents": "sections ", "rendered": "<h4 class='item'>type sections('item)</h4>", "breadcrumb": "SectionList"},
{"href": "./api/SectionList.html#type-separatorProps", "title": "separatorProps", "contents": "separatorProps highlighted bool leadingItem option leadingSection option section section section trailingItem option trailingSection option section", "rendered": "<h4 class='item'>type separatorProps('item) = {\n  highlighted: bool,\n  leadingItem: option('item),\n  leadingSection: option(<a href=\"./api/SectionList.html#type-section\">section</a>('item)),\n  section: <a href=\"./api/SectionList.html#type-section\">section</a>('item),\n  trailingItem: option('item),\n  trailingSection: option(<a href=\"./api/SectionList.html#type-section\">section</a>('item))\n}</h4>", "breadcrumb": "SectionList"},
{"href": "./api/SectionList.html#value-section", "title": "section", "contents": "section array option string option renderBag ReasonReact reactElement  unit section data key renderItem ", "rendered": "<h4 class='item'>let section: (\n  ~data: array('item),\n  ~?key: option(string),\n  ~?renderItem: option(\n    <a href=\"./api/SectionList.html#type-renderBag\">renderBag</a>('item) => ReasonReact.reactElement\n  ),\n  unit\n) => <a href=\"./api/SectionList.html#type-section\">section</a>('item)</h4>", "breadcrumb": "SectionList"},
{"href": "./api/SectionList.html#type-section", "title": "section", "contents": "section data array key option string renderItem option renderBag ReasonReact reactElement ", "rendered": "<h4 class='item'>type section('item) = {\n  data: array('item),\n  key: option(string),\n  renderItem: option(\n    <a href=\"./api/SectionList.html#type-renderBag\">renderBag</a>('item) => ReasonReact.reactElement\n  )\n}</h4>", "breadcrumb": "SectionList"},
{"href": "./api/SectionList.html#type-renderBag", "title": "renderBag", "contents": "renderBag item index int section section separators Js t", "rendered": "<h4 class='item'>type renderBag('item) = {\n  item: 'item,\n  index: int,\n  section: <a href=\"./api/SectionList.html#type-section\">section</a>('item),\n  separators: Js.t(\n    &lt; highlight : unit -&gt; unit; unhighlight : unit -&gt; unit &gt;\n  )\n}</h4>", "breadcrumb": "SectionList"},
{"href": "./api/SectionList.html", "title": "SectionList", "contents": "@rest", "rendered": "@rest", "breadcrumb": "SectionList"},
{"href": "./api/SectionList.html", "title": "SectionList", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "SectionList"},
{"href": "./api/SectionList.html#SectionList", "title": "SectionList", "contents": "", "rendered": "", "breadcrumb": "SectionList"},
{"href": "./api/ScrollView.html#value-make", "title": "make", "contents": "make option ReasonReact reactElement option bool option BsReactNative Types insets option unit unit  option BsReactNative RNEvent NativeLayoutEvent t unit  option unit unit  option BsReactNative Types touchResponderHandlers option option bool option BsReactNative Style t option string option option option bool option option bool option bool option list option bool option bool option BsReactNative Style t option bool option option option float float unit  option BsReactNative RNEvent NativeScrollEvent t unit  option bool option ReasonReact reactElement option bool option bool option bool option list int option option string option bool option bool option bool option bool option bool option bool option BsReactNative Types insets option point option option bool option option float option float option unit unit  option int option BsReactNative Types insets option bool option option float array ReasonReact reactElement ReasonReact component ReasonReact stateless ReasonReact noRetainedProps unit accessibilityLabel accessible hitSlop onAccessibilityTap onLayout onMagicTap responderHandlers pointerEvents removeClippedSubviews style testID accessibilityComponentType accessibilityLiveRegion collapsable importantForAccessibility needsOffscreenAlphaCompositing renderToHardwareTextureAndroid accessibilityTraits accessibilityViewIsModal shouldRasterizeIOS contentContainerStyle horizontal keyboardDismissMode keyboardShouldPersistTaps onContentSizeChange onScroll pagingEnabled refreshControl scrollEnabled showsHorizontalScrollIndicator showsVerticalScrollIndicator stickyHeaderIndices overScrollMode scrollPerfTag alwaysBounceHorizontal alwaysBounceVertical automaticallyAdjustContentInsets bounces canCancelContentTouches centerContent contentInset contentOffset decelerationRate directionalLockEnabled indicatorStyle maximumZoomScale minimumZoomScale onScrollAnimationEnd scrollEventThrottle scrollIndicatorInsets scrollsToTop snapToAlignment zoomScale ", "rendered": "<h4 class='item'>let make: (\n  ~?accessibilityLabel: option(ReasonReact.reactElement),\n  ~?accessible: option(bool),\n  ~?hitSlop: option(BsReactNative.Types.insets),\n  ~?onAccessibilityTap: option(unit => unit),\n  ~?onLayout: option(\n    BsReactNative.RNEvent.NativeLayoutEvent.t => unit\n  ),\n  ~?onMagicTap: option(unit => unit),\n  ~?responderHandlers: option(\n    BsReactNative.Types.touchResponderHandlers\n  ),\n  ~?pointerEvents: option(\n    [ `none | `boxOnly | `auto | `boxNone ]\n  ),\n  ~?removeClippedSubviews: option(bool),\n  ~?style: option(BsReactNative.Style.t),\n  ~?testID: option(string),\n  ~?accessibilityComponentType: option(\n    [ `button | `none | `radiobutton_checked | `radiobutton_unchecked ]\n  ),\n  ~?accessibilityLiveRegion: option(\n    [ `none | `polite | `assertive ]\n  ),\n  ~?collapsable: option(bool),\n  ~?importantForAccessibility: option(\n    [ `no | `yes | `noHideDescendants | `auto ]\n  ),\n  ~?needsOffscreenAlphaCompositing: option(bool),\n  ~?renderToHardwareTextureAndroid: option(bool),\n  ~?accessibilityTraits: option(\n    list(\n      [ `frequentUpdates\n| `adjustable\n| `image\n| `button\n| `none\n| `header\n| `plays\n| `text\n| `startsMedia\n| `link\n| `disabled\n| `pageTurn\n| `selected\n| `summary\n| `search\n| `allowsDirectInteraction\n| `key ]\n    )\n  ),\n  ~?accessibilityViewIsModal: option(bool),\n  ~?shouldRasterizeIOS: option(bool),\n  ~?contentContainerStyle: option(BsReactNative.Style.t),\n  ~?horizontal: option(bool),\n  ~?keyboardDismissMode: option(\n    [ `interactive | `none | `onDrag ]\n  ),\n  ~?keyboardShouldPersistTaps: option(\n    [ `never | `handled | `always ]\n  ),\n  ~?onContentSizeChange: option((float, float) => unit),\n  ~?onScroll: option(\n    BsReactNative.RNEvent.NativeScrollEvent.t => unit\n  ),\n  ~?pagingEnabled: option(bool),\n  ~?refreshControl: option(ReasonReact.reactElement),\n  ~?scrollEnabled: option(bool),\n  ~?showsHorizontalScrollIndicator: option(bool),\n  ~?showsVerticalScrollIndicator: option(bool),\n  ~?stickyHeaderIndices: option(list(int)),\n  ~?overScrollMode: option([ `never | `auto | `always ]),\n  ~?scrollPerfTag: option(string),\n  ~?alwaysBounceHorizontal: option(bool),\n  ~?alwaysBounceVertical: option(bool),\n  ~?automaticallyAdjustContentInsets: option(bool),\n  ~?bounces: option(bool),\n  ~?canCancelContentTouches: option(bool),\n  ~?centerContent: option(bool),\n  ~?contentInset: option(BsReactNative.Types.insets),\n  ~?contentOffset: option(<a href=\"./api/ScrollView.html#type-point\">point</a>),\n  ~?decelerationRate: option([ `normal | `fast ]),\n  ~?directionalLockEnabled: option(bool),\n  ~?indicatorStyle: option([ `white | `black | `default ]),\n  ~?maximumZoomScale: option(float),\n  ~?minimumZoomScale: option(float),\n  ~?onScrollAnimationEnd: option(unit => unit),\n  ~?scrollEventThrottle: option(int),\n  ~?scrollIndicatorInsets: option(\n    BsReactNative.Types.insets\n  ),\n  ~?scrollsToTop: option(bool),\n  ~?snapToAlignment: option([ `start | `center | `end_ ]),\n  ~?zoomScale: option(float),\n  array(ReasonReact.reactElement)\n) => ReasonReact.component(\n  ReasonReact.stateless,\n  ReasonReact.noRetainedProps,\n  unit\n)</h4>", "breadcrumb": "ScrollView"},
{"href": "./api/ScrollView.html#value-scrollToEnd", "title": "scrollToEnd", "contents": "scrollToEnd ReasonReact reactRef bool unit  animated", "rendered": "<h4 class='item'>let scrollToEnd: (\n  ReasonReact.reactRef,\n  ~animated: bool\n) => unit</h4>", "breadcrumb": "ScrollView"},
{"href": "./api/ScrollView.html#value-scrollTo", "title": "scrollTo", "contents": "scrollTo ReasonReact reactRef int int bool unit  x y animated", "rendered": "<h4 class='item'>let scrollTo: (\n  ReasonReact.reactRef,\n  ~x: int,\n  ~y: int,\n  ~animated: bool\n) => unit</h4>", "breadcrumb": "ScrollView"},
{"href": "./api/ScrollView.html#type-point", "title": "point", "contents": "point x float y float", "rendered": "<h4 class='item'>type point = {x: float, y: float}</h4>", "breadcrumb": "ScrollView"},
{"href": "./api/ScrollView.html", "title": "ScrollView", "contents": "@rest", "rendered": "@rest", "breadcrumb": "ScrollView"},
{"href": "./api/ScrollView.html", "title": "ScrollView", "contents": "@rest", "rendered": "@rest", "breadcrumb": "ScrollView"},
{"href": "./api/ScrollView.html", "title": "ScrollView", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ScrollView"},
{"href": "./api/ScrollView.html#ScrollView", "title": "ScrollView", "contents": "", "rendered": "", "breadcrumb": "ScrollView"},
{"href": "./api/SafeAreaView.html#value-make", "title": "make", "contents": "make option string option bool option BsReactNative Types insets option unit unit  option BsReactNative RNEvent NativeLayoutEvent t unit  option unit unit  option BsReactNative Types touchResponderHandlers option option bool option BsReactNative Style t option string option option option bool option option bool option bool option list option bool option bool array ReasonReact reactElement ReasonReact component ReasonReact stateless ReasonReact noRetainedProps unit accessibilityLabel accessible hitSlop onAccessibilityTap onLayout onMagicTap responderHandlers pointerEvents removeClippedSubviews style testID accessibilityComponentType accessibilityLiveRegion collapsable importantForAccessibility needsOffscreenAlphaCompositing renderToHardwareTextureAndroid accessibilityTraits accessibilityViewIsModal shouldRasterizeIOS ", "rendered": "<h4 class='item'>let make: (\n  ~?accessibilityLabel: option(string),\n  ~?accessible: option(bool),\n  ~?hitSlop: option(BsReactNative.Types.insets),\n  ~?onAccessibilityTap: option(unit => unit),\n  ~?onLayout: option(\n    BsReactNative.RNEvent.NativeLayoutEvent.t => unit\n  ),\n  ~?onMagicTap: option(unit => unit),\n  ~?responderHandlers: option(\n    BsReactNative.Types.touchResponderHandlers\n  ),\n  ~?pointerEvents: option(\n    [ `none | `boxOnly | `auto | `boxNone ]\n  ),\n  ~?removeClippedSubviews: option(bool),\n  ~?style: option(BsReactNative.Style.t),\n  ~?testID: option(string),\n  ~?accessibilityComponentType: option(\n    [ `button | `none | `radiobutton_checked | `radiobutton_unchecked ]\n  ),\n  ~?accessibilityLiveRegion: option(\n    [ `none | `polite | `assertive ]\n  ),\n  ~?collapsable: option(bool),\n  ~?importantForAccessibility: option(\n    [ `no | `yes | `noHideDescendants | `auto ]\n  ),\n  ~?needsOffscreenAlphaCompositing: option(bool),\n  ~?renderToHardwareTextureAndroid: option(bool),\n  ~?accessibilityTraits: option(\n    list(\n      [ `frequentUpdates\n| `adjustable\n| `image\n| `button\n| `none\n| `header\n| `plays\n| `text\n| `startsMedia\n| `link\n| `disabled\n| `pageTurn\n| `selected\n| `summary\n| `search\n| `allowsDirectInteraction\n| `key ]\n    )\n  ),\n  ~?accessibilityViewIsModal: option(bool),\n  ~?shouldRasterizeIOS: option(bool),\n  array(ReasonReact.reactElement)\n) => ReasonReact.component(\n  ReasonReact.stateless,\n  ReasonReact.noRetainedProps,\n  unit\n)</h4>", "breadcrumb": "SafeAreaView"},
{"href": "./api/SafeAreaView.html", "title": "SafeAreaView", "contents": "@rest", "rendered": "@rest", "breadcrumb": "SafeAreaView"},
{"href": "./api/SafeAreaView.html", "title": "SafeAreaView", "contents": "@rest", "rendered": "@rest", "breadcrumb": "SafeAreaView"},
{"href": "./api/SafeAreaView.html", "title": "SafeAreaView", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "SafeAreaView"},
{"href": "./api/SafeAreaView.html#SafeAreaView", "title": "SafeAreaView", "contents": "", "rendered": "", "breadcrumb": "SafeAreaView"},
{"href": "./api/RefreshControl.html#value-make", "title": "make", "contents": "make option unit unit  option bool option array string option bool option string option float option string option string option string option ReasonReact reactElement option bool option BsReactNative Types insets option unit unit  option BsReactNative RNEvent NativeLayoutEvent t unit  option unit unit  option BsReactNative Types touchResponderHandlers option option bool option BsReactNative Style t option string option option option bool option option bool option bool option list option bool option bool array ReasonReact reactElement ReasonReact component ReasonReact stateless ReasonReact noRetainedProps unit onRefresh refreshing colors enabled progressBackgroundColor progressViewOffset tintColor title titleColor accessibilityLabel accessible hitSlop onAccessibilityTap onLayout onMagicTap responderHandlers pointerEvents removeClippedSubviews style testID accessibilityComponentType accessibilityLiveRegion collapsable importantForAccessibility needsOffscreenAlphaCompositing renderToHardwareTextureAndroid accessibilityTraits accessibilityViewIsModal shouldRasterizeIOS ", "rendered": "<h4 class='item'>let make: (\n  ~?onRefresh: option(unit => unit),\n  ~?refreshing: option(bool),\n  ~?colors: option(array(string)),\n  ~?enabled: option(bool),\n  ~?progressBackgroundColor: option(string),\n  ~?progressViewOffset: option(float),\n  ~?tintColor: option(string),\n  ~?title: option(string),\n  ~?titleColor: option(string),\n  ~?accessibilityLabel: option(ReasonReact.reactElement),\n  ~?accessible: option(bool),\n  ~?hitSlop: option(BsReactNative.Types.insets),\n  ~?onAccessibilityTap: option(unit => unit),\n  ~?onLayout: option(\n    BsReactNative.RNEvent.NativeLayoutEvent.t => unit\n  ),\n  ~?onMagicTap: option(unit => unit),\n  ~?responderHandlers: option(\n    BsReactNative.Types.touchResponderHandlers\n  ),\n  ~?pointerEvents: option(\n    [ `none | `boxOnly | `auto | `boxNone ]\n  ),\n  ~?removeClippedSubviews: option(bool),\n  ~?style: option(BsReactNative.Style.t),\n  ~?testID: option(string),\n  ~?accessibilityComponentType: option(\n    [ `button | `none | `radiobutton_checked | `radiobutton_unchecked ]\n  ),\n  ~?accessibilityLiveRegion: option(\n    [ `none | `polite | `assertive ]\n  ),\n  ~?collapsable: option(bool),\n  ~?importantForAccessibility: option(\n    [ `no | `yes | `noHideDescendants | `auto ]\n  ),\n  ~?needsOffscreenAlphaCompositing: option(bool),\n  ~?renderToHardwareTextureAndroid: option(bool),\n  ~?accessibilityTraits: option(\n    list(\n      [ `frequentUpdates\n| `adjustable\n| `image\n| `button\n| `header\n| `none\n| `plays\n| `text\n| `startsMedia\n| `disabled\n| `link\n| `pageTurn\n| `selected\n| `allowsDirectInteraction\n| `summary\n| `search\n| `key ]\n    )\n  ),\n  ~?accessibilityViewIsModal: option(bool),\n  ~?shouldRasterizeIOS: option(bool),\n  array(ReasonReact.reactElement)\n) => ReasonReact.component(\n  ReasonReact.stateless,\n  ReasonReact.noRetainedProps,\n  unit\n)</h4>", "breadcrumb": "RefreshControl"},
{"href": "./api/RefreshControl.html", "title": "RefreshControl", "contents": "@rest", "rendered": "@rest", "breadcrumb": "RefreshControl"},
{"href": "./api/RefreshControl.html", "title": "RefreshControl", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "RefreshControl"},
{"href": "./api/RefreshControl.html#RefreshControl", "title": "RefreshControl", "contents": "", "rendered": "", "breadcrumb": "RefreshControl"},
{"href": "./api/Picker.html#value-make", "title": "make", "contents": "make option unit  option option bool option option string option BsReactNative Style t option ReasonReact reactElement option bool option BsReactNative Types insets option unit unit  option BsReactNative RNEvent NativeLayoutEvent t unit  option unit unit  option BsReactNative Types touchResponderHandlers option option bool option BsReactNative Style t option string option option option bool option option bool option bool option list option bool option bool array ReasonReact reactElement ReasonReact component ReasonReact stateless ReasonReact noRetainedProps unit onValueChange selectedValue enabled mode prompt itemStyle accessibilityLabel accessible hitSlop onAccessibilityTap onLayout onMagicTap responderHandlers pointerEvents removeClippedSubviews style testID accessibilityComponentType accessibilityLiveRegion collapsable importantForAccessibility needsOffscreenAlphaCompositing renderToHardwareTextureAndroid accessibilityTraits accessibilityViewIsModal shouldRasterizeIOS ", "rendered": "<h4 class='item'>let make: (\n  ~?onValueChange: option('value => unit),\n  ~?selectedValue: option('value),\n  ~?enabled: option(bool),\n  ~?mode: option([ `dropdown | `dialog ]),\n  ~?prompt: option(string),\n  ~?itemStyle: option(BsReactNative.Style.t),\n  ~?accessibilityLabel: option(ReasonReact.reactElement),\n  ~?accessible: option(bool),\n  ~?hitSlop: option(BsReactNative.Types.insets),\n  ~?onAccessibilityTap: option(unit => unit),\n  ~?onLayout: option(\n    BsReactNative.RNEvent.NativeLayoutEvent.t => unit\n  ),\n  ~?onMagicTap: option(unit => unit),\n  ~?responderHandlers: option(\n    BsReactNative.Types.touchResponderHandlers\n  ),\n  ~?pointerEvents: option(\n    [ `none | `boxOnly | `auto | `boxNone ]\n  ),\n  ~?removeClippedSubviews: option(bool),\n  ~?style: option(BsReactNative.Style.t),\n  ~?testID: option(string),\n  ~?accessibilityComponentType: option(\n    [ `button | `none | `radiobutton_checked | `radiobutton_unchecked ]\n  ),\n  ~?accessibilityLiveRegion: option(\n    [ `none | `polite | `assertive ]\n  ),\n  ~?collapsable: option(bool),\n  ~?importantForAccessibility: option(\n    [ `no | `yes | `noHideDescendants | `auto ]\n  ),\n  ~?needsOffscreenAlphaCompositing: option(bool),\n  ~?renderToHardwareTextureAndroid: option(bool),\n  ~?accessibilityTraits: option(\n    list(\n      [ `frequentUpdates\n| `adjustable\n| `image\n| `button\n| `header\n| `none\n| `plays\n| `text\n| `startsMedia\n| `disabled\n| `link\n| `pageTurn\n| `selected\n| `allowsDirectInteraction\n| `summary\n| `search\n| `key ]\n    )\n  ),\n  ~?accessibilityViewIsModal: option(bool),\n  ~?shouldRasterizeIOS: option(bool),\n  array(ReasonReact.reactElement)\n) => ReasonReact.component(\n  ReasonReact.stateless,\n  ReasonReact.noRetainedProps,\n  unit\n)</h4>", "breadcrumb": "Picker"},
{"href": "./api/Picker.html#value-Item.make", "title": "Item.make", "contents": "make option string option string option option string array ReasonReact reactElement ReasonReact component ReasonReact stateless ReasonReact noRetainedProps unit color label value testID ", "rendered": "<h4 class='item'>let make: (\n  ~?color: option(string),\n  ~?label: option(string),\n  ~?value: option('value),\n  ~?testID: option(string),\n  array(ReasonReact.reactElement)\n) => ReasonReact.component(\n  ReasonReact.stateless,\n  ReasonReact.noRetainedProps,\n  unit\n)</h4>", "breadcrumb": "Picker"},
{"href": "./api/Picker.html#module-Item", "title": "Item", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Picker"},
{"href": "./api/Picker.html#module-Item", "title": "Item", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Picker"},
{"href": "./api/Picker.html", "title": "Picker", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Picker"},
{"href": "./api/Picker.html", "title": "Picker", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Picker"},
{"href": "./api/Picker.html#Picker", "title": "Picker", "contents": "", "rendered": "", "breadcrumb": "Picker"},
{"href": "./api/Modal.html#value-make", "title": "make", "contents": "make option option unit unit  option bool option bool option bool option unit unit  option unit unit  option array array ReasonReact reactElement ReasonReact component ReasonReact stateless ReasonReact noRetainedProps unit animationType onShow transparent visible hardwareAccelerated onRequestClose onOrientationChange supportedOrientations ", "rendered": "<h4 class='item'>let make: (\n  ~?animationType: option([ `none | `fade | `slide ]),\n  ~?onShow: option(unit => unit),\n  ~?transparent: option(bool),\n  ~?visible: option(bool),\n  ~?hardwareAccelerated: option(bool),\n  ~?onRequestClose: option(unit => unit),\n  ~?onOrientationChange: option(unit => unit),\n  ~?supportedOrientations: option(\n    array(\n      [ `portrait\n| `landscapeLeft\n| `portraitUpsideDown\n| `landscapeRight\n| `landscape ]\n    )\n  ),\n  array(ReasonReact.reactElement)\n) => ReasonReact.component(\n  ReasonReact.stateless,\n  ReasonReact.noRetainedProps,\n  unit\n)</h4>", "breadcrumb": "Modal"},
{"href": "./api/Modal.html", "title": "Modal", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Modal"},
{"href": "./api/Modal.html", "title": "Modal", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Modal"},
{"href": "./api/Modal.html#Modal", "title": "Modal", "contents": "", "rendered": "", "breadcrumb": "Modal"},
{"href": "./api/KeyboardAvoidingView.html#value-make", "title": "make", "contents": "make option string option bool option BsReactNative Types insets option unit unit  option BsReactNative RNEvent NativeLayoutEvent t unit  option unit unit  option BsReactNative Types touchResponderHandlers option option bool option BsReactNative Style t option string option option option bool option option bool option bool option list option bool option bool option float option option BsReactNative Style t array ReasonReact reactElement ReasonReact component ReasonReact stateless ReasonReact noRetainedProps unit accessibilityLabel accessible hitSlop onAccessibilityTap onLayout onMagicTap responderHandlers pointerEvents removeClippedSubviews style testID accessibilityComponentType accessibilityLiveRegion collapsable importantForAccessibility needsOffscreenAlphaCompositing renderToHardwareTextureAndroid accessibilityTraits accessibilityViewIsModal shouldRasterizeIOS keyboardVerticalOffset behavior contentContainerStyle ", "rendered": "<h4 class='item'>let make: (\n  ~?accessibilityLabel: option(string),\n  ~?accessible: option(bool),\n  ~?hitSlop: option(BsReactNative.Types.insets),\n  ~?onAccessibilityTap: option(unit => unit),\n  ~?onLayout: option(\n    BsReactNative.RNEvent.NativeLayoutEvent.t => unit\n  ),\n  ~?onMagicTap: option(unit => unit),\n  ~?responderHandlers: option(\n    BsReactNative.Types.touchResponderHandlers\n  ),\n  ~?pointerEvents: option(\n    [ `none | `boxOnly | `auto | `boxNone ]\n  ),\n  ~?removeClippedSubviews: option(bool),\n  ~?style: option(BsReactNative.Style.t),\n  ~?testID: option(string),\n  ~?accessibilityComponentType: option(\n    [ `button | `none | `radiobutton_checked | `radiobutton_unchecked ]\n  ),\n  ~?accessibilityLiveRegion: option(\n    [ `none | `polite | `assertive ]\n  ),\n  ~?collapsable: option(bool),\n  ~?importantForAccessibility: option(\n    [ `no | `yes | `noHideDescendants | `auto ]\n  ),\n  ~?needsOffscreenAlphaCompositing: option(bool),\n  ~?renderToHardwareTextureAndroid: option(bool),\n  ~?accessibilityTraits: option(\n    list(\n      [ `frequentUpdates\n| `adjustable\n| `image\n| `button\n| `none\n| `header\n| `plays\n| `text\n| `startsMedia\n| `link\n| `disabled\n| `pageTurn\n| `selected\n| `summary\n| `search\n| `allowsDirectInteraction\n| `key ]\n    )\n  ),\n  ~?accessibilityViewIsModal: option(bool),\n  ~?shouldRasterizeIOS: option(bool),\n  ~?keyboardVerticalOffset: option(float),\n  ~?behavior: option([ `height | `padding | `position ]),\n  ~?contentContainerStyle: option(BsReactNative.Style.t),\n  array(ReasonReact.reactElement)\n) => ReasonReact.component(\n  ReasonReact.stateless,\n  ReasonReact.noRetainedProps,\n  unit\n)</h4>", "breadcrumb": "KeyboardAvoidingView"},
{"href": "./api/KeyboardAvoidingView.html", "title": "KeyboardAvoidingView", "contents": "@rest", "rendered": "@rest", "breadcrumb": "KeyboardAvoidingView"},
{"href": "./api/KeyboardAvoidingView.html", "title": "KeyboardAvoidingView", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "KeyboardAvoidingView"},
{"href": "./api/KeyboardAvoidingView.html#KeyboardAvoidingView", "title": "KeyboardAvoidingView", "contents": "", "rendered": "", "breadcrumb": "KeyboardAvoidingView"},
{"href": "./api/ImageBackground.html#value-make", "title": "make", "contents": "make option error unit  option BsReactNative RNEvent NativeLayoutEvent t unit  option unit unit  option unit unit  option unit unit  option option BsReactNative Image imageSource option BsReactNative Style t option BsReactNative Style t option string option option string option bool option float option BsReactNative Types insets option BsReactNative Image defaultSource option unit unit  option progress unit  array ReasonReact reactElement ReasonReact component ReasonReact stateless ReasonReact noRetainedProps unit onError onLayout onLoad onLoadEnd onLoadStart resizeMode source style imageStyle testID resizeMethod accessibilityLabel accessible blurRadius capInsets defaultSource onPartialLoad onProgress ", "rendered": "<h4 class='item'>let make: (\n  ~?onError: option(<a href=\"./api/ImageBackground.html#type-Event.error\" title=\"Event.error\">error</a> => unit),\n  ~?onLayout: option(\n    BsReactNative.RNEvent.NativeLayoutEvent.t => unit\n  ),\n  ~?onLoad: option(unit => unit),\n  ~?onLoadEnd: option(unit => unit),\n  ~?onLoadStart: option(unit => unit),\n  ~?resizeMode: option(\n    [&lt; `repeat | `stretch | `cover | `contain | `center ]\n  ),\n  ~?source: option(BsReactNative.Image.imageSource),\n  ~?style: option(BsReactNative.Style.t),\n  ~?imageStyle: option(BsReactNative.Style.t),\n  ~?testID: option(string),\n  ~?resizeMethod: option([&lt; `scale | `resize | `auto ]),\n  ~?accessibilityLabel: option(string),\n  ~?accessible: option(bool),\n  ~?blurRadius: option(float),\n  ~?capInsets: option(BsReactNative.Types.insets),\n  ~?defaultSource: option(\n    BsReactNative.Image.defaultSource\n  ),\n  ~?onPartialLoad: option(unit => unit),\n  ~?onProgress: option(<a href=\"./api/ImageBackground.html#type-Event.progress\" title=\"Event.progress\">progress</a> => unit),\n  array(ReasonReact.reactElement)\n) => ReasonReact.component(\n  ReasonReact.stateless,\n  ReasonReact.noRetainedProps,\n  unit\n)</h4>", "breadcrumb": "ImageBackground"},
{"href": "./api/ImageBackground.html#type-Event.progress", "title": "Event.progress", "contents": "progress loaded float total float", "rendered": "<h4 class='item'>type progress = {loaded: float, total: float}</h4>", "breadcrumb": "ImageBackground"},
{"href": "./api/ImageBackground.html#type-Event.error", "title": "Event.error", "contents": "error ", "rendered": "<h4 class='item'>type error</h4>", "breadcrumb": "ImageBackground"},
{"href": "./api/ImageBackground.html#module-Event", "title": "Event", "contents": "@rest", "rendered": "@rest", "breadcrumb": "ImageBackground"},
{"href": "./api/ImageBackground.html#module-Event", "title": "Event", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ImageBackground"},
{"href": "./api/ImageBackground.html", "title": "ImageBackground", "contents": "@rest", "rendered": "@rest", "breadcrumb": "ImageBackground"},
{"href": "./api/ImageBackground.html", "title": "ImageBackground", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ImageBackground"},
{"href": "./api/ImageBackground.html#ImageBackground", "title": "ImageBackground", "contents": "", "rendered": "", "breadcrumb": "ImageBackground"},
{"href": "./api/Image.html#value-make", "title": "make", "contents": "make option Event error unit  option BsReactNative RNEvent NativeLayoutEvent t unit  option unit unit  option unit unit  option unit unit  option option imageSource option BsReactNative Style t option string option option string option bool option float option BsReactNative Types insets option defaultSource option unit unit  option Event progress unit  array ReasonReact reactElement ReasonReact component ReasonReact stateless ReasonReact noRetainedProps unit onError onLayout onLoad onLoadEnd onLoadStart resizeMode source style testID resizeMethod accessibilityLabel accessible blurRadius capInsets defaultSource onPartialLoad onProgress ", "rendered": "<h4 class='item'>let make: (\n  ~?onError: option(Event.error => unit),\n  ~?onLayout: option(\n    BsReactNative.RNEvent.NativeLayoutEvent.t => unit\n  ),\n  ~?onLoad: option(unit => unit),\n  ~?onLoadEnd: option(unit => unit),\n  ~?onLoadStart: option(unit => unit),\n  ~?resizeMode: option(\n    [&lt; `repeat | `stretch | `cover | `contain | `center ]\n  ),\n  ~?source: option(<a href=\"./api/Image.html#type-imageSource\">imageSource</a>),\n  ~?style: option(BsReactNative.Style.t),\n  ~?testID: option(string),\n  ~?resizeMethod: option([&lt; `scale | `resize | `auto ]),\n  ~?accessibilityLabel: option(string),\n  ~?accessible: option(bool),\n  ~?blurRadius: option(float),\n  ~?capInsets: option(BsReactNative.Types.insets),\n  ~?defaultSource: option(<a href=\"./api/Image.html#type-defaultSource\">defaultSource</a>),\n  ~?onPartialLoad: option(unit => unit),\n  ~?onProgress: option(Event.progress => unit),\n  array(ReasonReact.reactElement)\n) => ReasonReact.component(\n  ReasonReact.stateless,\n  ReasonReact.noRetainedProps,\n  unit\n)</h4>", "breadcrumb": "Image"},
{"href": "./api/Image.html#type-Event.progress", "title": "Event.progress", "contents": "progress loaded float total float", "rendered": "<h4 class='item'>type progress = {loaded: float, total: float}</h4>", "breadcrumb": "Image"},
{"href": "./api/Image.html#type-Event.error", "title": "Event.error", "contents": "error ", "rendered": "<h4 class='item'>type error</h4>", "breadcrumb": "Image"},
{"href": "./api/Image.html#module-Event", "title": "Event", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Image"},
{"href": "./api/Image.html#module-Event", "title": "Event", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Image"},
{"href": "./api/Image.html", "title": "Image", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Image"},
{"href": "./api/Image.html", "title": "Image", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Image"},
{"href": "./api/Image.html", "title": "Image", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Image"},
{"href": "./api/Image.html#Image", "title": "Image", "contents": "", "rendered": "", "breadcrumb": "Image"},
{"href": "./api/FlatList.html#value-make", "title": "make", "contents": "make array renderItem int string   option separatorComponent option bool option ReasonReact reactElement option ReasonReact reactElement option BsReactNative Style t option option option array int Js t   option bool option int option int option bool option option Js t unit  option float option unit unit  option Js t option option bool option bool option bool option bool option bool option bool option int option int option Js t option BsReactNative RNEvent NativeScrollEvent t unit  option BsReactNative Style t array ReasonReact reactElement ReasonReact component ReasonReact stateless ReasonReact noRetainedProps unit data renderItem keyExtractor itemSeparatorComponent bounces listFooterComponent listHeaderComponent columnWrapperStyle extraData getItemLayout horizontal initialNumToRender initialScrollIndex inverted numColumns onEndReached onEndReachedThreshold onRefresh onViewableItemsChanged overScrollMode pagingEnabled refreshing removeClippedSubviews scrollEnabled showsHorizontalScrollIndicator showsVerticalScrollIndicator windowSize maxToRenderPerBatch viewabilityConfig onScroll style ", "rendered": "<h4 class='item'>let make: (\n  ~data: array('item),\n  ~renderItem: <a href=\"./api/FlatList.html#type-renderItem\">renderItem</a>('item),\n  ~keyExtractor: ('item, int) => string,\n  ~?itemSeparatorComponent: option(\n    <a href=\"./api/FlatList.html#type-separatorComponent\">separatorComponent</a>('item)\n  ),\n  ~?bounces: option(bool),\n  ~?listFooterComponent: option(ReasonReact.reactElement),\n  ~?listHeaderComponent: option(ReasonReact.reactElement),\n  ~?columnWrapperStyle: option(BsReactNative.Style.t),\n  ~?extraData: option('any),\n  ~?getItemLayout: option(\n    (option(array('item)), int) => Js.t(\n      &lt; index : int; length : int; offset : int &gt;\n    )\n  ),\n  ~?horizontal: option(bool),\n  ~?initialNumToRender: option(int),\n  ~?initialScrollIndex: option(int),\n  ~?inverted: option(bool),\n  ~?numColumns: option('int),\n  ~?onEndReached: option(\n    Js.t(&lt; distanceFromEnd : float &gt;) => unit\n  ),\n  ~?onEndReachedThreshold: option(float),\n  ~?onRefresh: option(unit => unit),\n  ~?onViewableItemsChanged: option(\n    Js.t(\n      &lt; changed : &lt; index : int Js.undefined; isViewable : bool; item : 'item;\n              key : string; section : &lt;  &gt; Js.t &gt;\n            Js.t array;\n  viewableItems : &lt; index : int Js.undefined; isViewable : bool;\n                    item : 'item; key : string; section : &lt;  &gt; Js.t &gt;\n                  Js.t array &gt;\n    )\n  ),\n  ~?overScrollMode: option([ `never | `auto | `always ]),\n  ~?pagingEnabled: option(bool),\n  ~?refreshing: option(bool),\n  ~?removeClippedSubviews: option(bool),\n  ~?scrollEnabled: option(bool),\n  ~?showsHorizontalScrollIndicator: option(bool),\n  ~?showsVerticalScrollIndicator: option(bool),\n  ~?windowSize: option(int),\n  ~?maxToRenderPerBatch: option(int),\n  ~?viewabilityConfig: option(Js.t(&lt;  &gt;)),\n  ~?onScroll: option(\n    BsReactNative.RNEvent.NativeScrollEvent.t => unit\n  ),\n  ~?style: option(BsReactNative.Style.t),\n  array(ReasonReact.reactElement)\n) => ReasonReact.component(\n  ReasonReact.stateless,\n  ReasonReact.noRetainedProps,\n  unit\n)</h4>", "breadcrumb": "FlatList"},
{"href": "./api/FlatList.html#value-separatorComponent", "title": "separatorComponent", "contents": "separatorComponent separatorProps ReasonReact reactElement  separatorComponent ", "rendered": "<h4 class='item'>let separatorComponent: <a href=\"./api/FlatList.html#type-separatorProps\">separatorProps</a>(\n  'item\n) => ReasonReact.reactElement => <a href=\"./api/FlatList.html#type-separatorComponent\">separatorComponent</a>('item)</h4>", "breadcrumb": "FlatList"},
{"href": "./api/FlatList.html#type-separatorProps", "title": "separatorProps", "contents": "separatorProps highlighted bool leadingItem option", "rendered": "<h4 class='item'>type separatorProps('item) = {\n  highlighted: bool,\n  leadingItem: option('item)\n}</h4>", "breadcrumb": "FlatList"},
{"href": "./api/FlatList.html#type-separatorComponent", "title": "separatorComponent", "contents": "separatorComponent ", "rendered": "<h4 class='item'>type separatorComponent('item)</h4>", "breadcrumb": "FlatList"},
{"href": "./api/FlatList.html#value-renderItem", "title": "renderItem", "contents": "renderItem renderBag ReasonReact reactElement  renderItem ", "rendered": "<h4 class='item'>let renderItem: <a href=\"./api/FlatList.html#type-renderBag\">renderBag</a>(\n  'item\n) => ReasonReact.reactElement => <a href=\"./api/FlatList.html#type-renderItem\">renderItem</a>('item)</h4>", "breadcrumb": "FlatList"},
{"href": "./api/FlatList.html#type-renderItem", "title": "renderItem", "contents": "renderItem ", "rendered": "<h4 class='item'>type renderItem('item)</h4>", "breadcrumb": "FlatList"},
{"href": "./api/FlatList.html#type-renderBag", "title": "renderBag", "contents": "renderBag item index int", "rendered": "<h4 class='item'>type renderBag('item) = {item: 'item, index: int}</h4>", "breadcrumb": "FlatList"},
{"href": "./api/FlatList.html#value-recordInteraction", "title": "recordInteraction", "contents": "recordInteraction ReasonReact reactRef unit ", "rendered": "<h4 class='item'>let recordInteraction: ReasonReact.reactRef => unit</h4>", "breadcrumb": "FlatList"},
{"href": "./api/FlatList.html#value-scrollToOffset", "title": "scrollToOffset", "contents": "scrollToOffset ReasonReact reactRef option int option bool unit unit  offset animated ", "rendered": "<h4 class='item'>let scrollToOffset: (\n  ReasonReact.reactRef,\n  ~?offset: option(int),\n  ~?animated: option(bool),\n  unit\n) => unit</h4>", "breadcrumb": "FlatList"},
{"href": "./api/FlatList.html#value-scrollToItem", "title": "scrollToItem", "contents": "scrollToItem ReasonReact reactRef option bool option int unit unit  item animated viewPosition ", "rendered": "<h4 class='item'>let scrollToItem: (\n  ReasonReact.reactRef,\n  ~item: 'item,\n  ~?animated: option(bool),\n  ~?viewPosition: option(int),\n  unit\n) => unit</h4>", "breadcrumb": "FlatList"},
{"href": "./api/FlatList.html#value-scrollToIndex", "title": "scrollToIndex", "contents": "scrollToIndex ReasonReact reactRef int option bool option int option int unit unit  index animated viewOffset viewPosition ", "rendered": "<h4 class='item'>let scrollToIndex: (\n  ReasonReact.reactRef,\n  ~index: int,\n  ~?animated: option(bool),\n  ~?viewOffset: option(int),\n  ~?viewPosition: option(int),\n  unit\n) => unit</h4>", "breadcrumb": "FlatList"},
{"href": "./api/FlatList.html#value-scrollToEnd", "title": "scrollToEnd", "contents": "scrollToEnd ReasonReact reactRef bool unit  animated", "rendered": "<h4 class='item'>let scrollToEnd: (\n  ReasonReact.reactRef,\n  ~animated: bool\n) => unit</h4>", "breadcrumb": "FlatList"},
{"href": "./api/FlatList.html", "title": "FlatList", "contents": "@rest", "rendered": "@rest", "breadcrumb": "FlatList"},
{"href": "./api/FlatList.html", "title": "FlatList", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "FlatList"},
{"href": "./api/FlatList.html#FlatList", "title": "FlatList", "contents": "", "rendered": "", "breadcrumb": "FlatList"},
{"href": "./api/DatePickerIOS.html#value-make", "title": "make", "contents": "make option Js Date t option Js Date t unit  option Js Date t option Js Date t option option int option int option ReasonReact reactElement option bool option BsReactNative Types insets option unit unit  option BsReactNative RNEvent NativeLayoutEvent t unit  option unit unit  option BsReactNative Types touchResponderHandlers option option bool option BsReactNative Style t option string option option option bool option option bool option bool option list option bool option bool array ReasonReact reactElement ReasonReact component ReasonReact stateless ReasonReact noRetainedProps unit date onDateChange maximumDate minimumDate mode minuteInterval timeZoneOffsetInMinutes accessibilityLabel accessible hitSlop onAccessibilityTap onLayout onMagicTap responderHandlers pointerEvents removeClippedSubviews style testID accessibilityComponentType accessibilityLiveRegion collapsable importantForAccessibility needsOffscreenAlphaCompositing renderToHardwareTextureAndroid accessibilityTraits accessibilityViewIsModal shouldRasterizeIOS ", "rendered": "<h4 class='item'>let make: (\n  ~?date: option(Js.Date.t),\n  ~?onDateChange: option(Js.Date.t => unit),\n  ~?maximumDate: option(Js.Date.t),\n  ~?minimumDate: option(Js.Date.t),\n  ~?mode: option([ `time | `date | `datetime ]),\n  ~?minuteInterval: option(int),\n  ~?timeZoneOffsetInMinutes: option(int),\n  ~?accessibilityLabel: option(ReasonReact.reactElement),\n  ~?accessible: option(bool),\n  ~?hitSlop: option(BsReactNative.Types.insets),\n  ~?onAccessibilityTap: option(unit => unit),\n  ~?onLayout: option(\n    BsReactNative.RNEvent.NativeLayoutEvent.t => unit\n  ),\n  ~?onMagicTap: option(unit => unit),\n  ~?responderHandlers: option(\n    BsReactNative.Types.touchResponderHandlers\n  ),\n  ~?pointerEvents: option(\n    [ `none | `boxOnly | `auto | `boxNone ]\n  ),\n  ~?removeClippedSubviews: option(bool),\n  ~?style: option(BsReactNative.Style.t),\n  ~?testID: option(string),\n  ~?accessibilityComponentType: option(\n    [ `button | `none | `radiobutton_checked | `radiobutton_unchecked ]\n  ),\n  ~?accessibilityLiveRegion: option(\n    [ `none | `polite | `assertive ]\n  ),\n  ~?collapsable: option(bool),\n  ~?importantForAccessibility: option(\n    [ `no | `yes | `noHideDescendants | `auto ]\n  ),\n  ~?needsOffscreenAlphaCompositing: option(bool),\n  ~?renderToHardwareTextureAndroid: option(bool),\n  ~?accessibilityTraits: option(\n    list(\n      [ `frequentUpdates\n| `adjustable\n| `image\n| `button\n| `header\n| `none\n| `plays\n| `text\n| `startsMedia\n| `disabled\n| `link\n| `pageTurn\n| `selected\n| `allowsDirectInteraction\n| `summary\n| `search\n| `key ]\n    )\n  ),\n  ~?accessibilityViewIsModal: option(bool),\n  ~?shouldRasterizeIOS: option(bool),\n  array(ReasonReact.reactElement)\n) => ReasonReact.component(\n  ReasonReact.stateless,\n  ReasonReact.noRetainedProps,\n  unit\n)</h4>", "breadcrumb": "DatePickerIOS"},
{"href": "./api/DatePickerIOS.html", "title": "DatePickerIOS", "contents": "@rest", "rendered": "@rest", "breadcrumb": "DatePickerIOS"},
{"href": "./api/DatePickerIOS.html", "title": "DatePickerIOS", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "DatePickerIOS"},
{"href": "./api/DatePickerIOS.html#DatePickerIOS", "title": "DatePickerIOS", "contents": "", "rendered": "", "breadcrumb": "DatePickerIOS"},
{"href": "./api/Button.html#value-make", "title": "make", "contents": "make option string option string option bool option unit unit  option string option string array ReasonReact reactElement ReasonReact component ReasonReact stateless ReasonReact noRetainedProps unit accessibilityLabel color disabled onPress testID title ", "rendered": "<h4 class='item'>let make: (\n  ~?accessibilityLabel: option(string),\n  ~?color: option(string),\n  ~?disabled: option(bool),\n  ~?onPress: option(unit => unit),\n  ~?testID: option(string),\n  ~?title: option(string),\n  array(ReasonReact.reactElement)\n) => ReasonReact.component(\n  ReasonReact.stateless,\n  ReasonReact.noRetainedProps,\n  unit\n)</h4>", "breadcrumb": "Button"},
{"href": "./api/Button.html", "title": "Button", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Button"},
{"href": "./api/Button.html", "title": "Button", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Button"},
{"href": "./api/Button.html#Button", "title": "Button", "contents": "", "rendered": "", "breadcrumb": "Button"},
{"href": "./api/AnimatedComponents.html#value-ScrollView.make", "title": "ScrollView.make", "contents": "make option ReasonReact reactElement option bool option BsReactNative Types insets option unit unit  option BsReactNative RNEvent NativeLayoutEvent t unit  option unit unit  option BsReactNative Types touchResponderHandlers option option bool option BsReactNative Style t option string option option option bool option option bool option bool option list option bool option bool option BsReactNative Style t option bool option option option float float unit  option BsReactNative RNEvent NativeScrollEvent t unit  option bool option ReasonReact reactElement option bool option bool option bool option list int option option string option bool option bool option bool option bool option bool option bool option BsReactNative Types insets option point option option bool option option float option float option unit unit  option int option BsReactNative Types insets option bool option option float array ReasonReact reactElement ReasonReact component ReasonReact stateless ReasonReact noRetainedProps unit accessibilityLabel accessible hitSlop onAccessibilityTap onLayout onMagicTap responderHandlers pointerEvents removeClippedSubviews style testID accessibilityComponentType accessibilityLiveRegion collapsable importantForAccessibility needsOffscreenAlphaCompositing renderToHardwareTextureAndroid accessibilityTraits accessibilityViewIsModal shouldRasterizeIOS contentContainerStyle horizontal keyboardDismissMode keyboardShouldPersistTaps onContentSizeChange onScroll pagingEnabled refreshControl scrollEnabled showsHorizontalScrollIndicator showsVerticalScrollIndicator stickyHeaderIndices overScrollMode scrollPerfTag alwaysBounceHorizontal alwaysBounceVertical automaticallyAdjustContentInsets bounces canCancelContentTouches centerContent contentInset contentOffset decelerationRate directionalLockEnabled indicatorStyle maximumZoomScale minimumZoomScale onScrollAnimationEnd scrollEventThrottle scrollIndicatorInsets scrollsToTop snapToAlignment zoomScale ", "rendered": "<h4 class='item'>let make: (\n  ~?accessibilityLabel: option(ReasonReact.reactElement),\n  ~?accessible: option(bool),\n  ~?hitSlop: option(BsReactNative.Types.insets),\n  ~?onAccessibilityTap: option(unit => unit),\n  ~?onLayout: option(\n    BsReactNative.RNEvent.NativeLayoutEvent.t => unit\n  ),\n  ~?onMagicTap: option(unit => unit),\n  ~?responderHandlers: option(\n    BsReactNative.Types.touchResponderHandlers\n  ),\n  ~?pointerEvents: option(\n    [ `none | `boxOnly | `auto | `boxNone ]\n  ),\n  ~?removeClippedSubviews: option(bool),\n  ~?style: option(BsReactNative.Style.t),\n  ~?testID: option(string),\n  ~?accessibilityComponentType: option(\n    [ `button | `none | `radiobutton_checked | `radiobutton_unchecked ]\n  ),\n  ~?accessibilityLiveRegion: option(\n    [ `none | `polite | `assertive ]\n  ),\n  ~?collapsable: option(bool),\n  ~?importantForAccessibility: option(\n    [ `no | `yes | `noHideDescendants | `auto ]\n  ),\n  ~?needsOffscreenAlphaCompositing: option(bool),\n  ~?renderToHardwareTextureAndroid: option(bool),\n  ~?accessibilityTraits: option(\n    list(\n      [ `frequentUpdates\n| `adjustable\n| `image\n| `button\n| `none\n| `header\n| `plays\n| `text\n| `startsMedia\n| `link\n| `disabled\n| `pageTurn\n| `selected\n| `summary\n| `search\n| `allowsDirectInteraction\n| `key ]\n    )\n  ),\n  ~?accessibilityViewIsModal: option(bool),\n  ~?shouldRasterizeIOS: option(bool),\n  ~?contentContainerStyle: option(BsReactNative.Style.t),\n  ~?horizontal: option(bool),\n  ~?keyboardDismissMode: option(\n    [ `interactive | `none | `onDrag ]\n  ),\n  ~?keyboardShouldPersistTaps: option(\n    [ `never | `handled | `always ]\n  ),\n  ~?onContentSizeChange: option((float, float) => unit),\n  ~?onScroll: option(\n    BsReactNative.RNEvent.NativeScrollEvent.t => unit\n  ),\n  ~?pagingEnabled: option(bool),\n  ~?refreshControl: option(ReasonReact.reactElement),\n  ~?scrollEnabled: option(bool),\n  ~?showsHorizontalScrollIndicator: option(bool),\n  ~?showsVerticalScrollIndicator: option(bool),\n  ~?stickyHeaderIndices: option(list(int)),\n  ~?overScrollMode: option([ `never | `auto | `always ]),\n  ~?scrollPerfTag: option(string),\n  ~?alwaysBounceHorizontal: option(bool),\n  ~?alwaysBounceVertical: option(bool),\n  ~?automaticallyAdjustContentInsets: option(bool),\n  ~?bounces: option(bool),\n  ~?canCancelContentTouches: option(bool),\n  ~?centerContent: option(bool),\n  ~?contentInset: option(BsReactNative.Types.insets),\n  ~?contentOffset: option(<a href=\"./api/AnimatedComponents.html#type-ScrollView.point\">point</a>),\n  ~?decelerationRate: option([ `normal | `fast ]),\n  ~?directionalLockEnabled: option(bool),\n  ~?indicatorStyle: option([ `white | `black | `default ]),\n  ~?maximumZoomScale: option(float),\n  ~?minimumZoomScale: option(float),\n  ~?onScrollAnimationEnd: option(unit => unit),\n  ~?scrollEventThrottle: option(int),\n  ~?scrollIndicatorInsets: option(\n    BsReactNative.Types.insets\n  ),\n  ~?scrollsToTop: option(bool),\n  ~?snapToAlignment: option([ `start | `center | `end_ ]),\n  ~?zoomScale: option(float),\n  array(ReasonReact.reactElement)\n) => ReasonReact.component(\n  ReasonReact.stateless,\n  ReasonReact.noRetainedProps,\n  unit\n)</h4>", "breadcrumb": "AnimatedComponents"},
{"href": "./api/AnimatedComponents.html#value-ScrollView.scrollToEnd", "title": "ScrollView.scrollToEnd", "contents": "scrollToEnd ReasonReact reactRef bool unit  animated", "rendered": "<h4 class='item'>let scrollToEnd: (\n  ReasonReact.reactRef,\n  ~animated: bool\n) => unit</h4>", "breadcrumb": "AnimatedComponents"},
{"href": "./api/AnimatedComponents.html#value-ScrollView.scrollTo", "title": "ScrollView.scrollTo", "contents": "scrollTo ReasonReact reactRef int int bool unit  x y animated", "rendered": "<h4 class='item'>let scrollTo: (\n  ReasonReact.reactRef,\n  ~x: int,\n  ~y: int,\n  ~animated: bool\n) => unit</h4>", "breadcrumb": "AnimatedComponents"},
{"href": "./api/AnimatedComponents.html#type-ScrollView.point", "title": "ScrollView.point", "contents": "point x float y float", "rendered": "<h4 class='item'>type point = {x: float, y: float}</h4>", "breadcrumb": "AnimatedComponents"},
{"href": "./api/AnimatedComponents.html#value-ScrollView.onScrollUpdater", "title": "ScrollView.onScrollUpdater", "contents": "onScrollUpdater option option option bool unit BsReactNative RNEvent NativeScrollEvent t unit x y native  ", "rendered": "<h4 class='item'>let onScrollUpdater: (\n  ~?x: option('a),\n  ~?y: option('b),\n  ~?native: option(bool),\n  unit,\n  BsReactNative.RNEvent.NativeScrollEvent.t\n) => unit</h4>", "breadcrumb": "AnimatedComponents"},
{"href": "./api/AnimatedComponents.html#module-ScrollView", "title": "ScrollView", "contents": "@rest", "rendered": "@rest", "breadcrumb": "AnimatedComponents"},
{"href": "./api/AnimatedComponents.html#module-ScrollView", "title": "ScrollView", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "AnimatedComponents"},
{"href": "./api/AnimatedComponents.html", "title": "AnimatedComponents", "contents": "@rest", "rendered": "@rest", "breadcrumb": "AnimatedComponents"},
{"href": "./api/AnimatedComponents.html", "title": "AnimatedComponents", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "AnimatedComponents"},
{"href": "./api/AnimatedComponents.html#AnimatedComponents", "title": "AnimatedComponents", "contents": "", "rendered": "", "breadcrumb": "AnimatedComponents"},
{"href": "./api/ActivityIndicator.html#value-make", "title": "make", "contents": "make option bool option string option option bool option ReasonReact reactElement option bool option BsReactNative Types insets option unit unit  option BsReactNative RNEvent NativeLayoutEvent t unit  option unit unit  option BsReactNative Types touchResponderHandlers option option bool option BsReactNative Style t option string option option option bool option option bool option bool option list option bool option bool array ReasonReact reactElement ReasonReact component ReasonReact stateless ReasonReact noRetainedProps unit animating color size hidesWhenStopped accessibilityLabel accessible hitSlop onAccessibilityTap onLayout onMagicTap responderHandlers pointerEvents removeClippedSubviews style testID accessibilityComponentType accessibilityLiveRegion collapsable importantForAccessibility needsOffscreenAlphaCompositing renderToHardwareTextureAndroid accessibilityTraits accessibilityViewIsModal shouldRasterizeIOS ", "rendered": "<h4 class='item'>let make: (\n  ~?animating: option(bool),\n  ~?color: option(string),\n  ~?size: option([ `small | `large | `exact of int ]),\n  ~?hidesWhenStopped: option(bool),\n  ~?accessibilityLabel: option(ReasonReact.reactElement),\n  ~?accessible: option(bool),\n  ~?hitSlop: option(BsReactNative.Types.insets),\n  ~?onAccessibilityTap: option(unit => unit),\n  ~?onLayout: option(\n    BsReactNative.RNEvent.NativeLayoutEvent.t => unit\n  ),\n  ~?onMagicTap: option(unit => unit),\n  ~?responderHandlers: option(\n    BsReactNative.Types.touchResponderHandlers\n  ),\n  ~?pointerEvents: option(\n    [ `none | `boxOnly | `auto | `boxNone ]\n  ),\n  ~?removeClippedSubviews: option(bool),\n  ~?style: option(BsReactNative.Style.t),\n  ~?testID: option(string),\n  ~?accessibilityComponentType: option(\n    [ `button | `none | `radiobutton_checked | `radiobutton_unchecked ]\n  ),\n  ~?accessibilityLiveRegion: option(\n    [ `none | `polite | `assertive ]\n  ),\n  ~?collapsable: option(bool),\n  ~?importantForAccessibility: option(\n    [ `no | `yes | `noHideDescendants | `auto ]\n  ),\n  ~?needsOffscreenAlphaCompositing: option(bool),\n  ~?renderToHardwareTextureAndroid: option(bool),\n  ~?accessibilityTraits: option(\n    list(\n      [ `frequentUpdates\n| `adjustable\n| `image\n| `button\n| `header\n| `none\n| `plays\n| `text\n| `startsMedia\n| `disabled\n| `link\n| `pageTurn\n| `selected\n| `allowsDirectInteraction\n| `summary\n| `search\n| `key ]\n    )\n  ),\n  ~?accessibilityViewIsModal: option(bool),\n  ~?shouldRasterizeIOS: option(bool),\n  array(ReasonReact.reactElement)\n) => ReasonReact.component(\n  ReasonReact.stateless,\n  ReasonReact.noRetainedProps,\n  unit\n)</h4>", "breadcrumb": "ActivityIndicator"},
{"href": "./api/ActivityIndicator.html", "title": "ActivityIndicator", "contents": "@rest", "rendered": "@rest", "breadcrumb": "ActivityIndicator"},
{"href": "./api/ActivityIndicator.html", "title": "ActivityIndicator", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ActivityIndicator"},
{"href": "./api/ActivityIndicator.html#ActivityIndicator", "title": "ActivityIndicator", "contents": "", "rendered": "", "breadcrumb": "ActivityIndicator"},
{"href": "./api/Clipboard.html#value-setString", "title": "setString", "contents": "setString string unit ", "rendered": "<h4 class='item'>let setString: string => unit</h4>", "breadcrumb": "Clipboard"},
{"href": "./api/Clipboard.html#value-getString", "title": "getString", "contents": "getString unit Js Promise t string ", "rendered": "<h4 class='item'>let getString: unit => Js.Promise.t(string)</h4>", "breadcrumb": "Clipboard"},
{"href": "./api/Clipboard.html", "title": "Clipboard", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Clipboard"},
{"href": "./api/Clipboard.html", "title": "Clipboard", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Clipboard"},
{"href": "./api/Clipboard.html#Clipboard", "title": "Clipboard", "contents": "", "rendered": "", "breadcrumb": "Clipboard"},
{"href": "./api/CameraRoll.html#value-getPhotos", "title": "getPhotos", "contents": "getPhotos int option cursor option groupType option string option assetType option string unit Js Promise t assets first after groupTypes groupName assetType mimeTypes ", "rendered": "<h4 class='item'>let getPhotos: (\n  ~first: int,\n  ~?after: option(<a href=\"./api/CameraRoll.html#type-cursor\">cursor</a>),\n  ~?groupTypes: option(<a href=\"./api/CameraRoll.html#type-groupType\">groupType</a>),\n  ~?groupName: option(string),\n  ~?assetType: option(<a href=\"./api/CameraRoll.html#type-assetType\">assetType</a>),\n  ~?mimeTypes: option(string),\n  unit\n) => Js.Promise.t(<a href=\"./api/CameraRoll.html#type-assets\">assets</a>)</h4>", "breadcrumb": "CameraRoll"},
{"href": "./api/CameraRoll.html#value-saveToCameraRoll", "title": "saveToCameraRoll", "contents": "saveToCameraRoll string option fileType unit Js Promise t Js Result t string Js Promise error uri type_ ", "rendered": "<h4 class='item'>let saveToCameraRoll: (\n  ~uri: string,\n  ~?type_: option(<a href=\"./api/CameraRoll.html#type-fileType\">fileType</a>),\n  unit\n) => Js.Promise.t(Js.Result.t(string, Js.Promise.error))</h4>", "breadcrumb": "CameraRoll"},
{"href": "./api/CameraRoll.html#type-assetType", "title": "assetType", "contents": "assetType ", "rendered": "<h4 class='item'>type assetType = | All | Videos | Photos\n</h4>", "breadcrumb": "CameraRoll"},
{"href": "./api/CameraRoll.html#type-groupType", "title": "groupType", "contents": "groupType ", "rendered": "<h4 class='item'>type groupType = \n  | All\n  | Album\n  | Event\n  | Faces\n  | Library\n  | PhotoStream\n  | SavedPhotos\n</h4>", "breadcrumb": "CameraRoll"},
{"href": "./api/CameraRoll.html#type-fileType", "title": "fileType", "contents": "fileType ", "rendered": "<h4 class='item'>type fileType = | Video | Photo\n</h4>", "breadcrumb": "CameraRoll"},
{"href": "./api/CameraRoll.html#type-assets", "title": "assets", "contents": "assets Js t", "rendered": "<h4 class='item'>type assets = Js.t(\n  &lt; edges : &lt; node : node &gt; Js.t array;\n  page_info : &lt; end_cursor : cursor; has_next_page : bool;\n                start_cursor : cursor &gt;\n              Js.t &gt;\n)</h4>", "breadcrumb": "CameraRoll"},
{"href": "./api/CameraRoll.html#type-node", "title": "node", "contents": "node Js t", "rendered": "<h4 class='item'>type node = Js.t(\n  &lt; _type : string; group_name : string;\n  image : &lt; filename : string; height : int; isStored : bool;\n            playableDuration : int; uri : string; width : int &gt;\n          Js.t;\n  location : &lt; altitude : float; heading : float; latitude : float;\n               longitude : float; speed : float &gt;\n             Js.t;\n  timestamp : float &gt;\n)</h4>", "breadcrumb": "CameraRoll"},
{"href": "./api/CameraRoll.html#type-cursor", "title": "cursor", "contents": "cursor ", "rendered": "<h4 class='item'>type cursor</h4>", "breadcrumb": "CameraRoll"},
{"href": "./api/CameraRoll.html", "title": "CameraRoll", "contents": "@rest", "rendered": "@rest", "breadcrumb": "CameraRoll"},
{"href": "./api/CameraRoll.html", "title": "CameraRoll", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "CameraRoll"},
{"href": "./api/CameraRoll.html#CameraRoll", "title": "CameraRoll", "contents": "", "rendered": "", "breadcrumb": "CameraRoll"},
{"href": "./api/BackHandler.html#value-removeEventListener", "title": "removeEventListener", "contents": "removeEventListener string unit bool  unit  ", "rendered": "<h4 class='item'>let removeEventListener: (string, unit => bool) => unit</h4>", "breadcrumb": "BackHandler"},
{"href": "./api/BackHandler.html#value-addEventListener", "title": "addEventListener", "contents": "addEventListener string unit bool  unit  ", "rendered": "<h4 class='item'>let addEventListener: (string, unit => bool) => unit</h4>", "breadcrumb": "BackHandler"},
{"href": "./api/BackHandler.html#value-exitApp", "title": "exitApp", "contents": "exitApp unit unit ", "rendered": "<h4 class='item'>let exitApp: unit => unit</h4>", "breadcrumb": "BackHandler"},
{"href": "./api/BackHandler.html", "title": "BackHandler", "contents": "@rest", "rendered": "@rest", "breadcrumb": "BackHandler"},
{"href": "./api/BackHandler.html", "title": "BackHandler", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "BackHandler"},
{"href": "./api/BackHandler.html#BackHandler", "title": "BackHandler", "contents": "", "rendered": "", "breadcrumb": "BackHandler"},
{"href": "./api/AsyncStorage.html#value-multiMerge", "title": "multiMerge", "contents": "multiMerge array string string option option array error unit  unit Js Promise t unit  callback ", "rendered": "<h4 class='item'>let multiMerge: (\n  array((string, string)),\n  ~?callback: option(option(array(<a href=\"./api/AsyncStorage.html#type-error\">error</a>)) => unit),\n  unit\n) => Js.Promise.t(unit)</h4>", "breadcrumb": "AsyncStorage"},
{"href": "./api/AsyncStorage.html#value-multiRemove", "title": "multiRemove", "contents": "multiRemove array string option option array error unit  unit Js Promise t unit  callback ", "rendered": "<h4 class='item'>let multiRemove: (\n  array(string),\n  ~?callback: option(option(array(<a href=\"./api/AsyncStorage.html#type-error\">error</a>)) => unit),\n  unit\n) => Js.Promise.t(unit)</h4>", "breadcrumb": "AsyncStorage"},
{"href": "./api/AsyncStorage.html#value-multiSet", "title": "multiSet", "contents": "multiSet array string string option option array error unit  unit Js Promise t unit  callback ", "rendered": "<h4 class='item'>let multiSet: (\n  array((string, string)),\n  ~?callback: option(option(array(<a href=\"./api/AsyncStorage.html#type-error\">error</a>)) => unit),\n  unit\n) => Js.Promise.t(unit)</h4>", "breadcrumb": "AsyncStorage"},
{"href": "./api/AsyncStorage.html#value-multiGet", "title": "multiGet", "contents": "multiGet array string option option array error option array array string unit   unit Js Promise t option array array string  callback ", "rendered": "<h4 class='item'>let multiGet: (\n  array(string),\n  ~?callback: option(\n    (\n      option(array(<a href=\"./api/AsyncStorage.html#type-error\">error</a>)),\n      option(array(array(string)))\n    ) => unit\n  ),\n  unit\n) => Js.Promise.t(option(array(array(string))))</h4>", "breadcrumb": "AsyncStorage"},
{"href": "./api/AsyncStorage.html#value-flushGetRequests", "title": "flushGetRequests", "contents": "flushGetRequests unit unit ", "rendered": "<h4 class='item'>let flushGetRequests: unit => unit</h4>", "breadcrumb": "AsyncStorage"},
{"href": "./api/AsyncStorage.html#value-getAllKeys", "title": "getAllKeys", "contents": "getAllKeys option option error option array string unit   unit Js Promise t option array string callback ", "rendered": "<h4 class='item'>let getAllKeys: (\n  ~?callback: option(\n    (option(<a href=\"./api/AsyncStorage.html#type-error\">error</a>), option(array(string))) => unit\n  ),\n  unit\n) => Js.Promise.t(option(array(string)))</h4>", "breadcrumb": "AsyncStorage"},
{"href": "./api/AsyncStorage.html#value-clear", "title": "clear", "contents": "clear option option error unit  unit Js Promise t unit callback ", "rendered": "<h4 class='item'>let clear: (\n  ~?callback: option(option(<a href=\"./api/AsyncStorage.html#type-error\">error</a>) => unit),\n  unit\n) => Js.Promise.t(unit)</h4>", "breadcrumb": "AsyncStorage"},
{"href": "./api/AsyncStorage.html#value-mergeItem", "title": "mergeItem", "contents": "mergeItem string string option option error unit  unit Js Promise t unit   callback ", "rendered": "<h4 class='item'>let mergeItem: (\n  string,\n  string,\n  ~?callback: option(option(<a href=\"./api/AsyncStorage.html#type-error\">error</a>) => unit),\n  unit\n) => Js.Promise.t(unit)</h4>", "breadcrumb": "AsyncStorage"},
{"href": "./api/AsyncStorage.html#value-removeItem", "title": "removeItem", "contents": "removeItem string option option error unit  unit Js Promise t unit  callback ", "rendered": "<h4 class='item'>let removeItem: (\n  string,\n  ~?callback: option(option(<a href=\"./api/AsyncStorage.html#type-error\">error</a>) => unit),\n  unit\n) => Js.Promise.t(unit)</h4>", "breadcrumb": "AsyncStorage"},
{"href": "./api/AsyncStorage.html#value-setItem", "title": "setItem", "contents": "setItem string string option option error unit  unit Js Promise t unit   callback ", "rendered": "<h4 class='item'>let setItem: (\n  string,\n  string,\n  ~?callback: option(option(<a href=\"./api/AsyncStorage.html#type-error\">error</a>) => unit),\n  unit\n) => Js.Promise.t(unit)</h4>", "breadcrumb": "AsyncStorage"},
{"href": "./api/AsyncStorage.html#value-getItem", "title": "getItem", "contents": "getItem string option option error option string unit   unit Js Promise t option string  callback ", "rendered": "<h4 class='item'>let getItem: (\n  string,\n  ~?callback: option(\n    (option(<a href=\"./api/AsyncStorage.html#type-error\">error</a>), option(string)) => unit\n  ),\n  unit\n) => Js.Promise.t(option(string))</h4>", "breadcrumb": "AsyncStorage"},
{"href": "./api/AsyncStorage.html#type-error", "title": "error", "contents": "error ", "rendered": "<h4 class='item'>type error</h4>", "breadcrumb": "AsyncStorage"},
{"href": "./api/AsyncStorage.html", "title": "AsyncStorage", "contents": "@rest", "rendered": "@rest", "breadcrumb": "AsyncStorage"},
{"href": "./api/AsyncStorage.html", "title": "AsyncStorage", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "AsyncStorage"},
{"href": "./api/AsyncStorage.html#AsyncStorage", "title": "AsyncStorage", "contents": "", "rendered": "", "breadcrumb": "AsyncStorage"},
{"href": "./api/AppState.html#value-removeEventListener", "title": "removeEventListener", "contents": "removeEventListener string unit unit  unit  ", "rendered": "<h4 class='item'>let removeEventListener: (string, unit => unit) => unit</h4>", "breadcrumb": "AppState"},
{"href": "./api/AppState.html#value-addEventListener", "title": "addEventListener", "contents": "addEventListener string unit unit  unit  ", "rendered": "<h4 class='item'>let addEventListener: (string, unit => unit) => unit</h4>", "breadcrumb": "AppState"},
{"href": "./api/AppState.html#value-currentState", "title": "currentState", "contents": "currentState unit state ", "rendered": "<h4 class='item'>let currentState: unit => <a href=\"./api/AppState.html#type-state\">state</a></h4>", "breadcrumb": "AppState"},
{"href": "./api/AppState.html#type-state", "title": "state", "contents": "state ", "rendered": "<h4 class='item'>type state = | Active | Background | Inactive\n</h4>", "breadcrumb": "AppState"},
{"href": "./api/AppState.html", "title": "AppState", "contents": "@rest", "rendered": "@rest", "breadcrumb": "AppState"},
{"href": "./api/AppState.html", "title": "AppState", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "AppState"},
{"href": "./api/AppState.html#AppState", "title": "AppState", "contents": "", "rendered": "", "breadcrumb": "AppState"},
{"href": "./api/AppRegistry.html#value-registerComponent", "title": "registerComponent", "contents": "registerComponent string unit ReasonReact reactClass  unit  ", "rendered": "<h4 class='item'>let registerComponent: (\n  string,\n  unit => ReasonReact.reactClass\n) => unit</h4>", "breadcrumb": "AppRegistry"},
{"href": "./api/AppRegistry.html", "title": "AppRegistry", "contents": "@rest", "rendered": "@rest", "breadcrumb": "AppRegistry"},
{"href": "./api/AppRegistry.html", "title": "AppRegistry", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "AppRegistry"},
{"href": "./api/AppRegistry.html#AppRegistry", "title": "AppRegistry", "contents": "", "rendered": "", "breadcrumb": "AppRegistry"},
{"href": "./api/AnimatedRe.html#value-createAnimatedComponent", "title": "createAnimatedComponent", "contents": "createAnimatedComponent ReasonReact reactClass ReasonReact reactClass ", "rendered": "<h4 class='item'>let createAnimatedComponent: ReasonReact.reactClass => ReasonReact.reactClass</h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-loop", "title": "loop", "contents": "loop option int CompositeAnimation t unit CompositeAnimation t iterations animation ", "rendered": "<h4 class='item'>let loop: (\n  ~?iterations: option(int),\n  ~animation: <a href=\"./api/AnimatedRe.html#module-CompositeAnimation\">CompositeAnimation</a>.<a href=\"./api/AnimatedRe.html#type-CompositeAnimation.t\">t</a>,\n  unit\n) => <a href=\"./api/AnimatedRe.html#module-CompositeAnimation\">CompositeAnimation</a>.<a href=\"./api/AnimatedRe.html#type-CompositeAnimation.t\">t</a></h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-stagger", "title": "stagger", "contents": "stagger float array CompositeAnimation t CompositeAnimation t  ", "rendered": "<h4 class='item'>let stagger: (\n  float,\n  array(<a href=\"./api/AnimatedRe.html#module-CompositeAnimation\">CompositeAnimation</a>.<a href=\"./api/AnimatedRe.html#type-CompositeAnimation.t\">t</a>)\n) => <a href=\"./api/AnimatedRe.html#module-CompositeAnimation\">CompositeAnimation</a>.<a href=\"./api/AnimatedRe.html#type-CompositeAnimation.t\">t</a></h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-parallel", "title": "parallel", "contents": "parallel array CompositeAnimation t Js t CompositeAnimation t  ", "rendered": "<h4 class='item'>let parallel: (\n  array(<a href=\"./api/AnimatedRe.html#module-CompositeAnimation\">CompositeAnimation</a>.<a href=\"./api/AnimatedRe.html#type-CompositeAnimation.t\">t</a>),\n  Js.t(\n    &lt; stopTogether : bool &gt;\n  )\n) => <a href=\"./api/AnimatedRe.html#module-CompositeAnimation\">CompositeAnimation</a>.<a href=\"./api/AnimatedRe.html#type-CompositeAnimation.t\">t</a></h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-sequence", "title": "sequence", "contents": "sequence array CompositeAnimation t CompositeAnimation t ", "rendered": "<h4 class='item'>let sequence: array(\n  <a href=\"./api/AnimatedRe.html#module-CompositeAnimation\">CompositeAnimation</a>.<a href=\"./api/AnimatedRe.html#type-CompositeAnimation.t\">t</a>\n) => <a href=\"./api/AnimatedRe.html#module-CompositeAnimation\">CompositeAnimation</a>.<a href=\"./api/AnimatedRe.html#type-CompositeAnimation.t\">t</a></h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-delay", "title": "delay", "contents": "delay float CompositeAnimation t ", "rendered": "<h4 class='item'>let delay: float => <a href=\"./api/AnimatedRe.html#module-CompositeAnimation\">CompositeAnimation</a>.<a href=\"./api/AnimatedRe.html#type-CompositeAnimation.t\">t</a></h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-event", "title": "event", "contents": "event array animatedEvent  ", "rendered": "<h4 class='item'>let event: (array('a), 'b) => <a href=\"./api/AnimatedRe.html#type-animatedEvent\">animatedEvent</a></h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#type-animatedEvent", "title": "animatedEvent", "contents": "animatedEvent ", "rendered": "<h4 class='item'>type animatedEvent</h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-ValueXY.Decay.animate", "title": "ValueXY.Decay.animate", "contents": "animate value jsValue option float option bool option bool option endCallback option int unit CompositeAnimation t value velocity deceleration isInteraction useNativeDriver onComplete iterations ", "rendered": "<h4 class='item'>let animate: (\n  ~value: <a href=\"./api/AnimatedRe.html#type-ValueXY.value\">value</a>,\n  ~velocity: <a href=\"./api/AnimatedRe.html#type-ValueXY.jsValue\">jsValue</a>,\n  ~?deceleration: option(float),\n  ~?isInteraction: option(bool),\n  ~?useNativeDriver: option(bool),\n  ~?onComplete: option(<a href=\"./api/AnimatedRe.html#type-Animation.endCallback\" title=\"Animation.endCallback\">endCallback</a>),\n  ~?iterations: option(int),\n  unit\n) => <a href=\"./api/AnimatedRe.html#module-CompositeAnimation\">CompositeAnimation</a>.<a href=\"./api/AnimatedRe.html#type-CompositeAnimation.t\">t</a></h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#type-ValueXY.Decay.config", "title": "ValueXY.Decay.config", "contents": "config ", "rendered": "<h4 class='item'>type config</h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#module-ValueXY.Decay", "title": "ValueXY.Decay", "contents": "@rest", "rendered": "@rest", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#module-ValueXY.Decay", "title": "ValueXY.Decay", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-ValueXY.Spring.animate", "title": "ValueXY.Spring.animate", "contents": "animate value option float option bool option float option jsValue option float option float option float option float option float option float option float option bool option bool option endCallback option int unit CompositeAnimation t value toValue restDisplacementThreshold overshootClamping restSpeedThreshold velocity bounciness speed tension friction stiffness mass damping isInteraction useNativeDriver onComplete iterations ", "rendered": "<h4 class='item'>let animate: (\n  ~value: <a href=\"./api/AnimatedRe.html#type-ValueXY.value\">value</a>,\n  ~toValue: [ `animated of value | `raw of jsValue ],\n  ~?restDisplacementThreshold: option(float),\n  ~?overshootClamping: option(bool),\n  ~?restSpeedThreshold: option(float),\n  ~?velocity: option(<a href=\"./api/AnimatedRe.html#type-ValueXY.jsValue\">jsValue</a>),\n  ~?bounciness: option(float),\n  ~?speed: option(float),\n  ~?tension: option(float),\n  ~?friction: option(float),\n  ~?stiffness: option(float),\n  ~?mass: option(float),\n  ~?damping: option(float),\n  ~?isInteraction: option(bool),\n  ~?useNativeDriver: option(bool),\n  ~?onComplete: option(<a href=\"./api/AnimatedRe.html#type-Animation.endCallback\" title=\"Animation.endCallback\">endCallback</a>),\n  ~?iterations: option(int),\n  unit\n) => <a href=\"./api/AnimatedRe.html#module-CompositeAnimation\">CompositeAnimation</a>.<a href=\"./api/AnimatedRe.html#type-CompositeAnimation.t\">t</a></h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#type-ValueXY.Spring.config", "title": "ValueXY.Spring.config", "contents": "config ", "rendered": "<h4 class='item'>type config</h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#module-ValueXY.Spring", "title": "ValueXY.Spring", "contents": "@rest", "rendered": "@rest", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#module-ValueXY.Spring", "title": "ValueXY.Spring", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-ValueXY.Timing.animate", "title": "ValueXY.Timing.animate", "contents": "animate value option Easing t option float option float option bool option bool option endCallback option int unit CompositeAnimation t value toValue easing duration delay isInteraction useNativeDriver onComplete iterations ", "rendered": "<h4 class='item'>let animate: (\n  ~value: <a href=\"./api/AnimatedRe.html#type-ValueXY.value\">value</a>,\n  ~toValue: [ `animated of value | `raw of jsValue ],\n  ~?easing: option(<a href=\"./api/AnimatedRe.html#module-Easing\">Easing</a>.<a href=\"./api/AnimatedRe.html#type-Easing.t\">t</a>),\n  ~?duration: option(float),\n  ~?delay: option(float),\n  ~?isInteraction: option(bool),\n  ~?useNativeDriver: option(bool),\n  ~?onComplete: option(<a href=\"./api/AnimatedRe.html#type-Animation.endCallback\" title=\"Animation.endCallback\">endCallback</a>),\n  ~?iterations: option(int),\n  unit\n) => <a href=\"./api/AnimatedRe.html#module-CompositeAnimation\">CompositeAnimation</a>.<a href=\"./api/AnimatedRe.html#type-CompositeAnimation.t\">t</a></h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#type-ValueXY.Timing.config", "title": "ValueXY.Timing.config", "contents": "config ", "rendered": "<h4 class='item'>type config</h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#module-ValueXY.Timing", "title": "ValueXY.Timing", "contents": "@rest", "rendered": "@rest", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#module-ValueXY.Timing", "title": "ValueXY.Timing", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#type-ValueXY.value", "title": "ValueXY.value", "contents": "value t", "rendered": "<h4 class='item'>type value = <a href=\"./api/AnimatedRe.html#type-ValueXY.t\">t</a></h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-ValueXY.getY", "title": "ValueXY.getY", "contents": "getY t Value t ", "rendered": "<h4 class='item'>let getY: <a href=\"./api/AnimatedRe.html#type-ValueXY.t\">t</a> => <a href=\"./api/AnimatedRe.html#module-Value\">Value</a>.<a href=\"./api/AnimatedRe.html#type-Value.t\">t</a></h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-ValueXY.getX", "title": "ValueXY.getX", "contents": "getX t Value t ", "rendered": "<h4 class='item'>let getX: <a href=\"./api/AnimatedRe.html#type-ValueXY.t\">t</a> => <a href=\"./api/AnimatedRe.html#module-Value\">Value</a>.<a href=\"./api/AnimatedRe.html#type-Value.t\">t</a></h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-ValueXY.multiply", "title": "ValueXY.multiply", "contents": "multiply t t t  ", "rendered": "<h4 class='item'>let multiply: (<a href=\"./api/AnimatedRe.html#type-ValueXY.t\">t</a>, <a href=\"./api/AnimatedRe.html#type-ValueXY.t\">t</a>) => <a href=\"./api/AnimatedRe.html#type-ValueXY.t\">t</a></h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-ValueXY.divide", "title": "ValueXY.divide", "contents": "divide t t t  ", "rendered": "<h4 class='item'>let divide: (<a href=\"./api/AnimatedRe.html#type-ValueXY.t\">t</a>, <a href=\"./api/AnimatedRe.html#type-ValueXY.t\">t</a>) => <a href=\"./api/AnimatedRe.html#type-ValueXY.t\">t</a></h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-ValueXY.add", "title": "ValueXY.add", "contents": "add t t t  ", "rendered": "<h4 class='item'>let add: (<a href=\"./api/AnimatedRe.html#type-ValueXY.t\">t</a>, <a href=\"./api/AnimatedRe.html#type-ValueXY.t\">t</a>) => <a href=\"./api/AnimatedRe.html#type-ValueXY.t\">t</a></h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-ValueXY.getTranslateTransform", "title": "ValueXY.getTranslateTransform", "contents": "getTranslateTransform t translateTransform ", "rendered": "<h4 class='item'>let getTranslateTransform: <a href=\"./api/AnimatedRe.html#type-ValueXY.t\">t</a> => <a href=\"./api/AnimatedRe.html#type-ValueXY.translateTransform\">translateTransform</a></h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-ValueXY.getLayout", "title": "ValueXY.getLayout", "contents": "getLayout t layout ", "rendered": "<h4 class='item'>let getLayout: <a href=\"./api/AnimatedRe.html#type-ValueXY.t\">t</a> => <a href=\"./api/AnimatedRe.html#type-ValueXY.layout\">layout</a></h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-ValueXY.removeAllListeners", "title": "ValueXY.removeAllListeners", "contents": "removeAllListeners t unit ", "rendered": "<h4 class='item'>let removeAllListeners: <a href=\"./api/AnimatedRe.html#type-ValueXY.t\">t</a> => unit</h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-ValueXY.removeListener", "title": "ValueXY.removeListener", "contents": "removeListener t string unit  ", "rendered": "<h4 class='item'>let removeListener: (<a href=\"./api/AnimatedRe.html#type-ValueXY.t\">t</a>, string) => unit</h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-ValueXY.addListener", "title": "ValueXY.addListener", "contents": "addListener t callback string  ", "rendered": "<h4 class='item'>let addListener: (<a href=\"./api/AnimatedRe.html#type-ValueXY.t\">t</a>, <a href=\"./api/AnimatedRe.html#type-ValueXY.callback\">callback</a>) => string</h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-ValueXY.stopAnimation", "title": "ValueXY.stopAnimation", "contents": "stopAnimation t option callback unit  ", "rendered": "<h4 class='item'>let stopAnimation: (<a href=\"./api/AnimatedRe.html#type-ValueXY.t\">t</a>, option(<a href=\"./api/AnimatedRe.html#type-ValueXY.callback\">callback</a>)) => unit</h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-ValueXY.resetAnimation", "title": "ValueXY.resetAnimation", "contents": "resetAnimation t option callback unit  ", "rendered": "<h4 class='item'>let resetAnimation: (<a href=\"./api/AnimatedRe.html#type-ValueXY.t\">t</a>, option(<a href=\"./api/AnimatedRe.html#type-ValueXY.callback\">callback</a>)) => unit</h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-ValueXY.extractOffset", "title": "ValueXY.extractOffset", "contents": "extractOffset t unit ", "rendered": "<h4 class='item'>let extractOffset: <a href=\"./api/AnimatedRe.html#type-ValueXY.t\">t</a> => unit</h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-ValueXY.flattenOffset", "title": "ValueXY.flattenOffset", "contents": "flattenOffset t unit ", "rendered": "<h4 class='item'>let flattenOffset: <a href=\"./api/AnimatedRe.html#type-ValueXY.t\">t</a> => unit</h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-ValueXY.setOffset", "title": "ValueXY.setOffset", "contents": "setOffset t float float unit  x y", "rendered": "<h4 class='item'>let setOffset: (<a href=\"./api/AnimatedRe.html#type-ValueXY.t\">t</a>, ~x: float, ~y: float) => unit</h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-ValueXY.setValue", "title": "ValueXY.setValue", "contents": "setValue t float float unit  x y", "rendered": "<h4 class='item'>let setValue: (<a href=\"./api/AnimatedRe.html#type-ValueXY.t\">t</a>, ~x: float, ~y: float) => unit</h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-ValueXY.create", "title": "ValueXY.create", "contents": "create float float t x y", "rendered": "<h4 class='item'>let create: (~x: float, ~y: float) => <a href=\"./api/AnimatedRe.html#type-ValueXY.t\">t</a></h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#type-ValueXY.layout", "title": "ValueXY.layout", "contents": "layout Js t", "rendered": "<h4 class='item'>type layout = Js.t(&lt; left : Value.t; top : Value.t &gt;)</h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#type-ValueXY.translateTransform", "title": "ValueXY.translateTransform", "contents": "translateTransform Js t", "rendered": "<h4 class='item'>type translateTransform = Js.t(\n  &lt; translateX : Value.t; translateY : Value.t &gt;\n)</h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#type-ValueXY.callback", "title": "ValueXY.callback", "contents": "callback jsValue unit ", "rendered": "<h4 class='item'>type callback = <a href=\"./api/AnimatedRe.html#type-ValueXY.jsValue\">jsValue</a> => unit</h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#type-ValueXY.jsValue", "title": "ValueXY.jsValue", "contents": "jsValue Js t", "rendered": "<h4 class='item'>type jsValue = Js.t(&lt; x : float; y : float &gt;)</h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#type-ValueXY.t", "title": "ValueXY.t", "contents": "t ", "rendered": "<h4 class='item'>type t</h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#module-ValueXY", "title": "ValueXY", "contents": "@rest", "rendered": "@rest", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#module-ValueXY", "title": "ValueXY", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-Value.Decay.animate", "title": "Value.Decay.animate", "contents": "animate value float option float option bool option bool option endCallback option int unit CompositeAnimation t value velocity deceleration isInteraction useNativeDriver onComplete iterations ", "rendered": "<h4 class='item'>let animate: (\n  ~value: <a href=\"./api/AnimatedRe.html#type-Value.value\">value</a>,\n  ~velocity: float,\n  ~?deceleration: option(float),\n  ~?isInteraction: option(bool),\n  ~?useNativeDriver: option(bool),\n  ~?onComplete: option(<a href=\"./api/AnimatedRe.html#type-Animation.endCallback\" title=\"Animation.endCallback\">endCallback</a>),\n  ~?iterations: option(int),\n  unit\n) => <a href=\"./api/AnimatedRe.html#module-CompositeAnimation\">CompositeAnimation</a>.<a href=\"./api/AnimatedRe.html#type-CompositeAnimation.t\">t</a></h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#type-Value.Decay.config", "title": "Value.Decay.config", "contents": "config ", "rendered": "<h4 class='item'>type config</h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#module-Value.Decay", "title": "Value.Decay", "contents": "@rest", "rendered": "@rest", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#module-Value.Decay", "title": "Value.Decay", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-Value.Spring.animate", "title": "Value.Spring.animate", "contents": "animate value option float option bool option float option float option float option float option float option float option float option float option float option bool option bool option endCallback option int unit CompositeAnimation t value toValue restDisplacementThreshold overshootClamping restSpeedThreshold velocity bounciness speed tension friction stiffness mass damping isInteraction useNativeDriver onComplete iterations ", "rendered": "<h4 class='item'>let animate: (\n  ~value: <a href=\"./api/AnimatedRe.html#type-Value.value\">value</a>,\n  ~toValue: [ `animated of value | `raw of float ],\n  ~?restDisplacementThreshold: option(float),\n  ~?overshootClamping: option(bool),\n  ~?restSpeedThreshold: option(float),\n  ~?velocity: option(float),\n  ~?bounciness: option(float),\n  ~?speed: option(float),\n  ~?tension: option(float),\n  ~?friction: option(float),\n  ~?stiffness: option(float),\n  ~?mass: option(float),\n  ~?damping: option(float),\n  ~?isInteraction: option(bool),\n  ~?useNativeDriver: option(bool),\n  ~?onComplete: option(<a href=\"./api/AnimatedRe.html#type-Animation.endCallback\" title=\"Animation.endCallback\">endCallback</a>),\n  ~?iterations: option(int),\n  unit\n) => <a href=\"./api/AnimatedRe.html#module-CompositeAnimation\">CompositeAnimation</a>.<a href=\"./api/AnimatedRe.html#type-CompositeAnimation.t\">t</a></h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#type-Value.Spring.config", "title": "Value.Spring.config", "contents": "config ", "rendered": "<h4 class='item'>type config</h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#module-Value.Spring", "title": "Value.Spring", "contents": "@rest", "rendered": "@rest", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#module-Value.Spring", "title": "Value.Spring", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-Value.Timing.animate", "title": "Value.Timing.animate", "contents": "animate value option Easing t option float option float option bool option bool option endCallback option int unit CompositeAnimation t value toValue easing duration delay isInteraction useNativeDriver onComplete iterations ", "rendered": "<h4 class='item'>let animate: (\n  ~value: <a href=\"./api/AnimatedRe.html#type-Value.value\">value</a>,\n  ~toValue: [ `animated of value | `raw of float ],\n  ~?easing: option(<a href=\"./api/AnimatedRe.html#module-Easing\">Easing</a>.<a href=\"./api/AnimatedRe.html#type-Easing.t\">t</a>),\n  ~?duration: option(float),\n  ~?delay: option(float),\n  ~?isInteraction: option(bool),\n  ~?useNativeDriver: option(bool),\n  ~?onComplete: option(<a href=\"./api/AnimatedRe.html#type-Animation.endCallback\" title=\"Animation.endCallback\">endCallback</a>),\n  ~?iterations: option(int),\n  unit\n) => <a href=\"./api/AnimatedRe.html#module-CompositeAnimation\">CompositeAnimation</a>.<a href=\"./api/AnimatedRe.html#type-CompositeAnimation.t\">t</a></h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#type-Value.Timing.config", "title": "Value.Timing.config", "contents": "config ", "rendered": "<h4 class='item'>type config</h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#module-Value.Timing", "title": "Value.Timing", "contents": "@rest", "rendered": "@rest", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#module-Value.Timing", "title": "Value.Timing", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-Value.multiply", "title": "Value.multiply", "contents": "multiply value value value  ", "rendered": "<h4 class='item'>let multiply: (<a href=\"./api/AnimatedRe.html#type-Value.value\">value</a>, <a href=\"./api/AnimatedRe.html#type-Value.value\">value</a>) => <a href=\"./api/AnimatedRe.html#type-Value.value\">value</a></h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-Value.divide", "title": "Value.divide", "contents": "divide value value value  ", "rendered": "<h4 class='item'>let divide: (<a href=\"./api/AnimatedRe.html#type-Value.value\">value</a>, <a href=\"./api/AnimatedRe.html#type-Value.value\">value</a>) => <a href=\"./api/AnimatedRe.html#type-Value.value\">value</a></h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-Value.add", "title": "Value.add", "contents": "add value value value  ", "rendered": "<h4 class='item'>let add: (<a href=\"./api/AnimatedRe.html#type-Value.value\">value</a>, <a href=\"./api/AnimatedRe.html#type-Value.value\">value</a>) => <a href=\"./api/AnimatedRe.html#type-Value.value\">value</a></h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#type-Value.value", "title": "Value.value", "contents": "value t", "rendered": "<h4 class='item'>type value = <a href=\"./api/AnimatedRe.html#type-Value.t\">t</a></h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-Value.diffClamp", "title": "Value.diffClamp", "contents": "diffClamp t float float t   ", "rendered": "<h4 class='item'>let diffClamp: (<a href=\"./api/AnimatedRe.html#type-Value.t\">t</a>, float, float) => <a href=\"./api/AnimatedRe.html#type-Value.t\">t</a></h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-Value.modulo", "title": "Value.modulo", "contents": "modulo t float t  ", "rendered": "<h4 class='item'>let modulo: (<a href=\"./api/AnimatedRe.html#type-Value.t\">t</a>, float) => <a href=\"./api/AnimatedRe.html#type-Value.t\">t</a></h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-Value.track", "title": "Value.track", "contents": "track t unit ", "rendered": "<h4 class='item'>let track: <a href=\"./api/AnimatedRe.html#type-Value.t\">t</a> => unit</h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-Value.stopTracking", "title": "Value.stopTracking", "contents": "stopTracking t unit ", "rendered": "<h4 class='item'>let stopTracking: <a href=\"./api/AnimatedRe.html#type-Value.t\">t</a> => unit</h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-Value.animate", "title": "Value.animate", "contents": "animate t Animation t endCallback unit   ", "rendered": "<h4 class='item'>let animate: (<a href=\"./api/AnimatedRe.html#type-Value.t\">t</a>, <a href=\"./api/AnimatedRe.html#module-Animation\">Animation</a>.<a href=\"./api/AnimatedRe.html#type-Animation.t\">t</a>, <a href=\"./api/AnimatedRe.html#type-Animation.endCallback\" title=\"Animation.endCallback\">endCallback</a>) => unit</h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-Value.interpolate", "title": "Value.interpolate", "contents": "interpolate t list float option Easing t option extrapolate option extrapolate option extrapolate unit Interpolation t  inputRange outputRange easing extrapolate extrapolateLeft extrapolateRight ", "rendered": "<h4 class='item'>let interpolate: (\n  <a href=\"./api/AnimatedRe.html#type-Value.t\">t</a>,\n  ~inputRange: list(float),\n  ~outputRange: [&lt; `float of float list | `string of string list ],\n  ~?easing: option(<a href=\"./api/AnimatedRe.html#module-Easing\">Easing</a>.<a href=\"./api/AnimatedRe.html#type-Easing.t\">t</a>),\n  ~?extrapolate: option(<a href=\"./api/AnimatedRe.html#type-Interpolation.extrapolate\" title=\"Interpolation.extrapolate\">extrapolate</a>),\n  ~?extrapolateLeft: option(<a href=\"./api/AnimatedRe.html#type-Interpolation.extrapolate\" title=\"Interpolation.extrapolate\">extrapolate</a>),\n  ~?extrapolateRight: option(<a href=\"./api/AnimatedRe.html#type-Interpolation.extrapolate\" title=\"Interpolation.extrapolate\">extrapolate</a>),\n  unit\n) => <a href=\"./api/AnimatedRe.html#module-Interpolation\">Interpolation</a>.<a href=\"./api/AnimatedRe.html#type-Interpolation.t\">t</a></h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-Value.stopAnimation", "title": "Value.stopAnimation", "contents": "stopAnimation t option callback unit unit  callback ", "rendered": "<h4 class='item'>let stopAnimation: (\n  <a href=\"./api/AnimatedRe.html#type-Value.t\">t</a>,\n  ~?callback: option(<a href=\"./api/AnimatedRe.html#type-Value.callback\">callback</a>),\n  unit\n) => unit</h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-Value.resetAnimation", "title": "Value.resetAnimation", "contents": "resetAnimation t option callback unit unit  callback ", "rendered": "<h4 class='item'>let resetAnimation: (\n  <a href=\"./api/AnimatedRe.html#type-Value.t\">t</a>,\n  ~?callback: option(<a href=\"./api/AnimatedRe.html#type-Value.callback\">callback</a>),\n  unit\n) => unit</h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-Value.removeAllListeners", "title": "Value.removeAllListeners", "contents": "removeAllListeners t unit ", "rendered": "<h4 class='item'>let removeAllListeners: <a href=\"./api/AnimatedRe.html#type-Value.t\">t</a> => unit</h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-Value.removeListener", "title": "Value.removeListener", "contents": "removeListener t string unit  ", "rendered": "<h4 class='item'>let removeListener: (<a href=\"./api/AnimatedRe.html#type-Value.t\">t</a>, string) => unit</h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-Value.addListener", "title": "Value.addListener", "contents": "addListener t callback string  ", "rendered": "<h4 class='item'>let addListener: (<a href=\"./api/AnimatedRe.html#type-Value.t\">t</a>, <a href=\"./api/AnimatedRe.html#type-Value.callback\">callback</a>) => string</h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-Value.extractOffset", "title": "Value.extractOffset", "contents": "extractOffset t unit ", "rendered": "<h4 class='item'>let extractOffset: <a href=\"./api/AnimatedRe.html#type-Value.t\">t</a> => unit</h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-Value.flattenOffset", "title": "Value.flattenOffset", "contents": "flattenOffset t unit ", "rendered": "<h4 class='item'>let flattenOffset: <a href=\"./api/AnimatedRe.html#type-Value.t\">t</a> => unit</h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-Value.setOffset", "title": "Value.setOffset", "contents": "setOffset t float unit  ", "rendered": "<h4 class='item'>let setOffset: (<a href=\"./api/AnimatedRe.html#type-Value.t\">t</a>, float) => unit</h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-Value.setValue", "title": "Value.setValue", "contents": "setValue t float unit  ", "rendered": "<h4 class='item'>let setValue: (<a href=\"./api/AnimatedRe.html#type-Value.t\">t</a>, float) => unit</h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-Value.create", "title": "Value.create", "contents": "create float t ", "rendered": "<h4 class='item'>let create: float => <a href=\"./api/AnimatedRe.html#type-Value.t\">t</a></h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#type-Value.callback", "title": "Value.callback", "contents": "callback jsValue unit ", "rendered": "<h4 class='item'>type callback = <a href=\"./api/AnimatedRe.html#type-Value.jsValue\">jsValue</a> => unit</h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#type-Value.jsValue", "title": "Value.jsValue", "contents": "jsValue Js t", "rendered": "<h4 class='item'>type jsValue = Js.t(&lt; value : float &gt;)</h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#type-Value.t", "title": "Value.t", "contents": "t ", "rendered": "<h4 class='item'>type t</h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#module-Value", "title": "Value", "contents": "@rest", "rendered": "@rest", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#module-Value", "title": "Value", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-Interpolation.interpolate", "title": "Interpolation.interpolate", "contents": "interpolate t list float option Easing t option extrapolate option extrapolate option extrapolate unit t value inputRange outputRange easing extrapolate extrapolateLeft extrapolateRight ", "rendered": "<h4 class='item'>let interpolate: (\n  ~value: <a href=\"./api/AnimatedRe.html#type-Interpolation.t\">t</a>,\n  ~inputRange: list(float),\n  ~outputRange: [&lt; `float of float list | `string of string list ],\n  ~?easing: option(<a href=\"./api/AnimatedRe.html#module-Easing\">Easing</a>.<a href=\"./api/AnimatedRe.html#type-Easing.t\">t</a>),\n  ~?extrapolate: option(<a href=\"./api/AnimatedRe.html#type-Interpolation.extrapolate\">extrapolate</a>),\n  ~?extrapolateLeft: option(<a href=\"./api/AnimatedRe.html#type-Interpolation.extrapolate\">extrapolate</a>),\n  ~?extrapolateRight: option(<a href=\"./api/AnimatedRe.html#type-Interpolation.extrapolate\">extrapolate</a>),\n  unit\n) => <a href=\"./api/AnimatedRe.html#type-Interpolation.t\">t</a></h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#type-Interpolation.extrapolate", "title": "Interpolation.extrapolate", "contents": "extrapolate ", "rendered": "<h4 class='item'>type extrapolate = | Extend | Clamp | Identity\n</h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#type-Interpolation.t", "title": "Interpolation.t", "contents": "t ", "rendered": "<h4 class='item'>type t</h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#module-Interpolation", "title": "Interpolation", "contents": "@rest", "rendered": "@rest", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#module-Interpolation", "title": "Interpolation", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-Easing.bezier", "title": "Easing.bezier", "contents": "bezier float float float float t    ", "rendered": "<h4 class='item'>let bezier: (float, float, float, float) => <a href=\"./api/AnimatedRe.html#type-Easing.t\">t</a></h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-Easing.out", "title": "Easing.out", "contents": "out t t ", "rendered": "<h4 class='item'>let out: <a href=\"./api/AnimatedRe.html#type-Easing.t\">t</a> => <a href=\"./api/AnimatedRe.html#type-Easing.t\">t</a></h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-Easing.inOut", "title": "Easing.inOut", "contents": "inOut t t ", "rendered": "<h4 class='item'>let inOut: <a href=\"./api/AnimatedRe.html#type-Easing.t\">t</a> => <a href=\"./api/AnimatedRe.html#type-Easing.t\">t</a></h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-Easing.in_", "title": "Easing.in_", "contents": "in_ t t ", "rendered": "<h4 class='item'>let in_: <a href=\"./api/AnimatedRe.html#type-Easing.t\">t</a> => <a href=\"./api/AnimatedRe.html#type-Easing.t\">t</a></h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-Easing.elastic", "title": "Easing.elastic", "contents": "elastic float t ", "rendered": "<h4 class='item'>let elastic: float => <a href=\"./api/AnimatedRe.html#type-Easing.t\">t</a></h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-Easing.back", "title": "Easing.back", "contents": "back float t ", "rendered": "<h4 class='item'>let back: float => <a href=\"./api/AnimatedRe.html#type-Easing.t\">t</a></h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-Easing.step1", "title": "Easing.step1", "contents": "step1 t", "rendered": "<h4 class='item'>let step1: <a href=\"./api/AnimatedRe.html#type-Easing.t\">t</a></h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-Easing.step0", "title": "Easing.step0", "contents": "step0 t", "rendered": "<h4 class='item'>let step0: <a href=\"./api/AnimatedRe.html#type-Easing.t\">t</a></h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-Easing.sin", "title": "Easing.sin", "contents": "sin t", "rendered": "<h4 class='item'>let sin: <a href=\"./api/AnimatedRe.html#type-Easing.t\">t</a></h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-Easing.quad", "title": "Easing.quad", "contents": "quad t", "rendered": "<h4 class='item'>let quad: <a href=\"./api/AnimatedRe.html#type-Easing.t\">t</a></h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-Easing.poly", "title": "Easing.poly", "contents": "poly t", "rendered": "<h4 class='item'>let poly: <a href=\"./api/AnimatedRe.html#type-Easing.t\">t</a></h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-Easing.linear", "title": "Easing.linear", "contents": "linear t", "rendered": "<h4 class='item'>let linear: <a href=\"./api/AnimatedRe.html#type-Easing.t\">t</a></h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-Easing.exp", "title": "Easing.exp", "contents": "exp t", "rendered": "<h4 class='item'>let exp: <a href=\"./api/AnimatedRe.html#type-Easing.t\">t</a></h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-Easing.ease", "title": "Easing.ease", "contents": "ease t", "rendered": "<h4 class='item'>let ease: <a href=\"./api/AnimatedRe.html#type-Easing.t\">t</a></h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-Easing.cubic", "title": "Easing.cubic", "contents": "cubic t", "rendered": "<h4 class='item'>let cubic: <a href=\"./api/AnimatedRe.html#type-Easing.t\">t</a></h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-Easing.circle", "title": "Easing.circle", "contents": "circle t", "rendered": "<h4 class='item'>let circle: <a href=\"./api/AnimatedRe.html#type-Easing.t\">t</a></h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-Easing.bounce", "title": "Easing.bounce", "contents": "bounce t", "rendered": "<h4 class='item'>let bounce: <a href=\"./api/AnimatedRe.html#type-Easing.t\">t</a></h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#type-Easing.t", "title": "Easing.t", "contents": "t float float ", "rendered": "<h4 class='item'>type t = float => float</h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#module-Easing", "title": "Easing", "contents": "@rest", "rendered": "@rest", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#module-Easing", "title": "Easing", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-CompositeAnimation.reset", "title": "CompositeAnimation.reset", "contents": "reset t unit ", "rendered": "<h4 class='item'>let reset: <a href=\"./api/AnimatedRe.html#type-CompositeAnimation.t\">t</a> => unit</h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-CompositeAnimation.start", "title": "CompositeAnimation.start", "contents": "start t option endCallback unit unit  callback ", "rendered": "<h4 class='item'>let start: (\n  <a href=\"./api/AnimatedRe.html#type-CompositeAnimation.t\">t</a>,\n  ~?callback: option(<a href=\"./api/AnimatedRe.html#type-Animation.endCallback\" title=\"Animation.endCallback\">endCallback</a>),\n  unit\n) => unit</h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#value-CompositeAnimation.stop", "title": "CompositeAnimation.stop", "contents": "stop t unit ", "rendered": "<h4 class='item'>let stop: <a href=\"./api/AnimatedRe.html#type-CompositeAnimation.t\">t</a> => unit</h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#type-CompositeAnimation.t", "title": "CompositeAnimation.t", "contents": "t ", "rendered": "<h4 class='item'>type t</h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#module-CompositeAnimation", "title": "CompositeAnimation", "contents": "@rest", "rendered": "@rest", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#module-CompositeAnimation", "title": "CompositeAnimation", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#type-Animation.endCallback", "title": "Animation.endCallback", "contents": "endCallback endResult unit ", "rendered": "<h4 class='item'>type endCallback = <a href=\"./api/AnimatedRe.html#type-Animation.endResult\">endResult</a> => unit</h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#type-Animation.endResult", "title": "Animation.endResult", "contents": "endResult Js t", "rendered": "<h4 class='item'>type endResult = Js.t(&lt; finished : bool &gt;)</h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#type-Animation.t", "title": "Animation.t", "contents": "t ", "rendered": "<h4 class='item'>type t</h4>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#module-Animation", "title": "Animation", "contents": "@rest", "rendered": "@rest", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#module-Animation", "title": "Animation", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html", "title": "AnimatedRe", "contents": "@rest", "rendered": "@rest", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html", "title": "AnimatedRe", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "AnimatedRe"},
{"href": "./api/AnimatedRe.html#AnimatedRe", "title": "AnimatedRe", "contents": "", "rendered": "", "breadcrumb": "AnimatedRe"},
{"href": "./api/Animated.html", "title": "Animated", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Animated"},
{"href": "./api/Animated.html", "title": "Animated", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Animated"},
{"href": "./api/Animated.html", "title": "Animated", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Animated"},
{"href": "./api/Animated.html#Animated", "title": "Animated", "contents": "", "rendered": "", "breadcrumb": "Animated"},
{"href": "./api/AlertIOS.html#value-prompt", "title": "prompt", "contents": "prompt string option string option list button option options option option string option unit unit title message buttons options type_ defaultValue keyboardType ", "rendered": "<h4 class='item'>let prompt: (\n  ~title: string,\n  ~?message: option(string),\n  ~?buttons: option(list(<a href=\"./api/AlertIOS.html#type-button\">button</a>)),\n  ~?options: option(<a href=\"./api/AlertIOS.html#type-options\">options</a>),\n  ~?type_: option(\n    [&lt; `loginPassword | `default | `secureText | `plainText ]\n  ),\n  ~?defaultValue: option(string),\n  ~?keyboardType: option(\n    [&lt; `numeric\n | `asciiCapable\n | `namePhonePad\n | `emailAddress\n | `default\n | `webSearch\n | `numbersAndPunctuation\n | `decimalPad\n | `twitter\n | `url\n | `phonePad\n | `numberPad ]\n  ),\n  unit\n) => unit</h4>", "breadcrumb": "AlertIOS"},
{"href": "./api/AlertIOS.html#value-alert", "title": "alert", "contents": "alert string option string option list button option options unit unit title message buttons options ", "rendered": "<h4 class='item'>let alert: (\n  ~title: string,\n  ~?message: option(string),\n  ~?buttons: option(list(<a href=\"./api/AlertIOS.html#type-button\">button</a>)),\n  ~?options: option(<a href=\"./api/AlertIOS.html#type-options\">options</a>),\n  unit\n) => unit</h4>", "breadcrumb": "AlertIOS"},
{"href": "./api/AlertIOS.html#type-button", "title": "button", "contents": "button text option string onPress option unit unit  style option", "rendered": "<h4 class='item'>type button = {\n  text: option(string),\n  onPress: option(unit => unit),\n  style: option([ `default | `cancel | `destructive ])\n}</h4>", "breadcrumb": "AlertIOS"},
{"href": "./api/AlertIOS.html#type-options", "title": "options", "contents": "options cancelable option bool onDismiss option unit unit ", "rendered": "<h4 class='item'>type options = {\n  cancelable: option(bool),\n  onDismiss: option(unit => unit)\n}</h4>", "breadcrumb": "AlertIOS"},
{"href": "./api/AlertIOS.html#type-type_", "title": "type_", "contents": "type_ ", "rendered": "<h4 class='item'>type type_ = [ `loginPassword | `default | `secureText | `plainText ]</h4>", "breadcrumb": "AlertIOS"},
{"href": "./api/AlertIOS.html", "title": "AlertIOS", "contents": "@rest", "rendered": "@rest", "breadcrumb": "AlertIOS"},
{"href": "./api/AlertIOS.html", "title": "AlertIOS", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "AlertIOS"},
{"href": "./api/AlertIOS.html#AlertIOS", "title": "AlertIOS", "contents": "", "rendered": "", "breadcrumb": "AlertIOS"},
{"href": "./api/Alert.html#value-alert", "title": "alert", "contents": "alert string option string option list button option options option unit unit title message buttons options type_ ", "rendered": "<h4 class='item'>let alert: (\n  ~title: string,\n  ~?message: option(string),\n  ~?buttons: option(list(<a href=\"./api/Alert.html#type-button\">button</a>)),\n  ~?options: option(<a href=\"./api/Alert.html#type-options\">options</a>),\n  ~?type_: option(\n    [&lt; `loginPassword | `default | `secureText | `plainText ]\n  ),\n  unit\n) => unit</h4>", "breadcrumb": "Alert"},
{"href": "./api/Alert.html#type-button", "title": "button", "contents": "button text option string onPress option unit unit  style option", "rendered": "<h4 class='item'>type button = {\n  text: option(string),\n  onPress: option(unit => unit),\n  style: option([ `default | `cancel | `destructive ])\n}</h4>", "breadcrumb": "Alert"},
{"href": "./api/Alert.html#type-options", "title": "options", "contents": "options cancelable option bool onDismiss option unit unit ", "rendered": "<h4 class='item'>type options = {\n  cancelable: option(bool),\n  onDismiss: option(unit => unit)\n}</h4>", "breadcrumb": "Alert"},
{"href": "./api/Alert.html#type-type_", "title": "type_", "contents": "type_ ", "rendered": "<h4 class='item'>type type_ = [ `loginPassword | `default | `secureText | `plainText ]</h4>", "breadcrumb": "Alert"},
{"href": "./api/Alert.html", "title": "Alert", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Alert"},
{"href": "./api/Alert.html", "title": "Alert", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Alert"},
{"href": "./api/Alert.html#Alert", "title": "Alert", "contents": "", "rendered": "", "breadcrumb": "Alert"},
{"href": "./api/ActionSheetIOS.html#value-showShareActionSheetWithOptions", "title": "showShareActionSheetWithOptions", "contents": "showShareActionSheetWithOptions option string option string option string option array string error unit  bool string unit   unit unit message url subject excludedActivityTypes   ", "rendered": "<h4 class='item'>let showShareActionSheetWithOptions: (\n  ~?message: option(string),\n  ~?url: option(string),\n  ~?subject: option(string),\n  ~?excludedActivityTypes: option(array(string)),\n  <a href=\"./api/ActionSheetIOS.html#type-error\">error</a> => unit,\n  (bool, string) => unit,\n  unit\n) => unit</h4>", "breadcrumb": "ActionSheetIOS"},
{"href": "./api/ActionSheetIOS.html#value-showActionSheetWithOptions", "title": "showActionSheetWithOptions", "contents": "showActionSheetWithOptions array string option int option int option string option string option string int unit  unit unit options cancelButtonIndex destructiveButtonIndex title message tintColor  ", "rendered": "<h4 class='item'>let showActionSheetWithOptions: (\n  ~options: array(string),\n  ~?cancelButtonIndex: option(int),\n  ~?destructiveButtonIndex: option(int),\n  ~?title: option(string),\n  ~?message: option(string),\n  ~?tintColor: option(string),\n  int => unit,\n  unit\n) => unit</h4>", "breadcrumb": "ActionSheetIOS"},
{"href": "./api/ActionSheetIOS.html#type-error", "title": "error", "contents": "error ", "rendered": "<h4 class='item'>type error</h4>", "breadcrumb": "ActionSheetIOS"},
{"href": "./api/ActionSheetIOS.html", "title": "ActionSheetIOS", "contents": "@rest", "rendered": "@rest", "breadcrumb": "ActionSheetIOS"},
{"href": "./api/ActionSheetIOS.html", "title": "ActionSheetIOS", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ActionSheetIOS"},
{"href": "./api/ActionSheetIOS.html#ActionSheetIOS", "title": "ActionSheetIOS", "contents": "", "rendered": "", "breadcrumb": "ActionSheetIOS"},
{"href": "./api/RNEvent.html#value-nativeScrollEvent", "title": "nativeScrollEvent", "contents": "nativeScrollEvent t NativeScrollEvent t ", "rendered": "<h4 class='item'>let nativeScrollEvent: <a href=\"./api/RNEvent.html#type-t\">t</a> => <a href=\"./api/RNEvent.html#module-NativeScrollEvent\">NativeScrollEvent</a>.<a href=\"./api/RNEvent.html#type-NativeScrollEvent.t\">t</a></h4>", "breadcrumb": "RNEvent"},
{"href": "./api/RNEvent.html#value-nativeLayoutEvent", "title": "nativeLayoutEvent", "contents": "nativeLayoutEvent t NativeLayoutEvent t ", "rendered": "<h4 class='item'>let nativeLayoutEvent: <a href=\"./api/RNEvent.html#type-t\">t</a> => <a href=\"./api/RNEvent.html#module-NativeLayoutEvent\">NativeLayoutEvent</a>.<a href=\"./api/RNEvent.html#type-NativeLayoutEvent.t\">t</a></h4>", "breadcrumb": "RNEvent"},
{"href": "./api/RNEvent.html#value-nativeEvent", "title": "nativeEvent", "contents": "nativeEvent t NativeEvent t ", "rendered": "<h4 class='item'>let nativeEvent: <a href=\"./api/RNEvent.html#type-t\">t</a> => <a href=\"./api/RNEvent.html#module-NativeEvent\">NativeEvent</a>.<a href=\"./api/RNEvent.html#type-NativeEvent.t\">t</a></h4>", "breadcrumb": "RNEvent"},
{"href": "./api/RNEvent.html#value-NativeLayoutEvent.layout", "title": "NativeLayoutEvent.layout", "contents": "layout t layout ", "rendered": "<h4 class='item'>let layout: <a href=\"./api/RNEvent.html#type-NativeLayoutEvent.t\">t</a> => <a href=\"./api/RNEvent.html#type-NativeLayoutEvent.layout\">layout</a></h4>", "breadcrumb": "RNEvent"},
{"href": "./api/RNEvent.html#type-NativeLayoutEvent.layout", "title": "NativeLayoutEvent.layout", "contents": "layout x float y float width float height float", "rendered": "<h4 class='item'>type layout = {\n  x: float,\n  y: float,\n  width: float,\n  height: float\n}</h4>", "breadcrumb": "RNEvent"},
{"href": "./api/RNEvent.html#type-NativeLayoutEvent.t", "title": "NativeLayoutEvent.t", "contents": "t ", "rendered": "<h4 class='item'>type t</h4>", "breadcrumb": "RNEvent"},
{"href": "./api/RNEvent.html#module-NativeLayoutEvent", "title": "NativeLayoutEvent", "contents": "@rest", "rendered": "@rest", "breadcrumb": "RNEvent"},
{"href": "./api/RNEvent.html#module-NativeLayoutEvent", "title": "NativeLayoutEvent", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "RNEvent"},
{"href": "./api/RNEvent.html#value-NativeScrollEvent.layoutMeasurement", "title": "NativeScrollEvent.layoutMeasurement", "contents": "layoutMeasurement t size ", "rendered": "<h4 class='item'>let layoutMeasurement: <a href=\"./api/RNEvent.html#type-NativeScrollEvent.t\">t</a> => <a href=\"./api/RNEvent.html#type-NativeScrollEvent.size\">size</a></h4>", "breadcrumb": "RNEvent"},
{"href": "./api/RNEvent.html#value-NativeScrollEvent.contentInset", "title": "NativeScrollEvent.contentInset", "contents": "contentInset t contentInset ", "rendered": "<h4 class='item'>let contentInset: <a href=\"./api/RNEvent.html#type-NativeScrollEvent.t\">t</a> => <a href=\"./api/RNEvent.html#type-NativeScrollEvent.contentInset\">contentInset</a></h4>", "breadcrumb": "RNEvent"},
{"href": "./api/RNEvent.html#value-NativeScrollEvent.contentSize", "title": "NativeScrollEvent.contentSize", "contents": "contentSize t size ", "rendered": "<h4 class='item'>let contentSize: <a href=\"./api/RNEvent.html#type-NativeScrollEvent.t\">t</a> => <a href=\"./api/RNEvent.html#type-NativeScrollEvent.size\">size</a></h4>", "breadcrumb": "RNEvent"},
{"href": "./api/RNEvent.html#value-NativeScrollEvent.contentOffset", "title": "NativeScrollEvent.contentOffset", "contents": "contentOffset t point ", "rendered": "<h4 class='item'>let contentOffset: <a href=\"./api/RNEvent.html#type-NativeScrollEvent.t\">t</a> => <a href=\"./api/RNEvent.html#type-NativeScrollEvent.point\">point</a></h4>", "breadcrumb": "RNEvent"},
{"href": "./api/RNEvent.html#type-NativeScrollEvent.contentInset", "title": "NativeScrollEvent.contentInset", "contents": "contentInset bottom float top float left float right float", "rendered": "<h4 class='item'>type contentInset = {\n  bottom: float,\n  top: float,\n  left: float,\n  right: float\n}</h4>", "breadcrumb": "RNEvent"},
{"href": "./api/RNEvent.html#type-NativeScrollEvent.size", "title": "NativeScrollEvent.size", "contents": "size width float height float", "rendered": "<h4 class='item'>type size = {width: float, height: float}</h4>", "breadcrumb": "RNEvent"},
{"href": "./api/RNEvent.html#type-NativeScrollEvent.point", "title": "NativeScrollEvent.point", "contents": "point x float y float", "rendered": "<h4 class='item'>type point = {x: float, y: float}</h4>", "breadcrumb": "RNEvent"},
{"href": "./api/RNEvent.html#type-NativeScrollEvent.t", "title": "NativeScrollEvent.t", "contents": "t ", "rendered": "<h4 class='item'>type t</h4>", "breadcrumb": "RNEvent"},
{"href": "./api/RNEvent.html#module-NativeScrollEvent", "title": "NativeScrollEvent", "contents": "@rest", "rendered": "@rest", "breadcrumb": "RNEvent"},
{"href": "./api/RNEvent.html#module-NativeScrollEvent", "title": "NativeScrollEvent", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "RNEvent"},
{"href": "./api/RNEvent.html#value-NativeEvent.data", "title": "NativeEvent.data", "contents": "data t string ", "rendered": "<h4 class='item'>let data: <a href=\"./api/RNEvent.html#type-NativeEvent.t\">t</a> => string</h4>", "breadcrumb": "RNEvent"},
{"href": "./api/RNEvent.html#value-NativeEvent.timestamp", "title": "NativeEvent.timestamp", "contents": "timestamp t int ", "rendered": "<h4 class='item'>let timestamp: <a href=\"./api/RNEvent.html#type-NativeEvent.t\">t</a> => int</h4>", "breadcrumb": "RNEvent"},
{"href": "./api/RNEvent.html#value-NativeEvent.touches", "title": "NativeEvent.touches", "contents": "touches t array Js t ", "rendered": "<h4 class='item'>let touches: <a href=\"./api/RNEvent.html#type-NativeEvent.t\">t</a> => array(Js.t(&lt; .. &gt;))</h4>", "breadcrumb": "RNEvent"},
{"href": "./api/RNEvent.html#value-NativeEvent.target", "title": "NativeEvent.target", "contents": "target t Js t ", "rendered": "<h4 class='item'>let target: <a href=\"./api/RNEvent.html#type-NativeEvent.t\">t</a> => Js.t(&lt; .. &gt;)</h4>", "breadcrumb": "RNEvent"},
{"href": "./api/RNEvent.html#value-NativeEvent.pageY", "title": "NativeEvent.pageY", "contents": "pageY t float ", "rendered": "<h4 class='item'>let pageY: <a href=\"./api/RNEvent.html#type-NativeEvent.t\">t</a> => float</h4>", "breadcrumb": "RNEvent"},
{"href": "./api/RNEvent.html#value-NativeEvent.pageX", "title": "NativeEvent.pageX", "contents": "pageX t float ", "rendered": "<h4 class='item'>let pageX: <a href=\"./api/RNEvent.html#type-NativeEvent.t\">t</a> => float</h4>", "breadcrumb": "RNEvent"},
{"href": "./api/RNEvent.html#value-NativeEvent.locationY", "title": "NativeEvent.locationY", "contents": "locationY t float ", "rendered": "<h4 class='item'>let locationY: <a href=\"./api/RNEvent.html#type-NativeEvent.t\">t</a> => float</h4>", "breadcrumb": "RNEvent"},
{"href": "./api/RNEvent.html#value-NativeEvent.locationX", "title": "NativeEvent.locationX", "contents": "locationX t float ", "rendered": "<h4 class='item'>let locationX: <a href=\"./api/RNEvent.html#type-NativeEvent.t\">t</a> => float</h4>", "breadcrumb": "RNEvent"},
{"href": "./api/RNEvent.html#value-NativeEvent.identifier", "title": "NativeEvent.identifier", "contents": "identifier t int ", "rendered": "<h4 class='item'>let identifier: <a href=\"./api/RNEvent.html#type-NativeEvent.t\">t</a> => int</h4>", "breadcrumb": "RNEvent"},
{"href": "./api/RNEvent.html#value-NativeEvent.changedTouches", "title": "NativeEvent.changedTouches", "contents": "changedTouches t array Js t ", "rendered": "<h4 class='item'>let changedTouches: <a href=\"./api/RNEvent.html#type-NativeEvent.t\">t</a> => array(Js.t(&lt; .. &gt;))</h4>", "breadcrumb": "RNEvent"},
{"href": "./api/RNEvent.html#type-NativeEvent.t", "title": "NativeEvent.t", "contents": "t ", "rendered": "<h4 class='item'>type t</h4>", "breadcrumb": "RNEvent"},
{"href": "./api/RNEvent.html#module-NativeEvent", "title": "NativeEvent", "contents": "@rest", "rendered": "@rest", "breadcrumb": "RNEvent"},
{"href": "./api/RNEvent.html#module-NativeEvent", "title": "NativeEvent", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "RNEvent"},
{"href": "./api/RNEvent.html#type-t", "title": "t", "contents": "t ", "rendered": "<h4 class='item'>type t</h4>", "breadcrumb": "RNEvent"},
{"href": "./api/RNEvent.html", "title": "RNEvent", "contents": "@rest", "rendered": "@rest", "breadcrumb": "RNEvent"},
{"href": "./api/RNEvent.html", "title": "RNEvent", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "RNEvent"},
{"href": "./api/RNEvent.html#RNEvent", "title": "RNEvent", "contents": "", "rendered": "", "breadcrumb": "RNEvent"}]